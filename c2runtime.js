// Generated by Construct 2, the HTML5 game and app creator :: http://www.scirra.com
var cr = {};
if (typeof window !== "undefined")		// needed for V8 engine in edittime
	window.cr = cr;						// in case engine wrapped in closure on export
cr.plugins_ = {};
cr.behaviors = {};
if (typeof Object.getPrototypeOf !== "function")
{
	if (typeof "test".__proto__ === "object")
	{
		Object.getPrototypeOf = function(object) {
			return object.__proto__;
		};
	}
	else
	{
		Object.getPrototypeOf = function(object) {
			return object.constructor.prototype;
		};
	}
}
(function(){
	cr.seal = function(x)
	{
		return x;
	};
	cr.freeze = function(x)
	{
		return x;
	};
	cr.is_undefined = function (x)
	{
		return typeof x === "undefined";
	};
	cr.is_number = function (x)
	{
		return typeof x === "number";
	};
	cr.is_string = function (x)
	{
		return typeof x === "string";
	};
	cr.isPOT = function (x)
	{
		return x > 0 && ((x - 1) & x) === 0;
	};
	cr.abs = function (x)
	{
		return (x < 0 ? -x : x);
	};
	cr.max = function (a, b)
	{
		return (a > b ? a : b);
	};
	cr.min = function (a, b)
	{
		return (a < b ? a : b);
	};
	cr.PI = Math.PI;
	cr.round = function (x)
	{
		return (x + 0.5) | 0;
	};
	cr.floor = function (x)
	{
		return x | 0;
	};
	cr.vector2 = function (x, y)
	{
		this.x = x;
		this.y = y;
		cr.seal(this);
	};
	var v2Proto = cr.vector2.prototype;
	v2Proto.offset = function (px, py)
	{
		this.x += px;
		this.y += py;
		return this;
	};
	v2Proto.mul = function (px, py)
	{
		this.x *= px;
		this.y *= py;
		return this;
	};
	cr.segments_intersect = function(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y)
	{
		if (cr.max(a1x, a2x) < cr.min(b1x, b2x)
		 || cr.min(a1x, a2x) > cr.max(b1x, b2x)
		 || cr.max(a1y, a2y) < cr.min(b1y, b2y)
		 || cr.min(a1y, a2y) > cr.max(b1y, b2y))
		{
			return false;
		}
		var dpx = b1x - a1x + b2x - a2x;
		var dpy = b1y - a1y + b2y - a2y;
		var qax = a2x - a1x;
		var qay = a2y - a1y;
		var qbx = b2x - b1x;
		var qby = b2y - b1y;
		var d = cr.abs(qay * qbx - qby * qax);
		var la = qbx * dpy - qby * dpx;
		var lb = qax * dpy - qay * dpx;
		return cr.abs(la) <= d && cr.abs(lb) <= d;
	};
	cr.rect = function (left, top, right, bottom)
	{
		this.set(left, top, right, bottom);
		cr.seal(this);
	};
	var rectProto = cr.rect.prototype;
	rectProto.set = function (left, top, right, bottom)
	{
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	};
	rectProto.width = function ()
	{
		return this.right - this.left;
	};
	rectProto.height = function ()
	{
		return this.bottom - this.top;
	};
	rectProto.offset = function (px, py)
	{
		this.left += px;
		this.top += py;
		this.right += px;
		this.bottom += py;
		return this;
	};
	rectProto.intersects_rect = function (rc)
	{
		return !(rc.right < this.left || rc.bottom < this.top || rc.left > this.right || rc.top > this.bottom);
	};
	rectProto.contains_pt = function (x, y)
	{
		return (x >= this.left && x <= this.right) && (y >= this.top && y <= this.bottom);
	};
	cr.quad = function ()
	{
		this.tlx = 0;
		this.tly = 0;
		this.trx = 0;
		this.try_ = 0;	// is a keyword otherwise!
		this.brx = 0;
		this.bry = 0;
		this.blx = 0;
		this.bly = 0;
		cr.seal(this);
	};
	var quadProto = cr.quad.prototype;
	quadProto.set_from_rect = function (rc)
	{
		this.tlx = rc.left;
		this.tly = rc.top;
		this.trx = rc.right;
		this.try_ = rc.top;
		this.brx = rc.right;
		this.bry = rc.bottom;
		this.blx = rc.left;
		this.bly = rc.bottom;
	};
	quadProto.set_from_rotated_rect = function (rc, a)
	{
		if (a === 0)
		{
			this.set_from_rect(rc);
		}
		else
		{
			var sin_a = Math.sin(a);
			var cos_a = Math.cos(a);
			var left_sin_a = rc.left * sin_a;
			var top_sin_a = rc.top * sin_a;
			var right_sin_a = rc.right * sin_a;
			var bottom_sin_a = rc.bottom * sin_a;
			var left_cos_a = rc.left * cos_a;
			var top_cos_a = rc.top * cos_a;
			var right_cos_a = rc.right * cos_a;
			var bottom_cos_a = rc.bottom * cos_a;
			this.tlx = left_cos_a - top_sin_a;
			this.tly = top_cos_a + left_sin_a;
			this.trx = right_cos_a - top_sin_a;
			this.try_ = top_cos_a + right_sin_a;
			this.brx = right_cos_a - bottom_sin_a;
			this.bry = bottom_cos_a + right_sin_a;
			this.blx = left_cos_a - bottom_sin_a;
			this.bly = bottom_cos_a + left_sin_a;
		}
	};
	quadProto.offset = function (px, py)
	{
		this.tlx += px;
		this.tly += py;
		this.trx += px;
		this.try_ += py;
		this.brx += px;
		this.bry += py;
		this.blx += px;
		this.bly += py;
		return this;
	};
	quadProto.bounding_box = function (rc)
	{
		rc.left =   cr.min(cr.min(this.tlx, this.trx),  cr.min(this.brx, this.blx));
		rc.top =    cr.min(cr.min(this.tly, this.try_), cr.min(this.bry, this.bly));
		rc.right =  cr.max(cr.max(this.tlx, this.trx),  cr.max(this.brx, this.blx));
		rc.bottom = cr.max(cr.max(this.tly, this.try_), cr.max(this.bry, this.bly));
	};
	quadProto.contains_pt = function (x, y)
	{
		var v0x = this.trx - this.tlx;
		var v0y = this.try_ - this.tly;
		var v1x = this.brx - this.tlx;
		var v1y = this.bry - this.tly;
		var v2x = x - this.tlx;
		var v2y = y - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		var dot11 = v1x * v1x + v1y * v1y
		var dot12 = v1x * v2x + v1y * v2y
		var invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		if ((u >= 0.0) && (v > 0.0) && (u + v < 1))
			return true;
		v0x = this.blx - this.tlx;
		v0y = this.bly - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		return (u >= 0.0) && (v > 0.0) && (u + v < 1);
	};
	quadProto.at = function (i, xory)
	{
		i = i % 4;
		if (i < 0)
			i += 4;
		switch (i)
		{
			case 0: return xory ? this.tlx : this.tly;
			case 1: return xory ? this.trx : this.try_;
			case 2: return xory ? this.brx : this.bry;
			case 3: return xory ? this.blx : this.bly;
			default: return xory ? this.tlx : this.tly;
		}
	};
	quadProto.midX = function ()
	{
		return (this.tlx + this.trx  + this.brx + this.blx) / 4;
	};
	quadProto.midY = function ()
	{
		return (this.tly + this.try_ + this.bry + this.bly) / 4;
	};
	quadProto.intersects_quad = function (rhs)
	{
		var midx = rhs.midX();
		var midy = rhs.midY();
		if (this.contains_pt(midx, midy))
			return true;
		midx = this.midX();
		midy = this.midY();
		if (rhs.contains_pt(midx, midy))
			return true;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		var i, j;
		for (i = 0; i < 4; i++)
		{
			for (j = 0; j < 4; j++)
			{
				a1x = this.at(i, true);
				a1y = this.at(i, false);
				a2x = this.at(i + 1, true);
				a2y = this.at(i + 1, false);
				b1x = rhs.at(j, true);
				b1y = rhs.at(j, false);
				b2x = rhs.at(j + 1, true);
				b2y = rhs.at(j + 1, false);
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	cr.RGB = function (red, green, blue)
	{
		return Math.max(Math.min(red, 255), 0)
			 | (Math.max(Math.min(green, 255), 0) << 8)
			 | (Math.max(Math.min(blue, 255), 0) << 16);
	};
	cr.GetRValue = function (rgb)
	{
		return rgb & 0xFF;
	};
	cr.GetGValue = function (rgb)
	{
		return (rgb & 0xFF00) >> 8;
	};
	cr.GetBValue = function (rgb)
	{
		return (rgb & 0xFF0000) >> 16;
	};
	cr.shallowCopy = function (a, b, allowOverwrite)
	{
		var attr;
		for (attr in b)
		{
			if (b.hasOwnProperty(attr))
			{
;
				a[attr] = b[attr];
			}
		}
	};
	cr.arrayRemove = function (arr, index)
	{
		var i, len;
		if (index === 0)					// removing first item
			arr.shift();
		else if (index === arr.length - 1)	// removing last item
			arr.pop();
		else
		{
			for (i = index, len = arr.length - 1; i < len; i++)
				arr[i] = arr[i + 1];
			arr.length = len;
		}
	};
	cr.arrayFindRemove = function (arr, item)
	{
		var index = arr.indexOf(item);
		if (index !== -1)
			cr.arrayRemove(arr, index);
	};
	cr.clamp = function(x, a, b)
	{
		if (x < a)
			return a;
		else if (x > b)
			return b;
		else
			return x;
	};
	cr.to_radians = function(x)
	{
		return x / (180.0 / cr.PI);
	};
	cr.to_degrees = function(x)
	{
		return x * (180.0 / cr.PI);
	};
	cr.clamp_angle_degrees = function (a)
	{
		a %= 360;       // now in (-360, 360) range
		if (a < 0)
			a += 360;   // now in [0, 360) range
		return a;
	};
	cr.clamp_angle = function (a)
	{
		a %= 2 * cr.PI;       // now in (-2pi, 2pi) range
		if (a < 0)
			a += 2 * cr.PI;   // now in [0, 2pi) range
		return a;
	};
	cr.to_clamped_degrees = function (x)
	{
		return cr.clamp_angle_degrees(cr.to_degrees(x));
	};
	cr.to_clamped_radians = function (x)
	{
		return cr.clamp_angle(cr.to_radians(x));
	};
	cr.angleTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.atan2(dy, dx);
	};
	cr.angleDiff = function (a1, a2)
	{
		if (a1 === a2)
			return 0;
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		var n = s1 * s2 + c1 * c2;
		if (n >= 1)
			return 0;
		if (n <= -1)
			return cr.PI;
		return Math.acos(n);
	};
	cr.angleRotate = function (start, end, step)
	{
		var ss = Math.sin(start);
		var cs = Math.cos(start);
		var se = Math.sin(end);
		var ce = Math.cos(end);
		if (Math.acos(ss * se + cs * ce) > step)
		{
			if (cs * se - ss * ce > 0)
				return cr.clamp_angle(start + step);
			else
				return cr.clamp_angle(start - step);
		}
		else
			return cr.clamp_angle(end);
	};
	cr.angleClockwise = function (a1, a2)
	{
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		return c1 * s2 - s1 * c2 <= 0;
	};
	cr.distanceTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.sqrt(dx*dx + dy*dy);
	};
	cr.xor = function (x, y)
	{
		return !x !== !y;
	};
	cr.lerp = function (a, b, x)
	{
		return a + (b - a) * x;
	};
	cr.wipe = function (obj)
	{
		var p;
		for (p in obj)
		{
			if (obj.hasOwnProperty(p))
				delete obj[p];
		}
	};
	cr.ObjectSet = function ()
	{
		this.items = {};
		this.item_count = 0;
		this.values_cache = [];
		this.cache_valid = true;
		cr.seal(this);
	};
	var ObjectSetProto = cr.ObjectSet.prototype;
	ObjectSetProto.contains = function (x)
	{
		return this.items.hasOwnProperty(x.toString());
	};
	ObjectSetProto.add = function (x)
	{
		if (!this.contains(x))
		{
			this.items[x.toString()] = x;
			this.item_count++;
			this.cache_valid = false;
		}
		return this;
	};
	ObjectSetProto.remove = function (x)
	{
		if (this.contains(x))
		{
			delete this.items[x.toString()];
			this.item_count--;
			this.cache_valid = false;
		}
		return this;
	};
	ObjectSetProto.clear = function ()
	{
		cr.wipe(this.items);
		this.item_count = 0;
		this.values_cache.length = 0;
		this.cache_valid = true;
		return this;
	};
	ObjectSetProto.isEmpty = function ()
	{
		return this.item_count === 0;
	};
	ObjectSetProto.count = function ()
	{
		return this.item_count;
	};
	ObjectSetProto.update_cache = function ()
	{
		if (this.cache_valid)
			return;
		this.values_cache.length = this.item_count;
		var p, n = 0;
		for (p in this.items)
		{
			if (this.items.hasOwnProperty(p))
				this.values_cache[n++] = this.items[p];
		}
;
		this.cache_valid = true;
	};
	ObjectSetProto.values = function ()
	{
		this.update_cache();
		return this.values_cache.slice(0);
	};
	ObjectSetProto.valuesRef = function ()
	{
		this.update_cache();
		return this.values_cache;
	};
	cr.KahanAdder = function ()
	{
		this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
		cr.seal(this);
	};
	var KahanProto = cr.KahanAdder.prototype;
	KahanProto.add = function (v)
	{
		this.y = v - this.c;
	    this.t = this.sum + this.y;
	    this.c = (this.t - this.sum) - this.y;
	    this.sum = this.t;
	};
    KahanProto.reset = function ()
    {
        this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
    };
	cr.regexp_escape = function(text)
	{
		return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	};
	cr.CollisionPoly = function (pts_array_)
	{
		this.pts_cache = [];
		this.set_pts(pts_array_);
		cr.seal(this);
	};
	var CollisionPolyProto = cr.CollisionPoly.prototype;
	CollisionPolyProto.set_pts = function(pts_array_)
	{
		this.pts_array = pts_array_;
		this.pts_count = pts_array_.length / 2;			// x, y, x, y... in array
		this.pts_cache.length = pts_array_.length;
		this.cache_width = -1;
		this.cache_height = -1;
		this.cache_angle = 0;
	};
	CollisionPolyProto.is_empty = function()
	{
		return !this.pts_array.length;
	};
	CollisionPolyProto.set_from_quad = function(q, offx, offy, w, h)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = q.tlx - offx;
		myptscache[1] = q.tly - offy;
		myptscache[2] = q.trx - offx;
		myptscache[3] = q.try_ - offy;
		myptscache[4] = q.brx - offx;
		myptscache[5] = q.bry - offy;
		myptscache[6] = q.blx - offx;
		myptscache[7] = q.bly - offy;
		this.cache_width = w;
		this.cache_height = h;
	};
	CollisionPolyProto.cache_poly = function(w, h, a)
	{
		if (this.cache_width === w && this.cache_height === h && this.cache_angle === a)
			return;		// cache up-to-date
		this.cache_width = w;
		this.cache_height = h;
		this.cache_angle = a;
		var i, len, x, y;
		var sina = 0;
		var cosa = 1;
		var myptsarray = this.pts_array;
		var myptscache = this.pts_cache;
		if (a !== 0)
		{
			sina = Math.sin(a);
			cosa = Math.cos(a);
		}
		for (i = 0, len = this.pts_count; i < len; i++)
		{
			x = myptsarray[i*2] * w;
			y = myptsarray[i*2+1] * h;
			myptscache[i*2] = (x * cosa) - (y * sina);
			myptscache[i*2+1] = (y * cosa) + (x * sina);
		}
	};
	CollisionPolyProto.contains_pt = function (a2x, a2y)
	{
		var myptscache = this.pts_cache;
		if (a2x === myptscache[0] && a2y === myptscache[1])
			return true;
		var a1x = -this.cache_width * 5 - 1;
		var a1y = -this.cache_height * 5 - 1;
		var a3x = this.cache_width * 5 + 1;
		var a3y = -1;
		var b1x, b1y, b2x, b2y;
		var i, len;
		var count1 = 0, count2 = 0;
		for (i = 0, len = this.pts_count; i < len; i++)
		{
			b1x = myptscache[i*2];
			b1y = myptscache[i*2+1];
			b2x = myptscache[((i+1)%len)*2];
			b2y = myptscache[((i+1)%len)*2+1];
			if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
				count1++;
			if (cr.segments_intersect(a3x, a3y, a2x, a2y, b1x, b1y, b2x, b2y))
				count2++;
		}
		return (count1 % 2 === 1) || (count2 % 2 === 1);
	};
	CollisionPolyProto.intersects_poly = function (rhs, offx, offy)
	{
		var rhspts = rhs.pts_cache;
		var mypts = this.pts_cache;
		if (this.contains_pt(rhspts[0] + offx, rhspts[1] + offy))
			return true;
		if (rhs.contains_pt(mypts[0] - offx, mypts[1] - offy))
			return true;
		var i, leni, j, lenj;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			a1x = mypts[i*2];
			a1y = mypts[i*2+1];
			a2x = mypts[((i+1)%leni)*2];
			a2y = mypts[((i+1)%leni)*2+1];
			for (j = 0, lenj = rhs.pts_count; j < lenj; j++)
			{
				b1x = rhspts[j*2] + offx;
				b1y = rhspts[j*2+1] + offy;
				b2x = rhspts[((j+1)%lenj)*2] + offx;
				b2y = rhspts[((j+1)%lenj)*2+1] + offy;
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	var fxNames = [ "lighter",
					"xor",
					"copy",
					"destination-over",
					"source-in",
					"destination-in",
					"source-out",
					"destination-out",
					"source-atop",
					"destination-atop"];
	cr.effectToCompositeOp = function(effect)
	{
		if (effect <= 0 || effect >= 11)
			return "source-over";
		return fxNames[effect - 1];	// not including "none" so offset by 1
	};
	cr.setGLBlend = function(this_, effect, gl)
	{
		if (!gl)
			return;
		this_.srcBlend = gl.ONE;
		this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
		switch (effect) {
		case 1:		// lighter (additive)
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ONE;
			break;
		case 2:		// xor
			break;	// todo
		case 3:		// copy
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ZERO;
			break;
		case 4:		// destination-over
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ONE;
			break;
		case 5:		// source-in
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 6:		// destination-in
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		case 7:		// source-out
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 8:		// destination-out
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 9:		// source-atop
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 10:	// destination-atop
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		}
	};
	cr.round6dp = function (x)
	{
		return Math.round(x * 1000000) / 1000000;
	};
}());
var MatrixArray=typeof Float32Array!=="undefined"?Float32Array:Array,glMatrixArrayType=MatrixArray,vec3={},mat3={},mat4={},quat4={};vec3.create=function(a){var b=new MatrixArray(3);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2]);return b};vec3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];return b};vec3.add=function(a,b,c){if(!c||a===c)return a[0]+=b[0],a[1]+=b[1],a[2]+=b[2],a;c[0]=a[0]+b[0];c[1]=a[1]+b[1];c[2]=a[2]+b[2];return c};
vec3.subtract=function(a,b,c){if(!c||a===c)return a[0]-=b[0],a[1]-=b[1],a[2]-=b[2],a;c[0]=a[0]-b[0];c[1]=a[1]-b[1];c[2]=a[2]-b[2];return c};vec3.negate=function(a,b){b||(b=a);b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];return b};vec3.scale=function(a,b,c){if(!c||a===c)return a[0]*=b,a[1]*=b,a[2]*=b,a;c[0]=a[0]*b;c[1]=a[1]*b;c[2]=a[2]*b;return c};
vec3.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=Math.sqrt(c*c+d*d+e*e);if(g){if(g===1)return b[0]=c,b[1]=d,b[2]=e,b}else return b[0]=0,b[1]=0,b[2]=0,b;g=1/g;b[0]=c*g;b[1]=d*g;b[2]=e*g;return b};vec3.cross=function(a,b,c){c||(c=a);var d=a[0],e=a[1],a=a[2],g=b[0],f=b[1],b=b[2];c[0]=e*b-a*f;c[1]=a*g-d*b;c[2]=d*f-e*g;return c};vec3.length=function(a){var b=a[0],c=a[1],a=a[2];return Math.sqrt(b*b+c*c+a*a)};vec3.dot=function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]};
vec3.direction=function(a,b,c){c||(c=a);var d=a[0]-b[0],e=a[1]-b[1],a=a[2]-b[2],b=Math.sqrt(d*d+e*e+a*a);if(!b)return c[0]=0,c[1]=0,c[2]=0,c;b=1/b;c[0]=d*b;c[1]=e*b;c[2]=a*b;return c};vec3.lerp=function(a,b,c,d){d||(d=a);d[0]=a[0]+c*(b[0]-a[0]);d[1]=a[1]+c*(b[1]-a[1]);d[2]=a[2]+c*(b[2]-a[2]);return d};vec3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+"]"};
mat3.create=function(a){var b=new MatrixArray(9);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8]);return b};mat3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];return b};mat3.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=1;a[5]=0;a[6]=0;a[7]=0;a[8]=1;return a};
mat3.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[5];a[1]=a[3];a[2]=a[6];a[3]=c;a[5]=a[7];a[6]=d;a[7]=e;return a}b[0]=a[0];b[1]=a[3];b[2]=a[6];b[3]=a[1];b[4]=a[4];b[5]=a[7];b[6]=a[2];b[7]=a[5];b[8]=a[8];return b};mat3.toMat4=function(a,b){b||(b=mat4.create());b[15]=1;b[14]=0;b[13]=0;b[12]=0;b[11]=0;b[10]=a[8];b[9]=a[7];b[8]=a[6];b[7]=0;b[6]=a[5];b[5]=a[4];b[4]=a[3];b[3]=0;b[2]=a[2];b[1]=a[1];b[0]=a[0];return b};
mat3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+"]"};mat4.create=function(a){var b=new MatrixArray(16);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8],b[9]=a[9],b[10]=a[10],b[11]=a[11],b[12]=a[12],b[13]=a[13],b[14]=a[14],b[15]=a[15]);return b};
mat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return b};mat4.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=0;a[5]=1;a[6]=0;a[7]=0;a[8]=0;a[9]=0;a[10]=1;a[11]=0;a[12]=0;a[13]=0;a[14]=0;a[15]=1;return a};
mat4.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[3],g=a[6],f=a[7],h=a[11];a[1]=a[4];a[2]=a[8];a[3]=a[12];a[4]=c;a[6]=a[9];a[7]=a[13];a[8]=d;a[9]=g;a[11]=a[14];a[12]=e;a[13]=f;a[14]=h;return a}b[0]=a[0];b[1]=a[4];b[2]=a[8];b[3]=a[12];b[4]=a[1];b[5]=a[5];b[6]=a[9];b[7]=a[13];b[8]=a[2];b[9]=a[6];b[10]=a[10];b[11]=a[14];b[12]=a[3];b[13]=a[7];b[14]=a[11];b[15]=a[15];return b};
mat4.determinant=function(a){var b=a[0],c=a[1],d=a[2],e=a[3],g=a[4],f=a[5],h=a[6],i=a[7],j=a[8],k=a[9],l=a[10],n=a[11],o=a[12],m=a[13],p=a[14],a=a[15];return o*k*h*e-j*m*h*e-o*f*l*e+g*m*l*e+j*f*p*e-g*k*p*e-o*k*d*i+j*m*d*i+o*c*l*i-b*m*l*i-j*c*p*i+b*k*p*i+o*f*d*n-g*m*d*n-o*c*h*n+b*m*h*n+g*c*p*n-b*f*p*n-j*f*d*a+g*k*d*a+j*c*h*a-b*k*h*a-g*c*l*a+b*f*l*a};
mat4.inverse=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=a[4],h=a[5],i=a[6],j=a[7],k=a[8],l=a[9],n=a[10],o=a[11],m=a[12],p=a[13],r=a[14],s=a[15],A=c*h-d*f,B=c*i-e*f,t=c*j-g*f,u=d*i-e*h,v=d*j-g*h,w=e*j-g*i,x=k*p-l*m,y=k*r-n*m,z=k*s-o*m,C=l*r-n*p,D=l*s-o*p,E=n*s-o*r,q=1/(A*E-B*D+t*C+u*z-v*y+w*x);b[0]=(h*E-i*D+j*C)*q;b[1]=(-d*E+e*D-g*C)*q;b[2]=(p*w-r*v+s*u)*q;b[3]=(-l*w+n*v-o*u)*q;b[4]=(-f*E+i*z-j*y)*q;b[5]=(c*E-e*z+g*y)*q;b[6]=(-m*w+r*t-s*B)*q;b[7]=(k*w-n*t+o*B)*q;b[8]=(f*D-h*z+j*x)*q;
b[9]=(-c*D+d*z-g*x)*q;b[10]=(m*v-p*t+s*A)*q;b[11]=(-k*v+l*t-o*A)*q;b[12]=(-f*C+h*y-i*x)*q;b[13]=(c*C-d*y+e*x)*q;b[14]=(-m*u+p*B-r*A)*q;b[15]=(k*u-l*B+n*A)*q;return b};mat4.toRotationMat=function(a,b){b||(b=mat4.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
mat4.toMat3=function(a,b){b||(b=mat3.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[4];b[4]=a[5];b[5]=a[6];b[6]=a[8];b[7]=a[9];b[8]=a[10];return b};mat4.toInverseMat3=function(a,b){var c=a[0],d=a[1],e=a[2],g=a[4],f=a[5],h=a[6],i=a[8],j=a[9],k=a[10],l=k*f-h*j,n=-k*g+h*i,o=j*g-f*i,m=c*l+d*n+e*o;if(!m)return null;m=1/m;b||(b=mat3.create());b[0]=l*m;b[1]=(-k*d+e*j)*m;b[2]=(h*d-e*f)*m;b[3]=n*m;b[4]=(k*c-e*i)*m;b[5]=(-h*c+e*g)*m;b[6]=o*m;b[7]=(-j*c+d*i)*m;b[8]=(f*c-d*g)*m;return b};
mat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],f=a[3],h=a[4],i=a[5],j=a[6],k=a[7],l=a[8],n=a[9],o=a[10],m=a[11],p=a[12],r=a[13],s=a[14],a=a[15],A=b[0],B=b[1],t=b[2],u=b[3],v=b[4],w=b[5],x=b[6],y=b[7],z=b[8],C=b[9],D=b[10],E=b[11],q=b[12],F=b[13],G=b[14],b=b[15];c[0]=A*d+B*h+t*l+u*p;c[1]=A*e+B*i+t*n+u*r;c[2]=A*g+B*j+t*o+u*s;c[3]=A*f+B*k+t*m+u*a;c[4]=v*d+w*h+x*l+y*p;c[5]=v*e+w*i+x*n+y*r;c[6]=v*g+w*j+x*o+y*s;c[7]=v*f+w*k+x*m+y*a;c[8]=z*d+C*h+D*l+E*p;c[9]=z*e+C*i+D*n+E*r;c[10]=z*g+C*
j+D*o+E*s;c[11]=z*f+C*k+D*m+E*a;c[12]=q*d+F*h+G*l+b*p;c[13]=q*e+F*i+G*n+b*r;c[14]=q*g+F*j+G*o+b*s;c[15]=q*f+F*k+G*m+b*a;return c};mat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],b=b[2];c[0]=a[0]*d+a[4]*e+a[8]*b+a[12];c[1]=a[1]*d+a[5]*e+a[9]*b+a[13];c[2]=a[2]*d+a[6]*e+a[10]*b+a[14];return c};
mat4.multiplyVec4=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=b[3];c[0]=a[0]*d+a[4]*e+a[8]*g+a[12]*b;c[1]=a[1]*d+a[5]*e+a[9]*g+a[13]*b;c[2]=a[2]*d+a[6]*e+a[10]*g+a[14]*b;c[3]=a[3]*d+a[7]*e+a[11]*g+a[15]*b;return c};
mat4.translate=function(a,b,c){var d=b[0],e=b[1],b=b[2],g,f,h,i,j,k,l,n,o,m,p,r;if(!c||a===c)return a[12]=a[0]*d+a[4]*e+a[8]*b+a[12],a[13]=a[1]*d+a[5]*e+a[9]*b+a[13],a[14]=a[2]*d+a[6]*e+a[10]*b+a[14],a[15]=a[3]*d+a[7]*e+a[11]*b+a[15],a;g=a[0];f=a[1];h=a[2];i=a[3];j=a[4];k=a[5];l=a[6];n=a[7];o=a[8];m=a[9];p=a[10];r=a[11];c[0]=g;c[1]=f;c[2]=h;c[3]=i;c[4]=j;c[5]=k;c[6]=l;c[7]=n;c[8]=o;c[9]=m;c[10]=p;c[11]=r;c[12]=g*d+j*e+o*b+a[12];c[13]=f*d+k*e+m*b+a[13];c[14]=h*d+l*e+p*b+a[14];c[15]=i*d+n*e+r*b+a[15];
return c};mat4.scale=function(a,b,c){var d=b[0],e=b[1],b=b[2];if(!c||a===c)return a[0]*=d,a[1]*=d,a[2]*=d,a[3]*=d,a[4]*=e,a[5]*=e,a[6]*=e,a[7]*=e,a[8]*=b,a[9]*=b,a[10]*=b,a[11]*=b,a;c[0]=a[0]*d;c[1]=a[1]*d;c[2]=a[2]*d;c[3]=a[3]*d;c[4]=a[4]*e;c[5]=a[5]*e;c[6]=a[6]*e;c[7]=a[7]*e;c[8]=a[8]*b;c[9]=a[9]*b;c[10]=a[10]*b;c[11]=a[11]*b;c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15];return c};
mat4.rotate=function(a,b,c,d){var e=c[0],g=c[1],c=c[2],f=Math.sqrt(e*e+g*g+c*c),h,i,j,k,l,n,o,m,p,r,s,A,B,t,u,v,w,x,y,z;if(!f)return null;f!==1&&(f=1/f,e*=f,g*=f,c*=f);h=Math.sin(b);i=Math.cos(b);j=1-i;b=a[0];f=a[1];k=a[2];l=a[3];n=a[4];o=a[5];m=a[6];p=a[7];r=a[8];s=a[9];A=a[10];B=a[11];t=e*e*j+i;u=g*e*j+c*h;v=c*e*j-g*h;w=e*g*j-c*h;x=g*g*j+i;y=c*g*j+e*h;z=e*c*j+g*h;e=g*c*j-e*h;g=c*c*j+i;d?a!==d&&(d[12]=a[12],d[13]=a[13],d[14]=a[14],d[15]=a[15]):d=a;d[0]=b*t+n*u+r*v;d[1]=f*t+o*u+s*v;d[2]=k*t+m*u+A*
v;d[3]=l*t+p*u+B*v;d[4]=b*w+n*x+r*y;d[5]=f*w+o*x+s*y;d[6]=k*w+m*x+A*y;d[7]=l*w+p*x+B*y;d[8]=b*z+n*e+r*g;d[9]=f*z+o*e+s*g;d[10]=k*z+m*e+A*g;d[11]=l*z+p*e+B*g;return d};mat4.rotateX=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[4],g=a[5],f=a[6],h=a[7],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[0]=a[0],c[1]=a[1],c[2]=a[2],c[3]=a[3],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[4]=e*b+i*d;c[5]=g*b+j*d;c[6]=f*b+k*d;c[7]=h*b+l*d;c[8]=e*-d+i*b;c[9]=g*-d+j*b;c[10]=f*-d+k*b;c[11]=h*-d+l*b;return c};
mat4.rotateY=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[4]=a[4],c[5]=a[5],c[6]=a[6],c[7]=a[7],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*-d;c[1]=g*b+j*-d;c[2]=f*b+k*-d;c[3]=h*b+l*-d;c[8]=e*d+i*b;c[9]=g*d+j*b;c[10]=f*d+k*b;c[11]=h*d+l*b;return c};
mat4.rotateZ=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[4],j=a[5],k=a[6],l=a[7];c?a!==c&&(c[8]=a[8],c[9]=a[9],c[10]=a[10],c[11]=a[11],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*d;c[1]=g*b+j*d;c[2]=f*b+k*d;c[3]=h*b+l*d;c[4]=e*-d+i*b;c[5]=g*-d+j*b;c[6]=f*-d+k*b;c[7]=h*-d+l*b;return c};
mat4.frustum=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=e*2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=e*2/i;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/i;f[10]=-(g+e)/j;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(g*e*2)/j;f[15]=0;return f};mat4.perspective=function(a,b,c,d,e){a=c*Math.tan(a*Math.PI/360);b*=a;return mat4.frustum(-b,b,-a,a,c,d,e)};
mat4.ortho=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=2/i;f[6]=0;f[7]=0;f[8]=0;f[9]=0;f[10]=-2/j;f[11]=0;f[12]=-(a+b)/h;f[13]=-(d+c)/i;f[14]=-(g+e)/j;f[15]=1;return f};
mat4.lookAt=function(a,b,c,d){d||(d=mat4.create());var e,g,f,h,i,j,k,l,n=a[0],o=a[1],a=a[2];g=c[0];f=c[1];e=c[2];c=b[1];j=b[2];if(n===b[0]&&o===c&&a===j)return mat4.identity(d);c=n-b[0];j=o-b[1];k=a-b[2];l=1/Math.sqrt(c*c+j*j+k*k);c*=l;j*=l;k*=l;b=f*k-e*j;e=e*c-g*k;g=g*j-f*c;(l=Math.sqrt(b*b+e*e+g*g))?(l=1/l,b*=l,e*=l,g*=l):g=e=b=0;f=j*g-k*e;h=k*b-c*g;i=c*e-j*b;(l=Math.sqrt(f*f+h*h+i*i))?(l=1/l,f*=l,h*=l,i*=l):i=h=f=0;d[0]=b;d[1]=f;d[2]=c;d[3]=0;d[4]=e;d[5]=h;d[6]=j;d[7]=0;d[8]=g;d[9]=i;d[10]=k;d[11]=
0;d[12]=-(b*n+e*o+g*a);d[13]=-(f*n+h*o+i*a);d[14]=-(c*n+j*o+k*a);d[15]=1;return d};mat4.fromRotationTranslation=function(a,b,c){c||(c=mat4.create());var d=a[0],e=a[1],g=a[2],f=a[3],h=d+d,i=e+e,j=g+g,a=d*h,k=d*i;d*=j;var l=e*i;e*=j;g*=j;h*=f;i*=f;f*=j;c[0]=1-(l+g);c[1]=k+f;c[2]=d-i;c[3]=0;c[4]=k-f;c[5]=1-(a+g);c[6]=e+h;c[7]=0;c[8]=d+i;c[9]=e-h;c[10]=1-(a+l);c[11]=0;c[12]=b[0];c[13]=b[1];c[14]=b[2];c[15]=1;return c};
mat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+", "+a[9]+", "+a[10]+", "+a[11]+", "+a[12]+", "+a[13]+", "+a[14]+", "+a[15]+"]"};quat4.create=function(a){var b=new MatrixArray(4);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3]);return b};quat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];return b};
quat4.calculateW=function(a,b){var c=a[0],d=a[1],e=a[2];if(!b||a===b)return a[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e)),a;b[0]=c;b[1]=d;b[2]=e;b[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e));return b};quat4.inverse=function(a,b){if(!b||a===b)return a[0]*=-1,a[1]*=-1,a[2]*=-1,a;b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];b[3]=a[3];return b};quat4.length=function(a){var b=a[0],c=a[1],d=a[2],a=a[3];return Math.sqrt(b*b+c*c+d*d+a*a)};
quat4.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=Math.sqrt(c*c+d*d+e*e+g*g);if(f===0)return b[0]=0,b[1]=0,b[2]=0,b[3]=0,b;f=1/f;b[0]=c*f;b[1]=d*f;b[2]=e*f;b[3]=g*f;return b};quat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],a=a[3],f=b[0],h=b[1],i=b[2],b=b[3];c[0]=d*b+a*f+e*i-g*h;c[1]=e*b+a*h+g*f-d*i;c[2]=g*b+a*i+d*h-e*f;c[3]=a*b-d*f-e*h-g*i;return c};
quat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=a[0],f=a[1],h=a[2],a=a[3],i=a*d+f*g-h*e,j=a*e+h*d-b*g,k=a*g+b*e-f*d,d=-b*d-f*e-h*g;c[0]=i*a+d*-b+j*-h-k*-f;c[1]=j*a+d*-f+k*-b-i*-h;c[2]=k*a+d*-h+i*-f-j*-b;return c};quat4.toMat3=function(a,b){b||(b=mat3.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=k-g;b[4]=1-(j+e);b[5]=d+f;b[6]=c+h;b[7]=d-f;b[8]=1-(j+l);return b};
quat4.toMat4=function(a,b){b||(b=mat4.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=0;b[4]=k-g;b[5]=1-(j+e);b[6]=d+f;b[7]=0;b[8]=c+h;b[9]=d-f;b[10]=1-(j+l);b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
quat4.slerp=function(a,b,c,d){d||(d=a);var e=a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3],g,f;if(Math.abs(e)>=1)return d!==a&&(d[0]=a[0],d[1]=a[1],d[2]=a[2],d[3]=a[3]),d;g=Math.acos(e);f=Math.sqrt(1-e*e);if(Math.abs(f)<0.001)return d[0]=a[0]*0.5+b[0]*0.5,d[1]=a[1]*0.5+b[1]*0.5,d[2]=a[2]*0.5+b[2]*0.5,d[3]=a[3]*0.5+b[3]*0.5,d;e=Math.sin((1-c)*g)/f;c=Math.sin(c*g)/f;d[0]=a[0]*e+b[0]*c;d[1]=a[1]*e+b[1]*c;d[2]=a[2]*e+b[2]*c;d[3]=a[3]*e+b[3]*c;return d};
quat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+"]"};
(function()
{
	var MAX_VERTICES = 8000;						// equates to 2500 objects being drawn
	var MAX_INDICES = (MAX_VERTICES / 2) * 3;		// 6 indices for every 4 vertices
	var MAX_POINTS = 8000;
	var MULTI_BUFFERS = 2;							// cycle 2 buffers for quads to try and avoid blocking
	var BATCH_NULL = 0;
	var BATCH_QUAD = 1;
	var BATCH_SETTEXTURE = 2;
	var BATCH_SETOPACITY = 3;
	var BATCH_SETBLEND = 4;
	var BATCH_UPDATEMODELVIEW = 5;
	var BATCH_RENDERTOTEXTURE = 6;
	var BATCH_CLEAR = 7;
	var BATCH_POINTS = 8;
	cr.GLWrap = function (gl, isMobile)
	{
		this.gl = gl;
		var i, len;
		this.width = 0;		// not yet known, wait for call to setSize()
		this.height = 0;
		this.cam = vec3.create([0, 0, 100]);			// camera position
		this.look = vec3.create([0, 0, 0]);				// lookat position
		this.up = vec3.create([0, 1, 0]);				// up vector
		this.worldScale = vec3.create([1, 1, 1]);		// world scaling factor
		this.lastOpacity = 1;
		this.lastTexture = null;
		gl.clearColor(0, 0, 0, 0);
		gl.clear(gl.COLOR_BUFFER_BIT);
		gl.enable(gl.BLEND);
		gl.disable(gl.CULL_FACE);
        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
		gl.disable(gl.DEPTH_TEST);
		this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
		this.lastSrcBlend = gl.ONE;
		this.lastDestBlend = gl.ONE_MINUS_SRC_ALPHA;
		this.pointBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
		this.vertexBuffers = new Array(MULTI_BUFFERS);
		this.texcoordBuffers = new Array(MULTI_BUFFERS);
		for (i = 0; i < MULTI_BUFFERS; i++)
		{
			this.vertexBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[i]);
			this.texcoordBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[i]);
		}
		this.curBuffer = 0;
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
		this.vertexData = new Float32Array(MAX_VERTICES * 2);
		this.texcoordData = new Float32Array(MAX_VERTICES * 2);
		this.pointData = new Float32Array(MAX_POINTS * 4);
		var indexData = new Uint16Array(MAX_INDICES);
		i = 0, len = MAX_INDICES;
		var fv = 0;
		while (i < len)
		{
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 1;	// top right
			indexData[i++] = fv + 2;	// bottom right (first tri)
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 2;	// bottom right
			indexData[i++] = fv + 3;	// bottom left
			fv += 4;
		}
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexData, gl.STATIC_DRAW);
		this.vertexPtr = 0;
		this.pointPtr = 0;
		this.matP = mat4.create();		// perspective matrix
		this.matMV = mat4.create();		// model view matrix
		this.lastMV = mat4.create();
		var fsSource, vsSource;
		/*
		fsSource = [
			"#ifdef GL_ES",
			"precision {{precision}} float;",
			"#endif",
			"uniform sampler2D sampler;",
			"varying float opacity;",
			"void main(void) {",
			"	gl_FragColor = texture2D(sampler, gl_PointCoord);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		fsSource = fsSource.replace("{{precision}}", isMobile ? "mediump" : "highp");
		vsSource = [
			"attribute vec4 aPos;",
			"varying float opacity;",
			"uniform mat4 matP;",
			"uniform mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	gl_PointSize = aPos.z;",
			"	opacity = aPos.w;",
			"}"
		].join("\n");
		this.fragmentShaderPoint = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(this.fragmentShaderPoint, fsSource);
		gl.compileShader(this.fragmentShaderPoint);
;
		this.vertexShaderPoint = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(this.vertexShaderPoint, vsSource);
		gl.compileShader(this.vertexShaderPoint);
;
		this.shaderProgramPoint = gl.createProgram();
		gl.attachShader(this.shaderProgramPoint, this.fragmentShaderPoint);
		gl.attachShader(this.shaderProgramPoint, this.vertexShaderPoint);
		gl.linkProgram(this.shaderProgramPoint);
		gl.useProgram(this.shaderProgramPoint);
;
		this.locAPosPoint = gl.getAttribLocation(this.shaderProgramPoint, "aPos");
		this.locMatPPoint = gl.getUniformLocation(this.shaderProgramPoint, "matP");
		this.locMatMVPoint = gl.getUniformLocation(this.shaderProgramPoint, "matMV");
		this.locSamplerPoint = gl.getUniformLocation(this.shaderProgramPoint, "sampler");
		*/
		fsSource = [
			"#ifdef GL_ES",
			"precision {{precision}} float;",
			"#endif",
			"varying vec2 vTex;",
			"uniform float opacity;",
			"uniform sampler2D sampler;",
			"void main(void) {",
			"	gl_FragColor = texture2D(sampler, vTex);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		fsSource = fsSource.replace("{{precision}}", isMobile ? "mediump" : "highp");
		vsSource = [
			"attribute vec2 aPos;",
			"attribute vec2 aTex;",
			"varying vec2 vTex;",
			"uniform mat4 matP;",
			"uniform mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	vTex = aTex;",
			"}"
		].join("\n");
		this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(this.fragmentShader, fsSource);
		gl.compileShader(this.fragmentShader);
;
		this.vertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(this.vertexShader, vsSource);
		gl.compileShader(this.vertexShader);
;
		this.shaderProgram = gl.createProgram();
		gl.attachShader(this.shaderProgram, this.fragmentShader);
		gl.attachShader(this.shaderProgram, this.vertexShader);
		gl.linkProgram(this.shaderProgram);
;
		gl.useProgram(this.shaderProgram);
		this.locAPos = gl.getAttribLocation(this.shaderProgram, "aPos");
		gl.enableVertexAttribArray(this.locAPos);
		this.locATex = gl.getAttribLocation(this.shaderProgram, "aTex");
		gl.enableVertexAttribArray(this.locATex);
		this.locMatP = gl.getUniformLocation(this.shaderProgram, "matP");
		this.locMatMV = gl.getUniformLocation(this.shaderProgram, "matMV");
		this.locOpacity = gl.getUniformLocation(this.shaderProgram, "opacity");
		this.locSampler = gl.getUniformLocation(this.shaderProgram, "sampler");
		gl.uniform1f(this.locOpacity, 1);
		gl.uniform1i(this.locSampler, 0);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.batch = [];
		this.batchPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.isQuadProgram = true;
		this.fbo = gl.createFramebuffer();
		this.renderToTex = null;
		this.tmpVec3 = vec3.create([0, 0, 0]);
;
;
		var pointsizes = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
		this.minPointSize = pointsizes[0];
		this.maxPointSize = pointsizes[1];
;
		cr.seal(this);
	};
	var GLWrapProto = cr.GLWrap.prototype;
	GLWrapProto.switchQuadProgram = function ()
	{
		if (this.isQuadProgram)
			return;
		var gl = this.gl;
		this.gl.useProgram(this.shaderProgram);
		this.isQuadProgram = true;
		gl.enableVertexAttribArray(this.locAPos);
		gl.enableVertexAttribArray(this.locATex);
	};
	GLWrapProto.switchPointProgram = function ()
	{
		if (!this.isQuadProgram)
			return;
		var gl = this.gl;
		this.gl.useProgram(this.shaderProgramPoint);
		this.isQuadProgram = false;
		gl.enableVertexAttribArray(this.locAPosPoint);
		gl.disableVertexAttribArray(this.locATex);
	};
	GLWrapProto.project = function (x, y, out)
	{
		var viewport = [0, 0, this.width, this.height];
		var mv = this.matMV;
		var proj = this.matP;
		var fTempo = [0, 0, 0, 0, 0, 0, 0, 0];
		fTempo[0] = mv[0]*x+mv[4]*y+mv[12];
		fTempo[1] = mv[1]*x+mv[5]*y+mv[13];
		fTempo[2] = mv[2]*x+mv[6]*y+mv[14];
		fTempo[3] = mv[3]*x+mv[7]*y+mv[15];
		fTempo[4] = proj[0]*fTempo[0]+proj[4]*fTempo[1]+proj[8]*fTempo[2]+proj[12]*fTempo[3];
		fTempo[5] = proj[1]*fTempo[0]+proj[5]*fTempo[1]+proj[9]*fTempo[2]+proj[13]*fTempo[3];
		fTempo[6] = proj[2]*fTempo[0]+proj[6]*fTempo[1]+proj[10]*fTempo[2]+proj[14]*fTempo[3];
		fTempo[7] = -fTempo[2];
		if(fTempo[7]===0.0)	//The w value
			return;
		fTempo[7]=1.0/fTempo[7];
		fTempo[4]*=fTempo[7];
		fTempo[5]*=fTempo[7];
		fTempo[6]*=fTempo[7];
		out[0]=(fTempo[4]*0.5+0.5)*viewport[2]+viewport[0];
		out[1]=(fTempo[5]*0.5+0.5)*viewport[3]+viewport[1];
	};
	GLWrapProto.setSize = function(w, h)
	{
		if (this.width === w && this.height === h)
			return;
		this.width = w;
		this.height = h;
		this.gl.viewport(0, 0, w, h);
		mat4.perspective(45, w / h, 1, 1000, this.matP);
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		var tl = [0, 0];
		var br = [0, 0];
		this.project(0, 0, tl);
		this.project(1, 1, br);
		this.worldScale[0] = 1 / (br[0] - tl[0]);
		this.worldScale[1] = -1 / (br[1] - tl[1]);
		this.gl.uniformMatrix4fv(this.locMatP, false, this.matP);
		this.lastTexture = null;
	};
	GLWrapProto.resetModelView = function ()
	{
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		mat4.scale(this.matMV, this.worldScale);
	};
	GLWrapProto.translate = function (x, y)
	{
		if (x === 0 && y === 0)
			return;
		this.tmpVec3[0] = x;// * this.worldScale[0];
		this.tmpVec3[1] = y;// * this.worldScale[1];
		this.tmpVec3[2] = 0;
		mat4.translate(this.matMV, this.tmpVec3);
	};
	GLWrapProto.scale = function (x, y)
	{
		if (x === 1 && y === 1)
			return;
		this.tmpVec3[0] = x;
		this.tmpVec3[1] = y;
		this.tmpVec3[2] = 1;
		mat4.scale(this.matMV, this.tmpVec3);
	};
	GLWrapProto.rotateZ = function (a)
	{
		if (a === 0)
			return;
		mat4.rotateZ(this.matMV, a);
	};
	GLWrapProto.updateModelView = function()
	{
		var anydiff = false;
		for (var i = 0; i < 16; i++)
		{
			if (this.lastMV[i] !== this.matMV[i])
			{
				anydiff = true;
				break;
			}
		}
		if (!anydiff)
			return;
		var b = this.pushBatch();
		b.type = BATCH_UPDATEMODELVIEW;
		if (b.mat4param)
			mat4.set(this.matMV, b.mat4param);
		else
			b.mat4param = mat4.create(this.matMV);
		mat4.set(this.matMV, this.lastMV);
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	cr.GLBatchJob = function (type_, glwrap_)
	{
		this.type = type_;
		this.glwrap = glwrap_;
		this.gl = glwrap_.gl;
		this.opacityParam = 0;		// for setOpacity()
		this.startIndex = 0;		// for quad()
		this.indexCount = 0;		// "
		this.texParam = null;		// for setTexture()
		this.mat4param = null;		// for updateModelView()
		cr.seal(this);
	};
	var GLBatchJobProto = cr.GLBatchJob.prototype;
	GLBatchJobProto.doSetTexture = function ()
	{
		this.gl.bindTexture(this.gl.TEXTURE_2D, this.texParam);
	};
	GLBatchJobProto.doSetOpacity = function ()
	{
		this.gl.uniform1f(this.glwrap.locOpacity, this.opacityParam);
	};
	GLBatchJobProto.doQuad = function ()
	{
		this.gl.drawElements(this.gl.TRIANGLES, this.indexCount, this.gl.UNSIGNED_SHORT, this.startIndex * 2);
	};
	GLBatchJobProto.doSetBlend = function ()
	{
		this.gl.blendFunc(this.startIndex, this.indexCount);
	};
	GLBatchJobProto.doUpdateModelView = function ()
	{
		this.gl.uniformMatrix4fv(this.glwrap.locMatMV, false, this.mat4param);
	};
	GLBatchJobProto.doRenderToTexture = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		if (this.texParam)
		{
			gl.bindFramebuffer(gl.FRAMEBUFFER, glwrap.fbo);
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texParam, 0);
;
		}
		else
		{
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
			gl.bindFramebuffer(gl.FRAMEBUFFER, null);
		}
	};
	GLBatchJobProto.doClear = function ()
	{
		this.gl.clearColor(this.mat4param[0], this.mat4param[1], this.mat4param[2], this.mat4param[3]);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	};
	GLBatchJobProto.doPoints = function ()
	{
		/*
		var gl = this.gl;
		var glwrap = this.glwrap;
		glwrap.switchPointProgram();
		gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.pointBuffer);
		gl.vertexAttribPointer(glwrap.locAPosPoint, 4, gl.FLOAT, false, 0, 0);
		gl.drawArrays(gl.POINTS, this.startIndex, this.indexCount);
		glwrap.switchQuadProgram();
		gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.vertexBuffers[glwrap.curBuffer]);
		gl.vertexAttribPointer(glwrap.locAPos, 2, gl.FLOAT, false, 0, 0);
		gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.texcoordBuffers[glwrap.curBuffer]);
		gl.vertexAttribPointer(glwrap.locATex, 2, gl.FLOAT, false, 0, 0);
		*/
	};
	GLWrapProto.pushBatch = function ()
	{
		if (this.batchPtr === this.batch.length)
			this.batch.push(new cr.GLBatchJob(BATCH_NULL, this));
		return this.batch[this.batchPtr++];
	};
	GLWrapProto.endBatch = function ()
	{
		if (this.batchPtr === 0)
			return;
		var gl = this.gl;
		/*
		if (this.pointPtr > 0)
		{
			this.switchPointProgram();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
			gl.vertexAttribPointer(this.locAPosPoint, 4, gl.FLOAT, false, 0, 0);
			gl.bufferData(gl.ARRAY_BUFFER, this.pointData.subarray(0, this.pointPtr), gl.STREAM_DRAW);
			this.switchQuadProgram();
		}
		*/
		if (this.vertexPtr > 0)
		{
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[this.curBuffer]);
			gl.vertexAttribPointer(this.locAPos, 2, gl.FLOAT, false, 0, 0);
			gl.bufferData(gl.ARRAY_BUFFER, this.vertexData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[this.curBuffer]);
			gl.vertexAttribPointer(this.locATex, 2, gl.FLOAT, false, 0, 0);
			gl.bufferData(gl.ARRAY_BUFFER, this.texcoordData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
		}
		var i, len, b;
		for (i = 0, len = this.batchPtr; i < len; i++)
		{
			b = this.batch[i];
			switch (b.type) {
			case BATCH_QUAD:
				b.doQuad();
				break;
			case BATCH_SETTEXTURE:
				b.doSetTexture();
				break;
			case BATCH_SETOPACITY:
				b.doSetOpacity();
				break;
			case BATCH_SETBLEND:
				b.doSetBlend();
				break;
			case BATCH_UPDATEMODELVIEW:
				b.doUpdateModelView();
				break;
			case BATCH_RENDERTOTEXTURE:
				b.doRenderToTexture();
				break;
			case BATCH_CLEAR:
				b.doClear();
				break;
			case BATCH_POINTS:
				b.doPoints();
				break;
			}
		}
		this.batchPtr = 0;
		this.vertexPtr = 0;
		this.pointPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.curBuffer++;
		if (this.curBuffer >= MULTI_BUFFERS)
			this.curBuffer = 0;
	};
	GLWrapProto.setOpacity = function (op)
	{
		if (op === this.lastOpacity)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETOPACITY;
		b.opacityParam = op;
		this.lastOpacity = op;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrapProto.setTexture = function (tex)
	{
		if (tex === this.lastTexture)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETTEXTURE;
		b.texParam = tex;
		this.lastTexture = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrapProto.setBlend = function (s, d)
	{
		if (s === this.lastSrcBlend && d === this.lastDestBlend)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETBLEND;
		b.startIndex = s;		// recycle params to save memory
		b.indexCount = d;
		this.lastSrcBlend = s;
		this.lastDestBlend = d;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrapProto.setAlphaBlend = function ()
	{
		this.setBlend(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);
	};
	var LAST_VERTEX = MAX_VERTICES * 2 - 8;
	GLWrapProto.quad = function(tlx, tly, trx, try_, brx, bry, blx, bly)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = 0;
		vd[v] = tly;
		td[v++] = 0;
		vd[v] = trx;
		td[v++] = 1;
		vd[v] = try_;
		td[v++] = 0;
		vd[v] = brx;
		td[v++] = 1;
		vd[v] = bry;
		td[v++] = 1;
		vd[v] = blx;
		td[v++] = 0;
		vd[v] = bly;
		td[v++] = 1;
		this.vertexPtr = v;
	};
	GLWrapProto.quadTex = function(tlx, tly, trx, try_, brx, bry, blx, bly, rcTex)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = rcTex.left;
		vd[v] = tly;
		td[v++] = rcTex.top;
		vd[v] = trx;
		td[v++] = rcTex.right;
		vd[v] = try_;
		td[v++] = rcTex.top;
		vd[v] = brx;
		td[v++] = rcTex.right;
		vd[v] = bry;
		td[v++] = rcTex.bottom;
		vd[v] = blx;
		td[v++] = rcTex.left;
		vd[v] = bly;
		td[v++] = rcTex.bottom;
		this.vertexPtr = v;
	};
	var LAST_POINT = MAX_POINTS - 4;
	/*
	GLWrapProto.point = function(x_, y_, size_, opacity_)
	{
		if (this.pointPtr >= LAST_POINT)
			this.endBatch();
		var p = this.pointPtr;			// point cursor
		var pd = this.pointData;		// point data array
		if (this.hasPointBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount++;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_POINTS;
			b.startIndex = p;
			b.indexCount = 1;
			this.hasPointBatchTop = true;
			this.hasQuadBatchTop = false;
		}
		pd[p++] = x_;
		pd[p++] = y_;
		pd[p++] = size_;
		pd[p++] = opacity_;
		this.pointPtr = p;
	};
	*/
	GLWrapProto.clear = function (r, g, b_, a)
	{
		var b = this.pushBatch();
		b.type = BATCH_CLEAR;
		if (!b.mat4param)
			b.mat4param = mat4.create();
		b.mat4param[0] = r;
		b.mat4param[1] = g;
		b.mat4param[2] = b_;
		b.mat4param[3] = a;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrapProto.present = function ()
	{
		this.endBatch();
		this.gl.flush();
	};
	function nextHighestPowerOfTwo(x) {
		--x;
		for (var i = 1; i < 32; i <<= 1) {
			x = x | x >> i;
		}
		return x + 1;
	}
	GLWrapProto.loadTexture = function (img, tiling, linearsampling)
	{
		this.endBatch();
		var gl = this.gl;
		var isPOT = (cr.isPOT(img.width) && cr.isPOT(img.height));
		var webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], true);
		if (!isPOT && tiling)
		{
			var canvas = document.createElement("canvas");
			canvas.width = nextHighestPowerOfTwo(img.width);
			canvas.height = nextHighestPowerOfTwo(img.height);
			var ctx = canvas.getContext("2d");
			ctx.drawImage(img,
						  0, 0, img.width, img.height,
						  0, 0, canvas.width, canvas.height);
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);
		}
		else
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, tiling ? gl.REPEAT : gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, tiling ? gl.REPEAT : gl.CLAMP_TO_EDGE);
		if (linearsampling)
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			if (isPOT)
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
				gl.generateMipmap(gl.TEXTURE_2D);
			}
			else
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		}
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture = null;
		webGL_texture.c2width = img.width;
		webGL_texture.c2height = img.height;
		return webGL_texture;
	};
	GLWrapProto.createEmptyTexture = function (w, h, linearsampling)
	{
		this.endBatch();
		var gl = this.gl;
		var webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(w * h * 4));
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture = null;
		webGL_texture.c2width = w;
		webGL_texture.c2height = h;
		return webGL_texture;
	};
	GLWrapProto.videoToTexture = function (video_, texture_)
	{
		this.endBatch();
		var gl = this.gl;
		gl.bindTexture(gl.TEXTURE_2D, texture_);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video_);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture = null;
	};
	GLWrapProto.deleteTexture = function (tex)
	{
		this.endBatch();
		this.gl.bindTexture(this.gl.TEXTURE_2D, null);
		this.lastTexture = null;
		this.gl.deleteTexture(tex);
	};
	GLWrapProto.setRenderingToTexture = function (tex)
	{
		if (tex === this.renderToTex)
			return;
		var b = this.pushBatch();
		b.type = BATCH_RENDERTOTEXTURE;
		b.texParam = tex;
		this.renderToTex = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
}());
;
(function()
{
	cr.createRuntime = function (canvasid)
	{
		return new cr.runtime(document.getElementById(canvasid));
	};
	cr.createDCRuntime = function (w, h)
	{
		return new cr.runtime({ "dc": true, "width": w, "height": h });
	};
	cr["createCJSRuntime"] = function ()
	{
		window["c2cocoonjs"] = true;
		var canvas = document.createElement("canvas");
		document.body.appendChild(canvas);
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
		var rt = new cr.runtime(canvas);
		window["c2runtime"] = rt;
		window.addEventListener("orientationchange", function () {
			window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		});
		return rt;
	};
	cr.runtime = function (canvas)
	{
		if (!canvas || (!canvas.getContext && !canvas["dc"]))
			return;
		if (canvas["c2runtime"])
			return;		// already created, don't double-create
		else
			canvas["c2runtime"] = this;
		this.isPhoneGap = (typeof window["device"] !== "undefined" && (typeof window["device"]["cordova"] !== "undefined" || typeof window["device"]["phonegap"] !== "undefined"));
		this.isDirectCanvas = !!canvas["dc"];
		this.isAppMobi = (typeof window["AppMobi"] !== "undefined" || this.isDirectCanvas);
		this.isCocoonJs = !!window["c2cocoonjs"];
		this.isDomFree = this.isDirectCanvas || this.isCocoonJs;
		this.isAndroid = /android/i.test(navigator.userAgent);
		this.isIE = /msie/i.test(navigator.userAgent);
		this.isiPhone = /iphone/i.test(navigator.userAgent);
		this.isiPad = /ipad/i.test(navigator.userAgent);
		this.isiOS = this.isiPhone || this.isiPad;
		this.isMobile = (this.isPhoneGap || this.isAppMobi || this.isAndroid);
		if (!this.isMobile)
			this.isMobile = /(iphone|ipod|ipad|blackberry|palm|symbian|nokia|windows\s+ce|windows\s+phone|iemobile)/i.test(navigator.userAgent);
		if (!this.isMobile)
			this.isMobile = !(/(windows|linux|os\s+[x9]|solaris|bsd)/i.test(navigator.userAgent));
		this.canvas = canvas;
		this.canvasdiv = document.getElementById("c2canvasdiv");
		this.gl = null;
		this.glwrap = null;
		this.ctx = null;
		this.canvas.oncontextmenu = function (e) { return false; };
		this.canvas.onselectstart = function (e) { return false; };
		if (this.isDirectCanvas)
			window["c2runtime"] = this;
		this.width = canvas.width;
		this.height = canvas.height;
		this.redraw = true;
		this.isSuspended = false;
		if (!Date.now) {
		  Date.now = function now() {
			return +new Date();
		  };
		}
		this.plugins = [];
		this.types = {};
		this.types_by_index = [];
		this.behaviors = [];
		this.layouts = {};
		this.layouts_by_index = [];
		this.eventsheets = {};
		this.eventsheets_by_index = [];
		this.wait_for_textures = [];        // for blocking until textures loaded
		this.triggers_to_postinit = [];
		this.all_global_vars = [];
		this.deathRow = new cr.ObjectSet();
		this.dt = 0;
        this.dt1 = 0;
		this.logictime = 0;			// used to calculate CPUUtilisation
		this.cpuutilisation = 0;
		this.zeroDtCount = 0;
        this.timescale = 1.0;
        this.kahanTime = new cr.KahanAdder();
		this.last_tick_time = 0;
		this.measuring_dt = true;
		this.fps = 0;
		this.last_fps_time = 0;
		this.tickcount = 0;
		this.execcount = 0;
		this.framecount = 0;        // for fps
		this.objectcount = 0;
		this.changelayout = null;
		this.destroycallbacks = [];
		this.event_stack = [];
		this.event_stack_index = -1;
		this.pushEventStack(null);
		this.loop_stack = [];
		this.loop_stack_index = -1;
		this.next_uid = 0;
		this.layout_first_tick = true;
		this.family_count = 0;
		this.suspend_events = [];
		this.raf_id = 0;
		this.timeout_id = 0;
		this.isloading = true;
		this.loadingprogress = 0;
        this.objects_to_tick = new cr.ObjectSet();
		this.registered_collisions = [];
		this.temp_poly = new cr.CollisionPoly([]);
		this.allGroups = [];				// array of all event groups
        this.activeGroups = {};				// event group activation states
		this.running_layout = null;			// currently running layout
		this.layer_canvas = null;			// for layers "render-to-texture"
		this.layer_ctx = null;
		this.layer_tex = null;
		this.fullscreen_scaling = 0;
		this.files_subfolder = "";			// path with project files
		this.loaderlogo = null;
		this.snapshotCanvas = null;
		this.snapshotData = "";
		this.load();
		var attribs;
		try {
			if (this.enableWebGL && !this.isMobile && !this.isDomFree)
			{
				attribs = { "depth": false, "antialias": !this.isMobile };
				var use_webgl = true;
				if (/chrome/i.test(navigator.userAgent) && /windows/i.test(navigator.userAgent))
				{
					var tempcanvas = document.createElement("canvas");
					var tempgl = (tempcanvas.getContext("webgl", attribs) || tempcanvas.getContext("experimental-webgl", attribs));
					if (tempgl.getSupportedExtensions().toString() === "OES_texture_float,OES_standard_derivatives,WEBKIT_WEBGL_lose_context")
					{
;
						use_webgl = false;
					}
				}
				if (use_webgl)
					this.gl = (canvas.getContext("webgl", attribs) || canvas.getContext("experimental-webgl", attribs));
			}
		}
		catch (e) {
		}
		if (this.gl)
		{
;
			this.overlay_canvas = document.createElement("canvas");
			jQuery(this.overlay_canvas).appendTo(this.canvas.parentNode);
			this.overlay_canvas.oncontextmenu = function (e) { return false; };
			this.overlay_canvas.onselectstart = function (e) { return false; };
			this.overlay_canvas.width = canvas.width;
			this.overlay_canvas.height = canvas.height;
			this.positionOverlayCanvas();
			this.overlay_ctx = this.overlay_canvas.getContext("2d");
			this.glwrap = new cr.GLWrap(this.gl, this.isMobile);
			this.glwrap.setSize(canvas.width, canvas.height);
			this.ctx = null;
			this.canvas.addEventListener("webglcontextlost", function (ev) {
				window["cr_setSuspended"](true);		// stop rendering
			}, false);
			this.canvas.addEventListener("webglcontextrestored", function (ev) {
				location.reload(false);					// huh, just reload the page... shouldn't be happening often
			}, false);
		}
		else
		{
			if (this.fullscreen_mode > 0 && this.isDirectCanvas)
			{
;
				this.canvas = null;
				document.oncontextmenu = function (e) { return false; };
				document.onselectstart = function (e) { return false; };
				this.ctx = AppMobi["canvas"]["getContext"]("2d");
				try {
					this.ctx["samplingMode"] = this.linearSampling ? "smooth" : "sharp";
					this.ctx["globalScale"] = 1;
					this.ctx["HTML5CompatibilityMode"] = true;
				} catch(e){}
				if (this.width !== 0 && this.height !== 0)
				{
					this.ctx.width = this.width;
					this.ctx.height = this.height;
				}
			}
			if (!this.ctx)
			{
;
				if (this.isCocoonJs)
				{
					attribs = { "antialias" : !!this.linearSampling };
					this.ctx = canvas.getContext("2d", attribs);
				}
				else
					this.ctx = canvas.getContext("2d");
				this.ctx["webkitImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["mozImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["msImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["imageSmoothingEnabled"] = this.linearSampling;
			}
			this.overlay_canvas = null;
			this.overlay_ctx = null;
		}
		this.tickFunc = (function (self) { return function () { self.tick(); }; })(this);
		this.go();			// run loading screen
		this.extra = {};
		cr.seal(this);
	};
	var runtimeProto = cr.runtime.prototype;
	var webkitRepaintFlag = false;
	runtimeProto["setSize"] = function (w, h)
	{
		var offx = 0, offy = 0;
		var neww = 0, newh = 0, intscale = 0;
		var mode = this.fullscreen_mode;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"]);
		if (isfullscreen && this.fullscreen_scaling > 0)
			mode = this.fullscreen_scaling;
		if (mode >= 3)
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = w / h;
			if (cur_aspect > orig_aspect)
			{
				neww = h * orig_aspect;
				if (mode === 4)	// integer scaling
				{
					intscale = neww / this.original_width;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offx = (w - neww) / 2;
					w = neww;
				}
			}
			else
			{
				newh = w / orig_aspect;
				if (mode === 4)	// integer scaling
				{
					intscale = newh / this.original_height;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offy = (h - newh) / 2;
					h = newh;
				}
			}
			if (isfullscreen)
			{
				offx = 0;
				offy = 0;
			}
			offx = Math.floor(offx);
			offy = Math.floor(offy);
			w = Math.floor(w);
			h = Math.floor(h);
		}
		var isiOSRetina = (!this.isDomFree && this.useiOSRetina && this.isiOS);
		var multiplier = (isiOSRetina ? (window["devicePixelRatio"] || 1) : 1);
		this.width = w * multiplier;
		this.height = h * multiplier;
		this.redraw = true;
		if (this.canvasdiv && !this.isDomFree)
		{
			jQuery(this.canvasdiv).css({"width": w + "px",
										"height": h + "px",
										"margin-left": offx,
										"margin-top": offy});
		}
		if (this.canvas)
		{
			this.canvas.width = w * multiplier;
			this.canvas.height = h * multiplier;
			if (isiOSRetina)
			{
				jQuery(this.canvas).css({"width": w + "px",
										"height": h + "px"});
			}
		}
		if (this.overlay_canvas)
		{
			this.overlay_canvas.width = w;
			this.overlay_canvas.height = h;
		}
		if (this.glwrap)
			this.glwrap.setSize(w, h);
		if (this.isDirectCanvas)
		{
			this.ctx.width = w;
			this.ctx.height = h;
		}
		if (!this.isDomFree && this.canvas && /webkit/i.test(navigator.userAgent))
		{
			var this_ = this;
			window.setTimeout(function () {
				if (webkitRepaintFlag)
					return;
				webkitRepaintFlag = true;
				var n = document.createTextNode(".");
				this_.canvas.parentElement.insertBefore(n, this_.canvas);
				window.setTimeout(function () {
					this_.canvas.parentElement.removeChild(n);
					webkitRepaintFlag = false;
				}, 33);
			}, 33);
		}
	};
	runtimeProto.positionOverlayCanvas = function()
	{
		var overlay_position = jQuery(this.canvas).offset();
		overlay_position.position = "absolute";
		jQuery(this.overlay_canvas).css(overlay_position);
	};
	var caf = window["cancelAnimationFrame"] ||
	  window["mozCancelAnimationFrame"]    ||
	  window["webkitCancelAnimationFrame"] ||
	  window["msCancelAnimationFrame"]     ||
	  window["oCancelAnimationFrame"];
	function performance_now()
	{
		if (typeof window["performance"] !== "undefined")
		{
			var winperf = window["performance"];
			if (typeof winperf.now !== "undefined")
				return winperf.now();
			else if (typeof winperf["webkitNow"] !== "undefined")
				return winperf["webkitNow"]();
			else if (typeof winperf["msNow"] !== "undefined")
				return winperf["msNow"]();
		}
		return Date.now();
	};
	runtimeProto["setSuspended"] = function (s)
	{
		var i, len;
		if (s && !this.isSuspended)
		{
			this.isSuspended = true;			// next tick will be last
			if (this.raf_id !== 0)
				caf(this.raf_id);
			if (this.timeout_id !== 0)
				clearTimeout(this.timeout_id);
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](true);
		}
		else if (!s && this.isSuspended)
		{
			this.isSuspended = false;
			this.last_tick_time = performance_now();	// ensure first tick is a zero-dt one
			this.last_fps_time = performance_now();		// reset FPS counter
			this.framecount = 0;
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](false);
			this.tick();						// kick off runtime again
		}
	};
	runtimeProto.addSuspendCallback = function (f)
	{
		this.suspend_events.push(f);
	};
	runtimeProto.load = function ()
	{
;
		var pm = cr.getProjectModel();
		this.name = pm[0];
		this.first_layout = pm[1];
		this.fullscreen_mode = pm[11];	// 0 = off, 1 = crop, 2 = scale, 3 = letterbox scale, 4 = integer letterbox scale
		this.uses_loader_layout = pm[17];
		this.loaderstyle = pm[18];
		if (this.loaderstyle === 0)
		{
			this.loaderlogo = new Image();
			this.loaderlogo.src = "logo.png";
		}
		this.system = new cr.system_object(this);
		var i, len, j, lenj, k, lenk, idstr, m, b, t, f;
		var plugin, plugin_ctor;
		for (i = 0, len = pm[2].length; i < len; i++)
		{
			m = pm[2][i];
;
			cr.add_common_aces(m);
			plugin = new m[0](this);
			plugin.singleglobal = m[1];
			plugin.is_world = m[2];
			if (plugin.onCreate)
				plugin.onCreate();  // opportunity to override default ACEs
			cr.seal(plugin);
			this.plugins.push(plugin);
		}
		pm = cr.getProjectModel();
		for (i = 0, len = pm[3].length; i < len; i++)
		{
			m = pm[3][i];
			plugin_ctor = m[1];
;
			plugin = null;
			for (j = 0, lenj = this.plugins.length; j < lenj; j++)
			{
				if (this.plugins[j] instanceof plugin_ctor)
				{
					plugin = this.plugins[j];
					break;
				}
			}
;
;
			var type_inst = new plugin.Type(plugin);
;
			type_inst.name = m[0];
			type_inst.is_family = m[2];
			type_inst.vars_count = m[3];
			type_inst.behs_count = m[4];
			if (type_inst.is_family)
			{
				type_inst.members = [];				// types in this family
				type_inst.family_index = this.family_count++;
				type_inst.families = null;
			}
			else
			{
				type_inst.members = null;
				type_inst.family_index = -1;
				type_inst.families = [];			// families this type belongs to
			}
			type_inst.family_var_map = null;
			type_inst.family_beh_map = null;
			if (m[5])
			{
				type_inst.texture_file = m[5][0];
				type_inst.texture_filesize = m[5][1];
			}
			else
			{
				type_inst.texture_file = null;
				type_inst.texture_filesize = 0;
			}
			if (m[6])
			{
				type_inst.animations = m[6];
			}
			else
			{
				type_inst.animations = null;
			}
			type_inst.index = i;                                // save index in to types array in type
			type_inst.instances = [];                           // all instances of this type
			type_inst.deadCache = [];							// destroyed instances to recycle next create
			type_inst.solstack = [new cr.selection(type_inst)]; // initialise SOL stack with one empty SOL
			type_inst.cur_sol = 0;
			type_inst.default_instance = null;
			type_inst.stale_iids = true;
			type_inst.updateIIDs = cr.type_updateIIDs;
			type_inst.getFirstPicked = cr.type_getFirstPicked;
			type_inst.getPairedInstance = cr.type_getPairedInstance;
			type_inst.getCurrentSol = cr.type_getCurrentSol;
			type_inst.pushCleanSol = cr.type_pushCleanSol;
			type_inst.pushCopySol = cr.type_pushCopySol;
			type_inst.popSol = cr.type_popSol;
			type_inst.getBehaviorByName = cr.type_getBehaviorByName;
			type_inst.getBehaviorIndexByName = cr.type_getBehaviorIndexByName;
			type_inst.extra = {};
			type_inst.toString = function () { return this.name; };
			type_inst.behaviors = [];
			for (j = 0, lenj = m[7].length; j < lenj; j++)
			{
				b = m[7][j];
				var behavior_ctor = b[1];
				var behavior_plugin = null;
				for (k = 0, lenk = this.behaviors.length; k < lenk; k++)
				{
					if (this.behaviors[k] instanceof behavior_ctor)
					{
						behavior_plugin = this.behaviors[k];
						break;
					}
				}
				if (!behavior_plugin)
				{
					behavior_plugin = new behavior_ctor(this);
					behavior_plugin.my_instances = new cr.ObjectSet(); 	// instances of this behavior
					if (behavior_plugin.onCreate)
						behavior_plugin.onCreate();
					cr.seal(behavior_plugin);
					this.behaviors.push(behavior_plugin);
				}
				var behavior_type = new behavior_plugin.Type(behavior_plugin, type_inst);
				behavior_type.name = b[0];
				behavior_type.onCreate();
				cr.seal(behavior_type);
				type_inst.behaviors.push(behavior_type);
			}
			type_inst.global = m[8];
			type_inst.isOnLoaderLayout = m[9];
			if (!this.uses_loader_layout || type_inst.is_family || type_inst.isOnLoaderLayout || !plugin.is_world)
			{
				type_inst.onCreate();
				cr.seal(type_inst);
			}
			if (type_inst.name)
				this.types[type_inst.name] = type_inst;
			this.types_by_index.push(type_inst);
			if (plugin.singleglobal)
			{
				var instance = new plugin.Instance(type_inst);
				instance.uid = this.next_uid;
				this.next_uid++;
				instance.iid = 0;
				instance.get_iid = cr.inst_get_iid;
				instance.toString = cr.inst_toString;
				instance.properties = m[10];
				instance.onCreate();
				cr.seal(instance);
				type_inst.instances.push(instance);
			}
		}
		for (i = 0, len = pm[4].length; i < len; i++)
		{
			var familydata = pm[4][i];
			var familytype = this.types_by_index[familydata[0]];
			var familymember;
			for (j = 1, lenj = familydata.length; j < lenj; j++)
			{
				familymember = this.types_by_index[familydata[j]];
				familymember.families.push(familytype);
				familytype.members.push(familymember);
			}
		}
		if (this.family_count > 0)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (t.is_family || !t.families.length)
					continue;
				t.family_var_map = new Array(this.family_count);
				t.family_beh_map = new Array(this.family_count);
				var varsum = 0;
				var behsum = 0;
				for (j = 0, lenj = t.families.length; j < lenj; j++)
				{
					f = t.families[j];
					t.family_var_map[f.family_index] = varsum;
					varsum += f.vars_count;
					t.family_beh_map[f.family_index] = behsum;
					behsum += f.behs_count;
				}
			}
		}
		for (i = 0, len = pm[5].length; i < len; i++)
		{
			m = pm[5][i];
			var layout = new cr.layout(this, m);
			cr.seal(layout);
			this.layouts[layout.name] = layout;
			this.layouts_by_index.push(layout);
		}
		for (i = 0, len = pm[6].length; i < len; i++)
		{
			m = pm[6][i];
			var sheet = new cr.eventsheet(this, m);
			cr.seal(sheet);
			this.eventsheets[sheet.name] = sheet;
			this.eventsheets_by_index.push(sheet);
		}
		for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
			this.eventsheets_by_index[i].postInit();
		for (i = 0, len = this.triggers_to_postinit.length; i < len; i++)
			this.triggers_to_postinit[i].postInit();
		delete this.triggers_to_postinit;
		this.files_subfolder = pm[7];
		this.pixel_rounding = pm[8];
		this.original_width = pm[9];
		this.original_height = pm[10];
		this.aspect_scale = 1.0;
		this.enableWebGL = pm[12];
		this.linearSampling = pm[13];
		this.clearBackground = pm[14];
		this.versionstr = pm[15];
		this.useiOSRetina = pm[16];
		this.start_time = Date.now();
	};
	runtimeProto.findWaitingTexture = function (src)
	{
		var i, len;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			if (this.wait_for_textures[i].src === src)
				return this.wait_for_textures[i];
		}
		return null;
	};
	runtimeProto.areAllTexturesLoaded = function ()
	{
		var totalsize = 0;
		var completedsize = 0;
		var ret = true;
		var i, len;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			var filesize = this.wait_for_textures[i].cr_filesize;
			if (!filesize || filesize <= 0)
				filesize = 50000;
			totalsize += filesize;
			if (this.wait_for_textures[i].complete || this.wait_for_textures[i]["loaded"])
				completedsize += filesize;
			else
				ret = false;    // not all textures loaded
		}
		if (totalsize == 0)
			this.progress = 0;
		else
			this.progress = (completedsize / totalsize);
		return ret;
	};
	runtimeProto.go = function ()
	{
		if (!this.ctx && !this.glwrap)
			return;
		var ctx = this.ctx || this.overlay_ctx;
		this.progress = 0;
		this.last_progress = -1;
		if (this.areAllTexturesLoaded())
			this.go_textures_done();
		else
		{
			var ms_elapsed = Date.now() - this.start_time;
			if (this.loaderstyle !== 3 && ms_elapsed >= 500 && this.last_progress != this.progress)
			{
				ctx.clearRect(0, 0, this.width, this.height);
				var mx = this.width / 2;
				var my = this.height / 2;
				var haslogo = (this.loaderstyle === 0 && this.loaderlogo.complete);
				var hlw = 40;
				var hlh = 0;
				var logowidth = 80;
				if (haslogo)
				{
					logowidth = this.loaderlogo.width;
					hlw = logowidth / 2;
					hlh = this.loaderlogo.height / 2;
					ctx.drawImage(this.loaderlogo, cr.floor(mx - hlw), cr.floor(my - hlh));
				}
				if (this.loaderstyle <= 1)
				{
					my += hlh + (haslogo ? 12 : 0);
					mx -= hlw;
					mx = cr.floor(mx) + 0.5;
					my = cr.floor(my) + 0.5;
					ctx.fillStyle = "DodgerBlue";
					ctx.fillRect(mx, my, Math.floor(logowidth * this.progress), 6);
					ctx.strokeStyle = "black";
					ctx.strokeRect(mx, my, logowidth, 6);
					ctx.strokeStyle = "white";
					ctx.strokeRect(mx - 1, my - 1, logowidth + 2, 8);
				}
				else if (this.loaderstyle === 2)
				{
					ctx.font = "12pt Arial";
					ctx.fillStyle = "#999";
					ctx.textBaseLine = "middle";
					var percent_text = Math.round(this.progress * 100) + "%";
					var text_dim = ctx.measureText ? ctx.measureText(percent_text) : null;
					var text_width = text_dim ? text_dim.width : 0;
					ctx.fillText(percent_text, mx - (text_width / 2), my);
				}
				this.last_progress = this.progress;
			}
			setTimeout((function (self) { return function () { self.go(); }; })(this), 100);
		}
	};
	runtimeProto.go_textures_done = function ()
	{
		this.start_time = Date.now();
		this.last_fps_time = performance_now();       // for counting framerate
		var i, len, t;
		if (this.uses_loader_layout)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (!t.is_family && !t.isOnLoaderLayout && t.plugin.is_world)
				{
					t.onCreate();
					cr.seal(t);
				}
			}
		}
		else
			this.isloading = false;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			this.layouts_by_index[i].createGlobalNonWorlds();
		}
		if (this.first_layout)
			this.layouts[this.first_layout].startRunning();
		else
			this.layouts_by_index[0].startRunning();
;
		if (!this.uses_loader_layout)
		{
			this.loadingprogress = 1;
			this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
		}
		this.tick();
		if (this.isDirectCanvas)
			AppMobi["webview"]["execute"]("onGameReady();");
	};
	var raf = window["requestAnimationFrame"] ||
	  window["mozRequestAnimationFrame"]    ||
	  window["webkitRequestAnimationFrame"] ||
	  window["msRequestAnimationFrame"]     ||
	  window["oRequestAnimationFrame"];
	runtimeProto.tick = function ()
	{
;
		var logic_start = performance_now();
		if (this.overlay_canvas)
			this.positionOverlayCanvas();
		if (this.isloading)
		{
			var done = this.areAllTexturesLoaded();		// updates this.progress
			this.loadingprogress = this.progress;
			if (done)
			{
				this.isloading = false;
				this.progress = 1;
				this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
			}
		}
		this.logic();
		if (this.redraw && !document.hidden)
		{
			if (this.glwrap)
				this.drawGL();
			else
				this.draw();
			this.redraw = false;
			if (this.snapshotCanvas)
			{
				if (this.canvas && this.canvas.toDataURL)
				{
					this.snapshotData = this.canvas.toDataURL(this.snapshotCanvas[0], this.snapshotCanvas[1]);
					this.trigger(cr.system_object.prototype.cnds.OnCanvasSnapshot, null);
				}
				this.snapshotCanvas = null;
			}
		}
		this.tickcount++;
		this.execcount++;
		this.framecount++;
		this.logictime += performance_now() - logic_start;
		if (this.isSuspended)
			return;
		if (raf)
			this.raf_id = raf(this.tickFunc, this.canvas);
		else
		{
			this.timeout_id = setTimeout(this.tickFunc, this.isMobile ? 1 : 16);
		}
	};
	runtimeProto.logic = function ()
	{
		var i, leni, j, lenj, k, lenk, type, binst;
		var cur_time = performance_now();
		if (cur_time - this.last_fps_time >= 1000)  // every 1 second
		{
			this.last_fps_time += 1000;
			this.fps = this.framecount;
			this.framecount = 0;
			this.cpuutilisation = this.logictime;
			this.logictime = 0;
		}
		if (this.measuring_dt)
		{
			if (this.last_tick_time !== 0)
			{
				var ms_diff = cur_time - this.last_tick_time;
				if (ms_diff === 0)
				{
					this.zeroDtCount++;
					if (this.zeroDtCout >= 10)
						this.measuring_dt = false;
					this.dt1 = 1.0 / 60.0;            // 60fps assumed (0.01666...)
				}
				else
				{
					this.dt1 = ms_diff / 1000.0; // dt measured in seconds
					if (this.dt1 > 0.5)
						this.dt1 = 0;
					else if (this.dt1 > 0.1)
						this.dt1 = 0.1;
				}
			}
			this.last_tick_time = cur_time;
		}
        this.dt = this.dt1 * this.timescale;
        this.kahanTime.add(this.dt);
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"]);
		if (this.fullscreen_mode >= 2 /* scale */ || (isfullscreen && this.fullscreen_scaling > 0))
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			if (cur_aspect > orig_aspect)
				this.aspect_scale = this.height / this.original_height;
			else
			{
				this.aspect_scale = this.width / this.original_width;
			}
			if (this.running_layout)
			{
				this.running_layout.scrollToX(this.running_layout.scrollX);
				this.running_layout.scrollToY(this.running_layout.scrollY);
			}
		}
		else
			this.aspect_scale = 1;
		this.ClearDeathRow();
		this.system.runWaits();
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (!type.behaviors.length)
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				var inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					inst.behavior_insts[k].tick();
				}
			}
		}
        var tickarr = this.objects_to_tick.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick();
		i = 0;
		while (this.changelayout && i++ < 10)
		{
;
			this.running_layout.stopRunning();
			this.changelayout.startRunning();		// sets this.changelayout to null just before 'on start of layout'
			for (i = 0, leni = this.types_by_index.length; i < leni; i++)
			{
				type = this.types_by_index[i];
				if (!type.global && !type.plugin.singleglobal)
					continue;
				for (j = 0, lenj = type.instances.length; j < lenj; j++)
				{
					var inst = type.instances[j];
					if (inst.onLayoutChange)
						inst.onLayoutChange();
				}
			}
			this.redraw = true;
			this.layout_first_tick = true;
			this.ClearDeathRow();
		}
        for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
            this.eventsheets_by_index[i].hasRun = false;
		if (this.running_layout.event_sheet)
			this.running_layout.event_sheet.run();
		this.registered_collisions.length = 0;
		this.layout_first_tick = false;
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (!type.behaviors.length)
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				var inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.tick2)
						binst.tick2();
				}
			}
		}
	};
    runtimeProto.tickMe = function (inst)
    {
        this.objects_to_tick.add(inst);
    };
	runtimeProto.untickMe = function (inst)
	{
		this.objects_to_tick.remove(inst);
	};
    runtimeProto.getDt = function (inst)
    {
        if (!inst || inst.my_timescale === -1.0)
            return this.dt;
        return this.dt1 * inst.my_timescale;
    };
	runtimeProto.draw = function ()
	{
		this.running_layout.draw(this.ctx);
		if (this.isDirectCanvas)
			this.ctx["present"]();
	};
	runtimeProto.drawGL = function ()
	{
		this.overlay_ctx.clearRect(0, 0, this.width, this.height);
		this.running_layout.drawGL(this.glwrap);
	};
	runtimeProto.addDestroyCallback = function (f)
	{
		if (f)
			this.destroycallbacks.push(f);
	};
	runtimeProto.removeDestroyCallback = function (f)
	{
		cr.arrayFindRemove(this.destroycallbacks, f);
	};
	runtimeProto.DestroyInstance = function (inst)
	{
		if (!this.deathRow.contains(inst))
		{
			this.deathRow.add(inst);
			this.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnDestroyed, inst);
		}
	};
	runtimeProto.ClearDeathRow = function ()
	{
		var inst, index, type, instances, binst;
		var i, j, k, leni, lenj, lenk;
		var w, f;
		var arr = this.deathRow.valuesRef();	// get array of items from set
		for (i = 0, leni = arr.length; i < leni; i++)
		{
			inst = arr[i];
			type = inst.type;
			instances = type.instances;
			for (j = 0, lenj = this.destroycallbacks.length; j < lenj; j++)
				this.destroycallbacks[j](inst);
			cr.arrayFindRemove(instances, inst);
			if (inst.layer)
			{
				cr.arrayRemove(inst.layer.instances, inst.get_zindex());
				inst.layer.zindices_stale = true;
			}
			for (j = 0, lenj = type.families.length; j < lenj; j++)
				cr.arrayFindRemove(type.families[j].instances, inst);
			if (inst.behavior_insts)
			{
				for (j = 0, lenj = inst.behavior_insts.length; j < lenj; j++)
				{
					binst = inst.behavior_insts[j];
					if (binst.onDestroy)
						binst.onDestroy();
					binst.behavior.my_instances.remove(inst);
				}
			}
            this.objects_to_tick.remove(inst);
			for (j = 0, lenj = this.system.waits.length; j < lenj; j++)
			{
				w = this.system.waits[j];
				if (w.sols.hasOwnProperty(type.index))
					cr.arrayFindRemove(w.sols[type.index], inst);
				if (!type.is_family)
				{
					for (k = 0, lenk = type.families.length; k < lenk; k++)
					{
						f = type.families[k];
						if (w.sols.hasOwnProperty(f.index))
							cr.arrayFindRemove(w.sols[f.index], inst);
					}
				}
			}
			if (inst.onDestroy)
				inst.onDestroy();
			this.objectcount--;
			if (type.deadCache.length < 32)
				type.deadCache.push(inst);
			type.stale_iids = true;
		}
		if (!this.deathRow.isEmpty())
			this.redraw = true;
		this.deathRow.clear();
	};
	runtimeProto.createInstance = function (type, layer, sx, sy)
	{
		if (type.is_family)
		{
			var i = cr.floor(Math.random() * type.members.length);
			return this.createInstance(type.members[i], layer, sx, sy);
		}
		return this.createInstanceFromInit(type.default_instance, layer, false, sx, sy);
	};
	var all_behaviors = [];
	runtimeProto.createInstanceFromInit = function (initial_inst, layer, is_startup_instance, sx, sy)
	{
		var i, len, j, lenj, p;
;
		var type = this.types_by_index[initial_inst[1]];
;
;
		var is_world = type.plugin.is_world;
;
		if (this.isloading && is_world && !type.isOnLoaderLayout)
			return null;
		if (!is_world)
			layer = null;
		var inst;
		var recycled_inst = false;
		if (type.deadCache.length)
		{
			inst = type.deadCache.pop();
			recycled_inst = true;
			type.plugin.Instance.call(inst, type);
		}
		else
			inst = new type.plugin.Instance(type);
		inst.uid = this.next_uid;
		this.next_uid++;
		inst.iid = 0;
		inst.get_iid = cr.inst_get_iid;
		type.stale_iids = true;
		var initial_vars = initial_inst[2];
		if (recycled_inst)
		{
			for (i = 0, len = initial_vars.length; i < len; i++)
				inst.instance_vars[i] = initial_vars[i];
			cr.wipe(inst.extra);
		}
		else
		{
			inst.instance_vars = initial_vars.slice(0);
			inst.extra = {};
		}
		if (is_world)
		{
			var wm = initial_inst[0];
;
			inst.x = cr.is_undefined(sx) ? wm[0] : sx;
			inst.y = cr.is_undefined(sy) ? wm[1] : sy;
			inst.z = wm[2];
			inst.width = wm[3];
			inst.height = wm[4];
			inst.depth = wm[5];
			inst.angle = wm[6];
			inst.opacity = wm[7];
			inst.hotspotX = wm[8];
			inst.hotspotY = wm[9];
			if (recycled_inst)
			{
				inst.bbox.set(0, 0, 0, 0);
				inst.bquad.set_from_rect(inst.bbox);
				inst.bbox_changed_callbacks.length = 0;
			}
			else
			{
				inst.bbox = new cr.rect(0, 0, 0, 0);
				inst.bquad = new cr.quad();
				inst.bbox_changed_callbacks = [];
				inst.set_bbox_changed = cr.set_bbox_changed;
				inst.add_bbox_changed_callback = cr.add_bbox_changed_callback;
				inst.contains_pt = cr.inst_contains_pt;
				inst.update_bbox = cr.update_bbox;
				inst.get_zindex = cr.inst_get_zindex;
			}
			inst.bbox_changed = true;
			inst.visible = true;
            inst.my_timescale = -1.0;
			inst.layer = layer;
			inst.zindex = layer.instances.length;	// will be placed at top of current layer
			this.redraw = true;
		}
		inst.toString = cr.inst_toString;
		var initial_props, binst;
		all_behaviors.length = 0;
		for (i = 0, len = type.families.length; i < len; i++)
		{
			all_behaviors.push.apply(all_behaviors, type.families[i].behaviors);
		}
		all_behaviors.push.apply(all_behaviors, type.behaviors);
		if (recycled_inst)
		{
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				binst = inst.behavior_insts[i];
				btype.behavior.Instance.call(binst, btype, inst);
				initial_props = initial_inst[3][i];
				for (j = 0, lenj = initial_props.length; j < lenj; j++)
					binst.properties[j] = initial_props[j];
				binst.onCreate();
				btype.behavior.my_instances.add(inst);
			}
		}
		else
		{
			inst.behavior_insts = [];
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				var binst = new btype.behavior.Instance(btype, inst);
				binst.properties = initial_inst[3][i].slice(0);
				binst.onCreate();
				cr.seal(binst);
				inst.behavior_insts.push(binst);
				btype.behavior.my_instances.add(inst);
			}
		}
		initial_props = initial_inst[4];
		if (recycled_inst)
		{
			for (i = 0, len = initial_props.length; i < len; i++)
				inst.properties[i] = initial_props[i];
		}
		else
			inst.properties = initial_props.slice(0);
		type.instances.push(inst);
		if (layer)
		{
;
			layer.instances.push(inst);
		}
		for (i = 0, len = type.families.length; i < len; i++)
			type.families[i].instances.push(inst);
		this.objectcount++;
		inst.onCreate();
		if (!recycled_inst)
			cr.seal(inst);
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].postCreate)
				inst.behavior_insts[i].postCreate();
		}
		return inst;
	};
	runtimeProto.getLayerByName = function (layer_name)
	{
		var i, len;
		for (i = 0, len = this.running_layout.layers.length; i < len; i++)
		{
			var layer = this.running_layout.layers[i];
			if (layer.name.toLowerCase() === layer_name.toLowerCase())
				return layer;
		}
		return null;
	};
	runtimeProto.getLayerByNumber = function (index)
	{
		index = cr.floor(index);
		if (index < 0)
			index = 0;
		if (index >= this.running_layout.layers.length)
			index = this.running_layout.layers.length - 1;
		return this.running_layout.layers[index];
	};
	runtimeProto.getLayer = function (l)
	{
		if (cr.is_number(l))
			return this.getLayerByNumber(l);
		else
			return this.getLayerByName(l.toString());
	};
	cr.layout = function (runtime, m)
	{
		this.runtime = runtime;
		this.event_sheet = null;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		this.scale = 1.0;
		this.angle = 0;
		this.name = m[0];
		this.width = m[1];
		this.height = m[2];
		this.unbounded_scrolling = m[3];
		this.sheetname = m[4];
		var lm = m[5];
		var i, len;
		this.layers = [];
		for (i = 0, len = lm.length; i < len; i++)
		{
			var layer = new cr.layer(this, lm[i]);
			layer.number = i;
			cr.seal(layer);
			this.layers.push(layer);
		}
		var im = m[6];
		this.initial_nonworld = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
				type.default_instance = inst;
			this.initial_nonworld.push(inst);
		}
	};
	var layoutProto = cr.layout.prototype;
	layoutProto.hasOpaqueBottomLayer = function ()
	{
		var layer = this.layers[0];
		return !layer.transparent && layer.opacity === 1.0 && !layer.forceOwnTexture && layer.visible;
	};
	layoutProto.startRunning = function ()
	{
		if (this.sheetname)
		{
			this.event_sheet = this.runtime.eventsheets[this.sheetname];
;
		}
		this.runtime.running_layout = this;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		var i, k, len, lenk, type_instances, inst;
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			type_instances = this.runtime.types_by_index[i].instances;
			for (k = 0, lenk = type_instances.length; k < lenk; k++)
			{
				inst = type_instances[k];
				if (inst.layer)
				{
					var num = inst.layer.number;
					if (num >= this.layers.length)
						num = this.layers.length - 1;
					inst.layer = this.layers[num];
					inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
				}
			}
		}
		var layer;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			layer.createInitialInstances();
			layer.disableAngle = true;
			var px = layer.canvasToLayer(0, 0, true);
			var py = layer.canvasToLayer(0, 0, false);
			layer.disableAngle = false;
			if (this.runtime.pixel_rounding)
			{
				px = (px + 0.5) | 0;
				py = (py + 0.5) | 0;
			}
			layer.rotateViewport(px, py, null);
		}
		for (i = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			inst = this.runtime.createInstanceFromInit(this.initial_nonworld[i], null, true);
;
		}
		this.runtime.changelayout = null;
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutStart, null);
	};
	layoutProto.createGlobalNonWorlds = function ()
	{
		var i, k, len, initial_inst, inst, type;
		for (i = 0, k = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			initial_inst = this.initial_nonworld[i];
			type = this.runtime.types_by_index[initial_inst[1]];
			if (type.global)
				inst = this.runtime.createInstanceFromInit(initial_inst, null, true);
			else
			{
				this.initial_nonworld[k] = initial_inst;
				k++;
			}
		}
		this.initial_nonworld.length = k;
	};
	layoutProto.stopRunning = function ()
	{
;
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutEnd, null);
		this.runtime.system.waits.length = 0;
		var i, leni, j, lenj;
		var layer_instances, inst, type;
		for (i = 0, leni = this.layers.length; i < leni; i++)
		{
			layer_instances = this.layers[i].instances;
			for (j = 0, lenj = layer_instances.length; j < lenj; j++)
			{
				inst = layer_instances[j];
				if (!inst.type.global)
					this.runtime.DestroyInstance(inst);
			}
			this.runtime.ClearDeathRow();
			layer_instances.length = 0;
			this.layers[i].zindices_stale = true;
		}
		for (i = 0, leni = this.runtime.types_by_index.length; i < leni; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.global || type.plugin.is_world || type.plugin.singleglobal)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
				this.runtime.DestroyInstance(type.instances[j]);
			this.runtime.ClearDeathRow();
		}
	};
	layoutProto.draw = function (ctx)
	{
		ctx.globalAlpha = 1;
		ctx.globalCompositeOperation = "source-over";
		if (this.runtime.clearBackground && !this.hasOpaqueBottomLayer())
			ctx.clearRect(0, 0, this.runtime.width, this.runtime.height);
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].visible && this.layers[i].opacity > 0)
				this.layers[i].draw(ctx);
		}
	};
	layoutProto.drawGL = function (glw)
	{
		if (this.runtime.clearBackground && !this.hasOpaqueBottomLayer())
			glw.clear(0, 0, 0, 0);
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].visible && this.layers[i].opacity > 0)
				this.layers[i].drawGL(glw);
		}
		glw.present();
	};
	layoutProto.getMinLayerScale = function ()
	{
		var m = this.layers[0].getScale();
		var i, len, l;
		for (i = 1, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.parallaxX === 0 && l.parallaxY === 0)
				continue;
			if (l.getScale() < m)
				m = l.getScale();
		}
		return m;
	};
	layoutProto.scrollToX = function (x)
	{
		if (!this.unbounded_scrolling)
		{
			var widthBoundary = (this.runtime.width * (1 / this.getMinLayerScale()) / 2);
			if (x > this.width - widthBoundary)
				x = this.width - widthBoundary;
			if (x < widthBoundary)
				x = widthBoundary;
		}
		if (this.scrollX !== x)
		{
			this.scrollX = x;
			this.runtime.redraw = true;
		}
	};
	layoutProto.scrollToY = function (y)
	{
		if (!this.unbounded_scrolling)
		{
			var heightBoundary = (this.runtime.height * (1 / this.getMinLayerScale()) / 2);
			if (y > this.height - heightBoundary)
				y = this.height - heightBoundary;
			if (y < heightBoundary)
				y = heightBoundary;
		}
		if (this.scrollY !== y)
		{
			this.scrollY = y;
			this.runtime.redraw = true;
		}
	};
	cr.layer = function (layout, m)
	{
		this.layout = layout;
		this.runtime = layout.runtime;
		this.instances = [];        // running instances
		this.scale = 1.0;
		this.angle = 0;
		this.disableAngle = false;
		this.tmprect = new cr.rect(0, 0, 0, 0);
		this.tmpquad = new cr.quad();
		this.viewLeft = 0;
		this.viewRight = 0;
		this.viewTop = 0;
		this.viewBottom = 0;
		this.zindices_stale = false;
		this.name = m[0];
		this.index = m[1];
		this.visible = m[2];		// initially visible
		this.background_color = m[3];
		this.transparent = m[4];
		this.parallaxX = m[5];
		this.parallaxY = m[6];
		this.opacity = m[7];
		this.forceOwnTexture = m[8];
		this.zoomRate = m[9];
		var im = m[10];
		var i, len;
		this.initial_instances = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
				type.default_instance = inst;
			this.initial_instances.push(inst);
		}
	};
	var layerProto = cr.layer.prototype;
	layerProto.createInitialInstances = function ()
	{
		var i, k, len, inst;
		for (i = 0, k = 0, len = this.initial_instances.length; i < len; i++)
		{
			inst = this.runtime.createInstanceFromInit(this.initial_instances[i], this, true);
			if (!inst.type.global)
			{
				this.initial_instances[k] = this.initial_instances[i];
				k++;
			}
		}
		this.initial_instances.length = k;
	};
	layerProto.updateZIndices = function ()
	{
		if (!this.zindices_stale)
			return;
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
;
;
			this.instances[i].zindex = i;
		}
		this.zindices_stale = false;
	};
	layerProto.getScale = function ()
	{
		return ((this.scale * this.layout.scale * this.runtime.aspect_scale) - 1) * this.zoomRate + 1;
	};
	layerProto.getAngle = function ()
	{
		if (this.disableAngle)
			return 0;
		return cr.clamp_angle(this.layout.angle + this.angle);
	};
	layerProto.draw = function (ctx)
	{
		var render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0);
		var layer_canvas = this.runtime.canvas;
		var layer_ctx = ctx;
		ctx.globalAlpha = 1;
		ctx.globalCompositeOperation = "source-over";
		if (render_offscreen)
		{
			if (!this.runtime.layer_canvas)
			{
				this.runtime.layer_canvas = document.createElement("canvas");
;
				layer_canvas = this.runtime.layer_canvas;
				layer_canvas.width = this.runtime.width;
				layer_canvas.height = this.runtime.height;
				this.runtime.layer_ctx = layer_canvas.getContext("2d");
;
			}
			layer_canvas = this.runtime.layer_canvas;
			layer_ctx = this.runtime.layer_ctx;
			if (layer_canvas.width !== this.runtime.width)
				layer_canvas.width = this.runtime.width;
			if (layer_canvas.height !== this.runtime.height)
				layer_canvas.height = this.runtime.height;
			if (this.transparent)
				layer_ctx.clearRect(0, 0, this.runtime.width, this.runtime.height);
		}
		if (!this.transparent)
		{
			layer_ctx.fillStyle = "rgb(" + this.background_color[0] + "," + this.background_color[1] + "," + this.background_color[2] + ")";
			layer_ctx.fillRect(0, 0, this.runtime.width, this.runtime.height);
		}
		layer_ctx.save();
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true);
		var py = this.canvasToLayer(0, 0, false);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, layer_ctx);
		var myscale = this.getScale();
		layer_ctx.scale(myscale, myscale);
		layer_ctx.translate(-px, -py);
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			inst.draw(layer_ctx);
		}
		layer_ctx.restore();
		if (render_offscreen)
		{
			ctx.globalCompositeOperation = "source-over";
			ctx.globalAlpha = this.opacity;
			ctx.drawImage(layer_canvas, 0, 0);
		}
	};
	layerProto.rotateViewport = function (px, py, ctx)
	{
		var myscale = this.getScale();
		this.viewLeft = px;
		this.viewTop = py;
		this.viewRight = px + (this.runtime.width * (1 / myscale));
		this.viewBottom = py + (this.runtime.height * (1 / myscale));
		var myAngle = this.getAngle();
		if (myAngle !== 0)
		{
			if (ctx)
			{
				ctx.translate(this.runtime.width / 2, this.runtime.height / 2);
				ctx.rotate(-myAngle);
				ctx.translate(this.runtime.width / -2, this.runtime.height / -2);
			}
			this.tmprect.set(this.viewLeft, this.viewTop, this.viewRight, this.viewBottom);
			this.tmprect.offset((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
			this.tmpquad.set_from_rotated_rect(this.tmprect, myAngle);
			this.tmpquad.bounding_box(this.tmprect);
			this.tmprect.offset((this.viewLeft + this.viewRight) / 2, (this.viewTop + this.viewBottom) / 2);
			this.viewLeft = this.tmprect.left;
			this.viewTop = this.tmprect.top;
			this.viewRight = this.tmprect.right;
			this.viewBottom = this.tmprect.bottom;
		}
	}
	layerProto.drawGL = function (glw)
	{
		var overlay_ctx = this.runtime.overlay_ctx;
		var render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0);
		if (render_offscreen)
		{
			if (!this.runtime.layer_tex)
			{
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.width, this.runtime.height, this.linearSampling);
			}
			if (this.runtime.layer_tex.c2width !== this.runtime.width || this.runtime.layer_tex.c2height !== this.runtime.height)
			{
				glw.deleteTexture(this.runtime.layer_tex);
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.width, this.runtime.height, this.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layer_tex);
			if (this.transparent)
				glw.clear(0, 0, 0, 0);
		}
		if (!this.transparent)
		{
			glw.clear(this.background_color[0] / 255, this.background_color[1] / 255, this.background_color[2] / 255, 1);
		}
		overlay_ctx.save();
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true);
		var py = this.canvasToLayer(0, 0, false);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, overlay_ctx);
		var myscale = this.getScale();
		overlay_ctx.scale(myscale, myscale);
		overlay_ctx.translate(-px, -py);
		glw.resetModelView();
		glw.scale(myscale, myscale);
		glw.rotateZ(-this.getAngle());
		glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
		glw.updateModelView();
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			inst.drawGL(glw);
		}
		overlay_ctx.restore();
		if (render_offscreen)
		{
			glw.setRenderingToTexture(null);
			glw.setOpacity(this.opacity);
			glw.setTexture(this.runtime.layer_tex);
			glw.setAlphaBlend();
			glw.resetModelView();
			glw.updateModelView();
			var halfw = this.runtime.width / 2;
			var halfh = this.runtime.height / 2;
			glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
			glw.setTexture(null);
		}
	};
	layerProto.canvasToLayer = function (ptx, pty, getx)
	{
		var isiOSRetina = (!this.runtime.isDomFree && this.runtime.useiOSRetina && this.runtime.isiOS);
		var multiplier = (isiOSRetina ? (window["devicePixelRatio"] || 1) : 1);
		if (isiOSRetina)
		{
			ptx *= multiplier;
			pty *= multiplier;
		}
		var ox = (this.runtime.original_width / 2);
		var oy = (this.runtime.original_height / 2);
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale();
		x -= (this.runtime.width * invScale) / 2;
		y -= (this.runtime.height * invScale) / 2;
		x += ptx * invScale;
		y += pty * invScale;
		var a = this.getAngle();
		if (a !== 0)
		{
			x -= this.layout.scrollX;
			y -= this.layout.scrollY;
			var cosa = Math.cos(a);
			var sina = Math.sin(a);
			var x_temp = (x * cosa) - (y * sina);
			y = (y * cosa) + (x * sina);
			x = x_temp;
			x += this.layout.scrollX;
			y += this.layout.scrollY;
		}
		return getx ? x : y;
	};
	layerProto.layerToCanvas = function (ptx, pty, getx)
	{
		var ox = (this.runtime.original_width / 2);
		var oy = (this.runtime.original_height / 2);
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale();
		x -= (this.runtime.width * invScale) / 2;
		y -= (this.runtime.height * invScale) / 2;
		x = (ptx - x) / invScale;
		y = (pty - y) / invScale;
		var a = this.getAngle();
		if (a !== 0)
		{
			x -= ox;
			y -= oy;
			var cosa = Math.cos(-a);
			var sina = Math.sin(-a);
			var x_temp = (x * cosa) - (y * sina);
			y = (y * cosa) + (x * sina);
			x = x_temp;
			x += ox;
			y += oy;
		}
		var isiOSRetina = (!this.runtime.isDomFree && this.runtime.useiOSRetina && this.runtime.isiOS);
		var multiplier = (isiOSRetina ? (window["devicePixelRatio"] || 1) : 1);
		if (isiOSRetina)
		{
			x /= multiplier;
			y /= multiplier;
		}
		return getx ? x : y;
	};
}());
window["cr_getC2Runtime"] = function()
{
	var canvas = document.getElementById("c2canvas");
	if (canvas)
		return canvas["c2runtime"];
	else if (window["c2runtime"])
		return window["c2runtime"];
}
window["cr_sizeCanvas"] = function(w, h)
{
	if (w === 0 || h === 0)
		return;
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSize"](w, h);
}
window["cr_setSuspended"] = function(s)
{
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSuspended"](s);
}
;
(function()
{
	cr.eventsheet = function (runtime, m)
	{
		this.runtime = runtime;
		this.triggers = {};
        this.hasRun = false;
        this.includes = new cr.ObjectSet(); // all event sheets included by this sheet, at first-level indirection only
		this.name = m[0];
		var em = m[1];		// events model
		this.events = [];       // triggers won't make it to this array
		var i, len;
		for (i = 0, len = em.length; i < len; i++)
			this.init_event(em[i], null, this.events);
	};
	var eventSheetProto = cr.eventsheet.prototype;
    eventSheetProto.toString = function ()
    {
        return this.name;
    };
	eventSheetProto.init_event = function (m, parent, nontriggers)
	{
		switch (m[0]) {
		case 0:	// event block
		{
			var block = new cr.eventblock(this, parent, m);
			cr.seal(block);
			if (block.orblock)
			{
				nontriggers.push(block);
				var i, len;
				for (i = 0, len = block.conditions.length; i < len; i++)
				{
					if (block.conditions[i].trigger)
						this.init_trigger(block, i);
				}
			}
			else
			{
				if (block.is_trigger())
					this.init_trigger(block, 0);
				else
					nontriggers.push(block);
			}
			break;
		}
		case 1: // variable
		{
			var v = new cr.eventvariable(this, parent, m);
			cr.seal(v);
			nontriggers.push(v);
			break;
		}
        case 2:	// include
        {
            var inc = new cr.eventinclude(this, parent, m);
			cr.seal(inc);
            nontriggers.push(inc);
			break;
        }
		default:
;
		}
	};
	eventSheetProto.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			this.events[i].postInit(i < len - 1 && this.events[i + 1].is_else_block);
		}
	};
	eventSheetProto.run = function ()
	{
        this.hasRun = true;
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			var ev = this.events[i];
			ev.run();
			this.runtime.clearSol(ev.solModifiers);
			if (!this.runtime.deathRow.isEmpty())
				this.runtime.ClearDeathRow();
		}
	};
	cr.selection = function (type)
	{
		this.type = type;
		this.instances = [];        // subset of picked instances
		this.else_instances = [];	// subset of unpicked instances
		this.select_all = true;
	};
	var solProto = cr.selection.prototype;
	solProto.hasObjects = function ()
	{
		if (this.select_all)
			return this.type.instances.length;
		else
			return this.instances.length;
	};
	solProto.getObjects = function ()
	{
		if (this.select_all)
			return this.type.instances;
		else
			return this.instances;
	};
	solProto.ensure_picked = function (inst)
	{
		var orblock = inst.runtime.getCurrentEventStack().current_event.orblock;
		if (this.select_all)
		{
			this.select_all = false;
			if (orblock)
			{
				this.else_instances = inst.type.instances.slice(0);
				cr.arrayFindRemove(this.else_instances, inst);
			}
			this.instances.length = 1;
			this.instances[0] = inst;
		}
		else
		{
			if (orblock)
			{
				var i = this.else_instances.indexOf(inst);
				if (i !== -1)
				{
					this.instances.push(this.else_instances[i]);
					this.else_instances.splice(i, 1);
				}
			}
			else
			{
				if (this.instances.indexOf(inst) === -1)
					this.instances.push(inst);
			}
		}
	};
	solProto.pick_one = function (inst)
	{
		if (!inst)
			return;
		if (inst.runtime.getCurrentEventStack().current_event.orblock)
		{
			if (this.select_all)
			{
				this.instances.length = 0;
				this.else_instances = inst.type.instances.slice(0);
				this.select_all = false;
			}
			var i = this.else_instances.indexOf(inst);
			if (i !== -1)
			{
				this.instances.push(this.else_instances[i]);
				this.else_instances.splice(i, 1);
			}
		}
		else
		{
			this.select_all = false;
			this.instances.length = 1;
			this.instances[0] = inst;
		}
	};
	var runtimeProto = cr.runtime.prototype;
	runtimeProto.clearSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].getCurrentSol().select_all = true;
		}
	};
	runtimeProto.pushCleanSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCleanSol();
		}
	};
	runtimeProto.pushCopySol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCopySol();
		}
	};
	runtimeProto.popSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].popSol();
		}
	};
	cr.eventblock = function (sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.solWriterAfterCnds = false;	// block does not change SOL after running its conditions
		this.group = false;					// is group of events
		this.initially_activated = false;	// if a group, is active on startup
		this.toplevelgroup = false;			// is parented only by other groups or is top-level (i.e. not in a subevent)
		this.has_else_block = false;		// is followed by else
;
		this.conditions = [];
		this.actions = [];
		this.subevents = [];
        if (m[1])
        {
			this.group_name = m[1][1].toLowerCase();
			this.group = true;
			this.initially_activated = !!m[1][0];
			this.runtime.allGroups.push(this);
            this.runtime.activeGroups[(/*this.sheet.name + "|" + */this.group_name).toLowerCase()] = this.initially_activated;
        }
		else
		{
			this.group_name = "";
			this.group = false;
		}
		this.orblock = m[2];
		var i, len;
		var cm = m[3];
		for (i = 0, len = cm.length; i < len; i++)
		{
			var cnd = new cr.condition(this, cm[i]);
			cr.seal(cnd);
			this.conditions.push(cnd);
			/*
			if (cnd.is_logical())
				this.is_logical = true;
			if (cnd.type && !cnd.type.plugin.singleglobal && this.cndReferences.indexOf(cnd.type) === -1)
				this.cndReferences.push(cnd.type);
			*/
			this.addSolModifier(cnd.type);
		}
		var am = m[4];
		for (i = 0, len = am.length; i < len; i++)
		{
			var act = new cr.action(this, am[i]);
			cr.seal(act);
			this.actions.push(act);
		}
		if (m.length === 6)
		{
			var em = m[5];
			for (i = 0, len = em.length; i < len; i++)
				this.sheet.init_event(em[i], this, this.subevents);
		}
		this.is_else_block = false;
		if (this.conditions.length)
			this.is_else_block = (this.conditions[0].type == null && this.conditions[0].func == cr.system_object.prototype.cnds.Else);
	};
	var eventblockProto = cr.eventblock.prototype;
	eventblockProto.postInit = function (hasElse/*, prevBlock_*/)
	{
		var p = this.parent;
		if (this.group)
		{
			this.toplevelgroup = true;
			while (p)
			{
				if (!p.group)
				{
					this.toplevelgroup = false;
					break;
				}
				p = p.parent;
			}
		}
		this.has_else_block = !!hasElse;
		var i, len/*, s*/;
		for (i = 0, len = this.conditions.length; i < len; i++)
			this.conditions[i].postInit();
		for (i = 0, len = this.actions.length; i < len; i++)
			this.actions[i].postInit();
		for (i = 0, len = this.subevents.length; i < len; i++)
		{
			this.subevents[i].postInit(i < len - 1 && this.subevents[i + 1].is_else_block);
		}
		/*
		if (this.is_else_block && this.prev_block)
		{
			for (i = 0, len = this.prev_block.solModifiers.length; i < len; i++)
			{
				s = this.prev_block.solModifiers[i];
				if (this.solModifiers.indexOf(s) === -1)
					this.solModifiers.push(s);
			}
		}
		*/
	}
	eventblockProto.addSolModifier = function (type)
	{
		if (!type)
			return;
		if (this.solModifiers.indexOf(type) === -1)
			this.solModifiers.push(type);
	};
	eventblockProto.setSolWriterAfterCnds = function ()
	{
		this.solWriterAfterCnds = true;
		if (this.parent)
			this.parent.setSolWriterAfterCnds();
	};
	eventblockProto.is_trigger = function ()
	{
		if (!this.conditions.length)    // no conditions
			return false;
		else
			return this.conditions[0].trigger;
	};
	eventblockProto.run = function ()
	{
		var i, len, any_true = false/*, bail = false*/;
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		if (!this.is_else_block)
			evinfo.else_branch_ran = false;
		if (this.orblock)
		{
			for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (this.conditions[evinfo.cndindex].trigger)		// skip triggers when running OR block
					continue;
				if (this.conditions[evinfo.cndindex].run())			// make sure all conditions run and run if any were true
					any_true = true;
			}
			evinfo.last_event_true = any_true;
			if (any_true)
				this.run_actions_and_subevents();
		}
		else
		{
			for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (!this.conditions[evinfo.cndindex].run())    // condition failed
				{
					evinfo.last_event_true = false;
					return false;								// bail out now
				}
			}
			evinfo.last_event_true = true;
			this.run_actions_and_subevents();
		}
		if (evinfo.last_event_true && this.has_else_block)
			evinfo.else_branch_ran = true;
	};
	eventblockProto.run_orblocktrigger = function (index)
	{
		if (this.conditions[index].run())
		{
			this.run_actions_and_subevents();
		}
	};
	eventblockProto.run_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (evinfo.actindex = 0, len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	eventblockProto.resume_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	eventblockProto.run_subevents = function ()
	{
		if (!this.subevents.length)
			return;
		var i, len, subev, pushpop/*, skipped_pop = false, pop_modifiers = null*/;
		var last = this.subevents.length - 1;
		this.runtime.pushEventStack(this);
		if (this.solWriterAfterCnds)
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				subev = this.subevents[i];
				pushpop = (!this.toplevelgroup || (!this.group && i < last));
				if (pushpop)
					this.runtime.pushCopySol(subev.solModifiers);
				subev.run();
				if (pushpop)
					this.runtime.popSol(subev.solModifiers);
				else
					this.runtime.clearSol(subev.solModifiers);
			}
		}
		else
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				this.subevents[i].run();
			}
		}
		this.runtime.popEventStack();
	};
	eventblockProto.run_pretrigger = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		var any_true = false;
		var i, len;
		for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
		{
;
			if (this.conditions[evinfo.cndindex].run())
				any_true = true;
			else if (!this.orblock)			// condition failed (let OR blocks run all conditions anyway)
				return false;               // bail out
		}
		return this.orblock ? any_true : true;
	};
	eventblockProto.retrigger = function ()
	{
		this.runtime.execcount++;
		var prevcndindex = this.runtime.getCurrentEventStack().cndindex;
		var len;
		var evinfo = this.runtime.pushEventStack(this);
		if (!this.orblock)
		{
			for (evinfo.cndindex = prevcndindex + 1, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (!this.conditions[evinfo.cndindex].run())    // condition failed
				{
					this.runtime.popEventStack();               // moving up level of recursion
					return false;                               // bail out
				}
			}
		}
		this.run_actions_and_subevents();
		this.runtime.popEventStack();
		return true;		// ran an iteration
	};
	cr.condition = function (block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.func = m[1];
;
		this.trigger = m[3];
		this.looping = m[4];
		this.inverted = m[5];
		this.isstatic = m[6];
		if (m[0] === -1)		// system object
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			if (this.isstatic)
				this.run = this.run_static;
			else
				this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
			if (this.block.parent)
				this.block.parent.setSolWriterAfterCnds();
		}
		if (m.length === 8)
		{
			var i, len;
			var em = m[7];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	var conditionProto = cr.condition.prototype;
	conditionProto.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.parameters[i].postInit();
	};
	/*
	conditionProto.is_logical = function ()
	{
		return !this.type || this.type.plugin.singleglobal;
	};
	*/
	conditionProto.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return cr.xor(this.func.apply(this.runtime.system, this.results), this.inverted);
	};
	conditionProto.run_static = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return this.func.apply(this.type, this.results);
	};
	conditionProto.run_object = function ()
	{
		var i, j, leni, lenj, ret, inst;
		var sol = this.type.getCurrentSol();
		var is_orblock = this.block.orblock && !this.trigger;		// triggers in OR blocks need to work normally
		var offset = 0;
		if (sol.select_all) {
			sol.instances.length = 0;       // clear contents
			sol.else_instances.length = 0;
			for (i = 0, leni = this.type.instances.length; i < leni; i++)
			{
				inst = this.type.instances[i];
;
				for (j = 0, lenj = this.parameters.length; j < lenj; j++)
					this.results[j] = this.parameters[j].get(i);        // default SOL index is current object
				if (this.beh_index > -1)
				{
					if (this.type.is_family)
					{
						offset = inst.type.family_beh_map[this.type.family_index];
					}
					ret = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
				}
				else
					ret = this.func.apply(inst, this.results);
				if (cr.xor(ret, this.inverted))
					sol.instances.push(inst);
				else if (is_orblock)					// in OR blocks, keep the instances not meeting the condition for subsequent testing
					sol.else_instances.push(inst);
			}
			if (this.type.finish)
				this.type.finish();
			sol.select_all = false;
			return sol.hasObjects();
		}
		else {
			var k = 0;
			var arr = (is_orblock ? sol.else_instances : sol.instances);
			var any_true = false;
			for (i = 0, leni = arr.length; i < leni; i++)
			{
				inst = arr[i];
;
				for (j = 0, lenj = this.parameters.length; j < lenj; j++)
					this.results[j] = this.parameters[j].get(i);        // default SOL index is current object
				if (this.beh_index > -1)
				{
					if (this.type.is_family)
					{
						offset = inst.type.family_beh_map[this.type.family_index];
					}
					ret = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
				}
				else
					ret = this.func.apply(inst, this.results);
				if (cr.xor(ret, this.inverted))
				{
					any_true = true;
					if (is_orblock)
					{
						sol.instances.push(inst);
					}
					else
					{
						arr[k] = inst;
						k++;
					}
				}
				else
				{
					if (is_orblock)
					{
						arr[k] = inst;
						k++;
					}
				}
			}
			arr.length = k;
			if (is_orblock && !any_true)
			{
				for (i = 0, leni = sol.instances.length; i < leni; i++)
				{
					inst = sol.instances[i];
					for (j = 0, lenj = this.parameters.length; j < lenj; j++)
						this.results[j] = this.parameters[j].get(i);
					if (this.beh_index > -1)
						ret = this.func.apply(inst.behavior_insts[this.beh_index], this.results);
					else
						ret = this.func.apply(inst, this.results);
					if (cr.xor(ret, this.inverted))
					{
						any_true = true;
						break;		// got our flag, don't need to test any more
					}
				}
			}
			if (this.type.finish)
				this.type.finish();
			return is_orblock ? any_true : sol.hasObjects();
		}
	};
	cr.action = function (block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.func = m[1];
;
		if (m[0] === -1)	// system
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
		}
		if (m.length === 4)
		{
			var i, len;
			var em = m[3];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	var actionProto = cr.action.prototype;
	actionProto.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.parameters[i].postInit();
	};
	actionProto.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return this.func.apply(this.runtime.system, this.results);
	};
	actionProto.run_object = function ()
	{
		var instances = this.type.getCurrentSol().getObjects();
		var i, j, leni, lenj, inst;
		for (i = 0, leni = instances.length; i < leni; i++)
		{
			inst = instances[i];
			for (j = 0, lenj = this.parameters.length; j < lenj; j++)
				this.results[j] = this.parameters[j].get(i);    // pass i to use as default SOL index
			if (this.beh_index > -1)
			{
				var offset = 0;
				if (this.type.is_family)
				{
					offset = inst.type.family_beh_map[this.type.family_index];
				}
				this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
			}
			else
				this.func.apply(inst, this.results);
		}
		return false;
	};
	cr.parameter = function (owner, m)
	{
		this.owner = owner;
		this.block = owner.block;
		this.sheet = owner.sheet;
		this.runtime = owner.runtime;
		this.type = m[0];
		this.expression = null;
		this.solindex = 0;
		this.temp = null;
		this.combosel = 0;
		this.layout = null;
		this.key = 0;
		this.object = null;
		this.index = 0;
		this.varname = "";
		this.eventvar = null;
		this.fileinfo = null;
		switch (m[0])
		{
			case 0:		// number
			case 7:		// any
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp;
				this.temp = new cr.expvalue();
				break;
			case 1:		// string
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp_str;
				this.temp = new cr.expvalue();
				break;
			case 5:		// layer
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_layer;
				this.temp = new cr.expvalue();
				break;
			case 3:		// combo
			case 8:		// cmp
				this.combosel = m[1];
				this.get = this.get_combosel;
				break;
			case 6:		// layout
				this.layout = this.runtime.layouts[m[1]];
;
				this.get = this.get_layout;
				break;
			case 9:		// keyb
				this.key = m[1];
				this.get = this.get_key;
				break;
			case 4:		// object
				this.object = this.runtime.types_by_index[m[1]];
;
				this.get = this.get_object;
				this.block.addSolModifier(this.object);
				if (this.owner instanceof cr.action)
					this.block.setSolWriterAfterCnds();
				else if (this.block.parent)
					this.block.parent.setSolWriterAfterCnds();
				break;
			case 10:	// instvar
				this.index = m[1];
				if (owner.type.is_family)
					this.get = this.get_familyvar;
				else
					this.get = this.get_instvar;
				break;
			case 11:	// eventvar
				this.varname = m[1];
				this.eventvar = null;
				this.get = this.get_eventvar;
				break;
			case 2:		// audiofile	["name", ismusic]
			case 12:	// fileinfo		"name"
				this.fileinfo = m[1];
				this.get = this.get_audiofile;
				break;
			default:
;
		}
	};
	var parameterProto = cr.parameter.prototype;
	parameterProto.postInit = function ()
	{
		if (this.type === 11)	// eventvar
		{
			this.eventvar = this.runtime.getEventVariableByName(this.varname, this.block.parent);
;
		}
		if (this.expression)
			this.expression.postInit();
	};
	parameterProto.get_exp = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		this.expression.get(this.temp)
		return this.temp.data;      // return actual JS value, not expvalue
	};
	parameterProto.get_exp_str = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		this.expression.get(this.temp)
		if (cr.is_string(this.temp.data))
			return this.temp.data;
		else
			return "";
	};
	parameterProto.get_object = function ()
	{
		return this.object;
	};
	parameterProto.get_combosel = function ()
	{
		return this.combosel;
	};
	parameterProto.get_layer = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		this.expression.get(this.temp)
		if (this.temp.is_number())
			return this.runtime.getLayerByNumber(this.temp.data);
		else
			return this.runtime.getLayerByName(this.temp.data);
	}
	parameterProto.get_layout = function ()
	{
		return this.layout;
	};
	parameterProto.get_key = function ()
	{
		return this.key;
	};
	parameterProto.get_instvar = function ()
	{
		return this.index;
	};
	parameterProto.get_familyvar = function (solindex)
	{
		var familytype = this.owner.type;
		var realtype = familytype.getCurrentSol().getObjects()[solindex].type;
		return this.index + realtype.family_var_map[familytype.family_index];
	};
	parameterProto.get_eventvar = function ()
	{
		return this.eventvar;
	};
	parameterProto.get_audiofile = function ()
	{
		return this.fileinfo;
	};
	cr.eventvariable = function (sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		if (!this.parent)		// global var
			this.runtime.all_global_vars.push(this);
		this.name = m[1];
		this.vartype = m[2];
		this.initial = m[3];
		this.data = this.initial;
	};
	var eventvariableProto = cr.eventvariable.prototype;
	eventvariableProto.postInit = function ()
	{
	};
	eventvariableProto.run = function ()
	{
		if (this.parent)
			this.data = this.initial;
	};
	cr.eventinclude = function (sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.include_sheet = null;		// determined in postInit
		this.include_sheet_name = m[1];
	};
	var eventincludeProto = cr.eventinclude.prototype;
	eventincludeProto.postInit = function ()
	{
        this.include_sheet = this.runtime.eventsheets[this.include_sheet_name];
;
;
        this.sheet.includes.add(this.include_sheet);
	};
	eventincludeProto.run = function ()
	{
		if (this.parent)
			this.runtime.pushCleanSol(this.runtime.types_by_index);
        if (!this.include_sheet.hasRun)
            this.include_sheet.run();
        if (this.parent)
            this.runtime.popSol(this.runtime.types_by_index);
	};
	runtimeProto.testAndSelectCanvasPointOverlap = function (type, ptx, pty, inverted)
	{
		var sol = type.getCurrentSol();
		var i, j, inst, len;
		var lx, ly;
		if (sol.select_all)
		{
			if (!inverted)
			{
				sol.select_all = false;
				sol.instances.length = 0;   // clear contents
			}
			for (i = 0, len = type.instances.length; i < len; i++)
			{
				inst = type.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
						sol.instances.push(inst);
				}
			}
		}
		else
		{
			j = 0;
			for (i = 0, len = sol.instances.length; i < len; i++)
			{
				inst = sol.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
					{
						sol.instances[j] = sol.instances[i];
						j++;
					}
				}
			}
			if (!inverted)
				sol.instances.length = j;
		}
		if (inverted)
			return true;		// did not find anything overlapping
		else
			return sol.hasObjects();
	};
	runtimeProto.testOverlap = function (a, b)
	{
		if (!a || !b || a === b)
			return false;
		a.update_bbox();
		b.update_bbox();
		if (!a.bbox.intersects_rect(b.bbox))
			return false;
		if (!a.bquad.intersects_quad(b.bquad))
			return false;
		var haspolya = (a.collision_poly && !a.collision_poly.is_empty());
		var haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
		if (!haspolya && !haspolyb)
			return true;
		var polya, polyb;
		if (haspolya)
		{
			a.collision_poly.cache_poly(a.width, a.height, a.angle);
			polya = a.collision_poly;
		}
		else
		{
			this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
			polya = this.temp_poly;
		}
		if (haspolyb)
		{
			b.collision_poly.cache_poly(b.width, b.height, b.angle);
			polyb = b.collision_poly;
		}
		else
		{
			this.temp_poly.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
			polyb = this.temp_poly;
		}
		return polya.intersects_poly(polyb, b.x - a.x, b.y - a.y);
	};
	runtimeProto.testOverlapSolid = function (inst)
	{
		var solid = null;
		var i, len, s;
		if (!cr.behaviors.solid)
			return null;
		for (i = 0, len = this.behaviors.length; i < len; i++)
		{
			if (this.behaviors[i] instanceof cr.behaviors.solid)
			{
				solid = this.behaviors[i];
				break;
			}
		}
		if (!solid)
			return null;
		var solids = solid.my_instances.valuesRef();
		for (i = 0, len = solids.length; i < len; ++i)
		{
			s = solids[i];
			if (!s.extra.solidEnabled)
				continue;
			if (this.testOverlap(inst, s))
				return s;
		}
		return null;
	};
	var jumpthru_array_ret = [];
	runtimeProto.testOverlapJumpThru = function (inst, all)
	{
		var jumpthru = null;
		var i, len, s;
		if (!cr.behaviors.jumpthru)
			return null;
		for (i = 0, len = this.behaviors.length; i < len; i++)
		{
			if (this.behaviors[i] instanceof cr.behaviors.jumpthru)
			{
				jumpthru = this.behaviors[i];
				break;
			}
		}
		if (!jumpthru)
			return null;
		var ret = null;
		if (all)
		{
			ret = jumpthru_array_ret;
			ret.length = 0;
		}
		var jumpthrus = jumpthru.my_instances.valuesRef();
		for (i = 0, len = jumpthrus.length; i < len; ++i)
		{
			s = jumpthrus[i];
			if (!s.extra.jumpthruEnabled)
				continue;
			if (this.testOverlap(inst, s))
			{
				if (all)
					ret.push(s);
				else
					return s;
			}
		}
		return ret;
	};
	runtimeProto.pushOutSolid = function (inst, xdir, ydir, dist, include_jumpthrus)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		var last_overlapped = null;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = cr.floor(oldx + (xdir * i));
			inst.y = cr.floor(oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (!last_overlapped)
				{
					if (include_jumpthrus)
						last_overlapped = this.testOverlapJumpThru(inst);
					if (!last_overlapped)
						return true;
				}
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	runtimeProto.pushOutSolidNearest = function (inst, max_dist_)
	{
		var max_dist = (cr.is_undefined(max_dist_) ? 100 : max_dist_);
		var dist = 0;
		var oldx = inst.x
		var oldy = inst.y;
		var dir = 0;
		var dx = 0, dy = 0;
		var last_overlapped = null;
		while (dist <= max_dist)
		{
			switch (dir) {
			case 0:		dx = 0; dy = -1; dist++; break;
			case 1:		dx = 1; dy = -1; break;
			case 2:		dx = 1; dy = 0; break;
			case 3:		dx = 1; dy = 1; break;
			case 4:		dx = 0; dy = 1; break;
			case 5:		dx = -1; dy = 1; break;
			case 6:		dx = -1; dy = 0; break;
			case 7:		dx = -1; dy = -1; break;
			}
			dir = (dir + 1) % 8;
			inst.x = cr.floor(oldx + (dx * dist));
			inst.y = cr.floor(oldy + (dy * dist));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (!last_overlapped)
					return true;
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	runtimeProto.registerCollision = function (a, b)
	{
		this.registered_collisions.push([a, b]);
	};
	runtimeProto.checkRegisteredCollision = function (a, b)
	{
		var i, len, x;
		for (i = 0, len = this.registered_collisions.length; i < len; i++)
		{
			x = this.registered_collisions[i];
			if ((x[0] == a && x[1] == b) || (x[0] == b && x[1] == a))
				return true;
		}
		return false;
	};
	runtimeProto.calculateSolidBounceAngle = function(inst, startx, starty, obj)
	{
		var objx = inst.x;
		var objy = inst.y;
		var radius = cr.max(10, cr.distanceTo(startx, starty, objx, objy));
		var startangle = cr.angleTo(startx, starty, objx, objy);
		var firstsolid = obj || this.testOverlapSolid(inst);
		if (!firstsolid)
			return cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		var i, curangle, anticlockwise_free_angle, clockwise_free_angle;
		var increment = cr.to_radians(5);	// 5 degree increments
		for (i = 1; i < 36; i++)
		{
			curangle = startangle - i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					anticlockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			anticlockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		for (i = 1; i < 36; i++)
		{
			curangle = startangle + i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					clockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			clockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		inst.x = objx;
		inst.y = objy;
		inst.set_bbox_changed();
		if (clockwise_free_angle === anticlockwise_free_angle)
			return clockwise_free_angle;
		var half_diff = cr.angleDiff(clockwise_free_angle, anticlockwise_free_angle) / 2;
		var normal;
		if (cr.angleClockwise(clockwise_free_angle, anticlockwise_free_angle))
		{
			normal = cr.clamp_angle(anticlockwise_free_angle + half_diff + cr.PI);
		}
		else
		{
			normal = cr.clamp_angle(clockwise_free_angle + half_diff);
		}
;
		var vx = Math.cos(startangle);
		var vy = Math.sin(startangle);
		var nx = Math.cos(normal);
		var ny = Math.sin(normal);
		var v_dot_n = vx * nx + vy * ny;
		var rx = vx - 2 * v_dot_n * nx;
		var ry = vy - 2 * v_dot_n * ny;
		return cr.angleTo(0, 0, rx, ry);
	};
	eventSheetProto.init_trigger = function (trig, index)
	{
		if (!trig.orblock)
			this.runtime.triggers_to_postinit.push(trig);	// needs to be postInit'd later
		var type_name;
		if (trig.conditions[index].type)
			type_name = trig.conditions[index].type.name;
		else
			type_name = "system";
		if (!this.triggers[type_name])
			this.triggers[type_name] = [];
		var obj_entry = this.triggers[type_name];
		var method = trig.conditions[index].func;
		var i, len;
		for (i = 0, len = obj_entry.length; i < len; i++)
		{
			if (obj_entry[i].method == method)
			{
				obj_entry[i].evs.push([trig, index]);
				return;
			}
		}
		obj_entry.push({ method: method, evs: [[trig, index]]});
	};
	var triggerSheetStack = [];
	var triggerSheetIndex = -1;
	runtimeProto.trigger = function (method, inst)
	{
;
		if (!this.running_layout)
			return false;
		var sheet = this.running_layout.event_sheet;
		if (!sheet)
			return false;     // no event sheet active; nothing to trigger
		triggerSheetIndex++;
		if (triggerSheetIndex === triggerSheetStack.length)
			triggerSheetStack.push(new cr.ObjectSet());
		else
			triggerSheetStack[triggerSheetIndex].clear();
        var ret = this.triggerOnSheet(method, inst, sheet);
		triggerSheetIndex--;
		return ret;
    };
    runtimeProto.triggerOnSheet = function (method, inst, sheet)
    {
		var alreadyTriggeredSheets = triggerSheetStack[triggerSheetIndex];
        if (alreadyTriggeredSheets.contains(sheet))
            return false;
        alreadyTriggeredSheets.add(sheet);
        var includes = sheet.includes.valuesRef();
        var ret = false;
		var i, leni, r;
        for (i = 0, leni = includes.length; i < leni; i++)
        {
            r = this.triggerOnSheet(method, inst, includes[i]);
            ret = ret || r;
        }
		if (!inst)
		{
			r = this.triggerOnSheetForTypeName(method, inst, "system", sheet);
			ret = ret || r;
		}
		else
		{
			r = this.triggerOnSheetForTypeName(method, inst, inst.type.name, sheet);
			ret = ret || r;
			for (i = 0, leni = inst.type.families.length; i < leni; i++)
			{
				r = this.triggerOnSheetForTypeName(method, inst, inst.type.families[i].name, sheet);
				ret = ret || r;
			}
		}
		return ret;             // true if anything got triggered
	};
	runtimeProto.triggerOnSheetForTypeName = function (method, inst, type_name, sheet)
	{
		var i, leni, j, lenj;
		var ret = false;
		if (!sheet.triggers[type_name])
			return ret;
		var obj_entry = sheet.triggers[type_name];
		var triggers_list = null;
		for (i = 0, leni = obj_entry.length; i < leni; i++)
		{
			if (obj_entry[i].method == method)
			{
				triggers_list = obj_entry[i].evs;
				break;
			}
		}
		if (!triggers_list)
			return ret;
		for (i = 0, leni = triggers_list.length; i < leni; i++)
		{
			var trig = triggers_list[i][0];
			var index = triggers_list[i][1];
			this.pushCleanSol(trig.solModifiers);
			this.pushEventStack(trig);
			if (inst)
			{
				var sol = this.types[type_name].getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = inst;
			}
			var ok_to_run = true;
			if (trig.parent)
			{
				var temp_parents_arr = this.getCurrentEventStack().temp_parents_arr;
				var cur_parent = trig.parent;
				while (cur_parent)
				{
					temp_parents_arr.push(cur_parent);
					cur_parent = cur_parent.parent;
				}
				temp_parents_arr.reverse();
				for (j = 0, lenj = temp_parents_arr.length; j < lenj; j++)
					this.pushCleanSol(temp_parents_arr[j].solModifiers);
				for (j = 0, lenj = temp_parents_arr.length; j < lenj; j++)
				{
					if (!temp_parents_arr[j].run_pretrigger())   // parent event failed
					{
						ok_to_run = false;
						break;
					}
				}
				for (j = 0, lenj = temp_parents_arr.length; j < lenj; j++)
					this.popSol(temp_parents_arr[j].solModifiers);
			}
			if (ok_to_run)
			{
				this.execcount++;
				if (trig.orblock)
					trig.run_orblocktrigger(index);
				else
					trig.run();
				ret = true;     // something got triggered
			}
			this.popSol(trig.solModifiers);
			this.popEventStack();
		}
		return ret;
	};
	cr.eventStackFrame = function ()
	{
		this.temp_parents_arr = [];
		this.reset(null);
		cr.seal(this);
	};
	var eventStackFrameProto = cr.eventStackFrame.prototype;
	eventStackFrameProto.reset = function (cur_event)
	{
		this.current_event = cur_event;
		this.cndindex = 0;
		this.actindex = 0;
		this.temp_parents_arr.length = 0;
		this.last_event_true = false;
		this.else_branch_ran = false;
	};
	eventStackFrameProto.isModifierAfterCnds = function ()
	{
		if (this.current_event.solWriterAfterCnds)
			return true;
		if (this.cndindex < this.current_event.conditions.length - 1)
			return !!this.current_event.solModifiers.length;
		return false;
	};
	runtimeProto.getCurrentCondition = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.conditions[evinfo.cndindex];
	};
	runtimeProto.getCurrentAction = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.actions[evinfo.actindex];
	};
	runtimeProto.pushEventStack = function (cur_event)
	{
		this.event_stack_index++;
		if (this.event_stack_index >= this.event_stack.length)
			this.event_stack.push(new cr.eventStackFrame());
		var ret = this.getCurrentEventStack();
		ret.reset(cur_event);
		return ret;
	};
	runtimeProto.popEventStack = function ()
	{
;
		this.event_stack_index--;
	};
	runtimeProto.getCurrentEventStack = function ()
	{
		return this.event_stack[this.event_stack_index];
	};
	runtimeProto.pushLoopStack = function (name_)
	{
		this.loop_stack_index++;
		if (this.loop_stack_index >= this.loop_stack.length)
		{
			this.loop_stack.push(cr.seal({ name: name_, index: 0, stopped: false }));
		}
		var ret = this.getCurrentLoop();
		ret.name = name_;
		ret.index = 0;
		ret.stopped = false;
		return ret;
	};
	runtimeProto.popLoopStack = function ()
	{
;
		this.loop_stack_index--;
	};
	runtimeProto.getCurrentLoop = function ()
	{
		return this.loop_stack[this.loop_stack_index];
	};
	runtimeProto.getEventVariableByName = function (name, scope)
	{
		var i, leni, j, lenj, sheet, e;
		while (scope)
		{
			for (i = 0, leni = scope.subevents.length; i < leni; i++)
			{
				e = scope.subevents[i];
				if (e instanceof cr.eventvariable && name.toLowerCase() === e.name.toLowerCase())
					return e;
			}
			scope = scope.parent;
		}
		for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
		{
			sheet = this.eventsheets_by_index[i];
			for (j = 0, lenj = sheet.events.length; j < lenj; j++)
			{
				e = sheet.events[j];
				if (e instanceof cr.eventvariable && name.toLowerCase() === e.name.toLowerCase())
					return e;
			}
		}
		return null;
	};
}());
(function()
{
	cr.expNode = function (owner_, m)
	{
		this.owner = owner_;
		this.runtime = owner_.runtime;
		this.type = m[0];
;
		this.get = [this.eval_int,
					this.eval_float,
					this.eval_string,
					this.eval_unaryminus,
					this.eval_add,
					this.eval_subtract,
					this.eval_multiply,
					this.eval_divide,
					this.eval_mod,
					this.eval_power,
					this.eval_and,
					this.eval_or,
					this.eval_equal,
					this.eval_notequal,
					this.eval_less,
					this.eval_lessequal,
					this.eval_greater,
					this.eval_greaterequal,
					this.eval_conditional,
					this.eval_system_exp,
					this.eval_object_behavior_exp,
					this.eval_instvar_exp,
					this.eval_object_behavior_exp,
					this.eval_eventvar_exp][this.type];
		var paramsModel = null;
		this.temp = new cr.expvalue();
		this.value = null;
		this.first = null;
		this.second = null;
		this.third = null;
		this.func = null;
		this.results = null;
		this.parameters = null;
		this.object_type = null;
		this.beh_index = -1;
		this.instance_expr = null;
		this.varindex = -1;
		this.behavior_type = null;
		this.varname = "";
		this.eventvar = null;
		this.return_string = false;
		switch (this.type) {
		case 0:		// int
		case 1:		// float
		case 2:		// string
			this.value = m[1];
			break;
		case 3:		// unaryminus
			this.first = new cr.expNode(owner_, m[1]);
			break;
		case 18:	// conditional
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
			this.third = new cr.expNode(owner_, m[3]);
			break;
		case 19:	// system_exp
			this.func = m[1];
;
			this.results = [];
			this.parameters = [];
			if (m.length === 3)
			{
				paramsModel = m[2];
				this.results.length = paramsModel.length + 1;	// must also fit 'ret'
			}
			else
				this.results.length = 1;      // to fit 'ret'
			break;
		case 20:	// object_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.beh_index = -1;
			this.func = m[2];
			this.return_string = m[3];
			if (m[4])
				this.instance_expr = new cr.expNode(owner_, m[4]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 6)
			{
				paramsModel = m[5];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 21:		// instvar_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.return_string = m[2];
			if (m[3])
				this.instance_expr = new cr.expNode(owner_, m[3]);
			else
				this.instance_expr = null;
			this.varindex = m[4];
			break;
		case 22:		// behavior_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.behavior_type = this.object_type.getBehaviorByName(m[2]);
;
			this.beh_index = this.object_type.getBehaviorIndexByName(m[2]);
			this.func = m[3];
			this.return_string = m[4];
			if (m[5])
				this.instance_expr = new cr.expNode(owner_, m[5]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 7)
			{
				paramsModel = m[6];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 23:		// eventvar_exp
			this.varname = m[1];
			this.eventvar = null;	// assigned in postInit
			break;
		}
		if (this.type >= 4 && this.type <= 17)
		{
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
		}
		if (paramsModel)
		{
			var i, len;
			for (i = 0, len = paramsModel.length; i < len; i++)
				this.parameters.push(new cr.expNode(owner_, paramsModel[i]));
		}
		cr.seal(this);
	};
	var expNodeProto = cr.expNode.prototype;
	expNodeProto.postInit = function ()
	{
		if (this.type === 23)	// eventvar_exp
		{
			this.eventvar = this.owner.runtime.getEventVariableByName(this.varname, this.owner.block.parent);
;
		}
		if (this.first)
			this.first.postInit();
		if (this.second)
			this.second.postInit();
		if (this.third)
			this.third.postInit();
		if (this.instance_expr)
			this.instance_expr.postInit();
		if (this.parameters)
		{
			var i, len;
			for (i = 0, len = this.parameters.length; i < len; i++)
				this.parameters[i].postInit();
		}
	};
	expNodeProto.eval_system_exp = function (ret)
	{
		this.results[0] = ret;
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			this.parameters[i].get(this.temp);
			this.results[i + 1] = this.temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		this.func.apply(this.runtime.system, this.results);
	};
	expNodeProto.eval_object_behavior_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length) {
			if (this.return_string)
				ret.set_string("");
			else
				ret.set_int(0);
			return;
		}
		this.results[0] = ret;
		ret.object_class = this.object_type;		// so expression can access family type if need be
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++) {
			this.parameters[i].get(this.temp);
			this.results[i + 1] = this.temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		var index = this.owner.solindex;
		if (this.instance_expr) {
			this.instance_expr.get(this.temp);
			if (this.temp.is_number()) {
				index = this.temp.data;
				instances = this.object_type.instances;    // pick from all instances, not SOL
			}
		}
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var returned_val;
		var inst = instances[index];
		if (this.beh_index > -1)
		{
			var offset = 0;
			if (this.object_type.is_family)
			{
				offset = inst.type.family_beh_map[this.object_type.family_index];
			}
			returned_val = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
		}
		else
			returned_val = this.func.apply(inst, this.results);
;
	};
	expNodeProto.eval_instvar_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (this.return_string)
				ret.set_string("");
			else
				ret.set_int(0);
			return;
		}
		var index = this.owner.solindex;
		if (this.instance_expr)
		{
			this.instance_expr.get(this.temp);
			if (this.temp.is_number())
			{
				index = this.temp.data;
				var type_instances = this.object_type.instances;
				index %= type_instances.length;     // wraparound
				if (index < 0)                      // offset
					index += type_instances.length;
				var to_ret = type_instances[index].instance_vars[this.varindex];
				if (cr.is_string(to_ret))
					ret.set_string(to_ret);
				else
					ret.set_float(to_ret);
				return;         // done
			}
		}
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var inst = instances[index];
		var offset = 0;
		if (this.object_type.is_family)
		{
			offset = inst.type.family_var_map[this.object_type.family_index];
		}
		var to_ret = inst.instance_vars[this.varindex + offset];
		if (cr.is_string(to_ret))
			ret.set_string(to_ret);
		else
			ret.set_float(to_ret);
	};
	expNodeProto.eval_int = function (ret)
	{
		ret.type = cr.exptype.Integer;
		ret.data = this.value;
	};
	expNodeProto.eval_float = function (ret)
	{
		ret.type = cr.exptype.Float;
		ret.data = this.value;
	};
	expNodeProto.eval_string = function (ret)
	{
		ret.type = cr.exptype.String;
		ret.data = this.value;
	};
	expNodeProto.eval_unaryminus = function (ret)
	{
		this.first.get(ret);                // retrieve operand
		if (ret.is_number())
			ret.data = -ret.data;
	};
	expNodeProto.eval_add = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		if (ret.is_number() && this.temp.is_number())
		{
			ret.data += this.temp.data;          // both operands numbers: add
			if (this.temp.is_float())
				ret.make_float();
		}
	};
	expNodeProto.eval_subtract = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		if (ret.is_number() && this.temp.is_number())
		{
			ret.data -= this.temp.data;          // both operands numbers: subtract
			if (this.temp.is_float())
				ret.make_float();
		}
	};
	expNodeProto.eval_multiply = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		if (ret.is_number() && this.temp.is_number())
		{
			ret.data *= this.temp.data;          // both operands numbers: multiply
			if (this.temp.is_float())
				ret.make_float();
		}
	};
	expNodeProto.eval_divide = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		if (ret.is_number() && this.temp.is_number())
		{
			ret.data /= this.temp.data;          // both operands numbers: divide
			ret.make_float();
		}
	};
	expNodeProto.eval_mod = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		if (ret.is_number() && this.temp.is_number())
		{
			ret.data %= this.temp.data;          // both operands numbers: modulo
			if (this.temp.is_float())
				ret.make_float();
		}
	};
	expNodeProto.eval_power = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		if (ret.is_number() && this.temp.is_number())
		{
			ret.data = Math.pow(ret.data, this.temp.data);   // both operands numbers: raise to power
			if (this.temp.is_float())
				ret.make_float();
		}
	};
	expNodeProto.eval_and = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		if (ret.is_number())
		{
			if (this.temp.is_string())
			{
				ret.set_string(ret.data.toString() + this.temp.data);
			}
			else
			{
				if (ret.data && this.temp.data)
					ret.set_int(1);
				else
					ret.set_int(0);
			}
		}
		else if (ret.is_string())
		{
			if (this.temp.is_string())
				ret.data += this.temp.data;
			else
			{
				ret.data += (Math.round(this.temp.data * 1e10) / 1e10).toString();
			}
		}
	};
	expNodeProto.eval_or = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		if (ret.is_number() && this.temp.is_number())
		{
			if (ret.data || this.temp.data)
				ret.set_int(1);
			else
				ret.set_int(0);
		}
	};
	expNodeProto.eval_conditional = function (ret)
	{
		this.first.get(ret);                // condition operand
		if (ret.data)                       // is true
			this.second.get(ret);           // evaluate second operand to ret
		else
			this.third.get(ret);            // evaluate third operand to ret
	};
	expNodeProto.eval_equal = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		ret.set_int(ret.data === this.temp.data ? 1 : 0);
	};
	expNodeProto.eval_notequal = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		ret.set_int(ret.data !== this.temp.data ? 1 : 0);
	};
	expNodeProto.eval_less = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		ret.set_int(ret.data < this.temp.data ? 1 : 0);
	};
	expNodeProto.eval_lessequal = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		ret.set_int(ret.data <= this.temp.data ? 1 : 0);
	};
	expNodeProto.eval_greater = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		ret.set_int(ret.data > this.temp.data ? 1 : 0);
	};
	expNodeProto.eval_greaterequal = function (ret)
	{
		this.first.get(ret);                // left operand
		this.second.get(this.temp);			// right operand
		ret.set_int(ret.data >= this.temp.data ? 1 : 0);
	};
	expNodeProto.eval_eventvar_exp = function (ret)
	{
		if (cr.is_number(this.eventvar.data))
			ret.set_float(this.eventvar.data);
		else
			ret.set_string(this.eventvar.data);
	};
	cr.expvalue = function (type, data)
	{
		this.type = type || cr.exptype.Integer;
		this.data = data || 0;
		this.object_class = null;
;
;
;
		if (this.type == cr.exptype.Integer)
			this.data = cr.floor(this.data);
		cr.seal(this);
	};
	var expvalueProto = cr.expvalue.prototype;
	expvalueProto.is_int = function ()
	{
		return this.type === cr.exptype.Integer;
	};
	expvalueProto.is_float = function ()
	{
		return this.type === cr.exptype.Float;
	};
	expvalueProto.is_number = function ()
	{
		return this.type === cr.exptype.Integer || this.type === cr.exptype.Float;
	};
	expvalueProto.is_string = function ()
	{
		return this.type === cr.exptype.String;
	};
	expvalueProto.make_int = function ()
	{
		if (!this.is_int())
		{
			if (this.is_float())
				this.data = cr.floor(this.data);      // truncate float
			else if (this.is_string())
				this.data = parseInt(this.data, 10);
			this.type = cr.exptype.Integer;
		}
	};
	expvalueProto.make_float = function ()
	{
		if (!this.is_float())
		{
			if (this.is_string())
				this.data = parseFloat(this.data);
			this.type = cr.exptype.Float;
		}
	};
	expvalueProto.make_string = function ()
	{
		if (!this.is_string())
		{
			this.data = this.data.toString();
			this.type = cr.exptype.String;
		}
	};
	expvalueProto.set_int = function (val)
	{
;
		this.type = cr.exptype.Integer;
		this.data = cr.floor(val);
	};
	expvalueProto.set_float = function (val)
	{
;
		this.type = cr.exptype.Float;
		this.data = val;
	};
	expvalueProto.set_string = function (val)
	{
;
		this.type = cr.exptype.String;
		this.data = val;
	};
	expvalueProto.set_any = function (val)
	{
		if (cr.is_number(val))
		{
			this.type = cr.exptype.Float;
			this.data = val;
		}
		else if (cr.is_string(val))
		{
			this.type = cr.exptype.String;
			this.data = val.toString();
		}
		else
		{
			this.type = cr.exptype.Integer;
			this.data = 0;
		}
	};
	cr.exptype = {
		Integer: 0,     // emulated; no native integer support in javascript
		Float: 1,
		String: 2
	};
}());
;
cr.system_object = function (runtime)
{
    this.runtime = runtime;
	this.waits = [];
};
(function ()
{
	var sysProto = cr.system_object.prototype;
	sysProto.cnds = {};
	sysProto.acts = {};
	sysProto.exps = {};
    var syscnds = sysProto.cnds;
    syscnds.EveryTick = function()
    {
        return true;
    };
    syscnds.OnLayoutStart = function()
    {
        return true;
    };
    syscnds.OnLayoutEnd = function()
    {
        return true;
    };
    syscnds.Compare = function(x, cmp, y)
    {
        return cr.do_cmp(x, cmp, y);
    };
    syscnds.CompareTime = function (cmp, t)
    {
        var elapsed = this.runtime.kahanTime.sum;
        if (cmp === 0)
        {
            var cnd = this.runtime.getCurrentCondition();
            if (!cnd.extra.CompareTime_executed)
            {
                if (elapsed >= t)
                {
                    cnd.extra.CompareTime_executed = true;
                    return true;
                }
            }
            return false;
        }
        return cr.do_cmp(elapsed, cmp, t);
    };
    syscnds.LayerVisible = function (layer)
    {
        if (!layer)
            return false;
        else
            return layer.visible;
    };
	syscnds.LayerCmpOpacity = function (layer, cmp, opacity_)
	{
		if (!layer)
			return false;
		return cr.do_cmp(layer.opacity * 100, cmp, opacity_);
	};
    syscnds.Repeat = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				current_loop.index = i;
				current_event.retrigger();
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	syscnds.While = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				if (!current_event.retrigger())		// one of the other conditions returned false
					current_loop.stopped = true;	// break
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				current_loop.index = i;
				if (!current_event.retrigger())
					current_loop.stopped = true;
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
    syscnds.For = function (name, start, end)
    {
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack(name);
        var i;
		if (solModifierAfterCnds)
		{
			for (i = start; i <= end && !current_loop.stopped; i++)  // inclusive to end
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = start; i <= end && !current_loop.stopped; i++)  // inclusive to end
			{
				current_loop.index = i;
				current_event.retrigger();
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
    syscnds.ForEach = function (obj)
    {
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects().slice(0);
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i, len;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = instances[i];
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				sol.instances[0] = instances[i];
				current_loop.index = i;
				current_event.retrigger();
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	function foreach_sortinstances(a, b)
	{
		var va = a.extra.c2_foreachordered_val;
		var vb = b.extra.c2_foreachordered_val;
		if (cr.is_number(va) && cr.is_number(vb))
			return va - vb;
		else
		{
			va = "" + va;
			vb = "" + vb;
			if (va < vb)
				return -1;
			else if (va > vb)
				return 1;
			else
				return 0;
		}
	};
	syscnds.ForEachOrdered = function (obj, exp, order)
    {
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects().slice(0);
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var current_condition = this.runtime.getCurrentCondition();
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
		var i, len;
		for (i = 0, len = instances.length; i < len; i++)
		{
			instances[i].extra.c2_foreachordered_val = current_condition.parameters[1].get(i);
		}
		instances.sort(foreach_sortinstances);
		if (order === 1)
			instances.reverse();
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = instances[i];
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				sol.instances[0] = instances[i];
				current_loop.index = i;
				current_event.retrigger();
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
    syscnds.TriggerOnce = function ()
    {
        var cndextra = this.runtime.getCurrentCondition().extra;
		if (typeof cndextra.TriggerOnce_lastTick === "undefined")
			cndextra.TriggerOnce_lastTick = -1;
        var last_tick = cndextra.TriggerOnce_lastTick;
        var cur_tick = this.runtime.tickcount;
        cndextra.TriggerOnce_lastTick = cur_tick;
        return this.runtime.layout_first_tick || last_tick !== cur_tick - 1;
    };
    syscnds.Every = function (seconds)
    {
        var cnd = this.runtime.getCurrentCondition();
        var last_time = cnd.extra.Every_lastTime || 0;
        var cur_time = this.runtime.kahanTime.sum;
        if (cur_time >= last_time + seconds)
        {
            cnd.extra.Every_lastTime = last_time + seconds;
			if (cur_time >= cnd.extra.Every_lastTime + seconds)
				cnd.extra.Every_lastTime = cur_time;
            return true;
        }
        else
            return false;
    };
    syscnds.PickNth = function (obj, index)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		index = cr.floor(index);
        if (index < 0 || index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
        return true;
    };
	syscnds.PickRandom = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		var index = cr.floor(Math.random() * instances.length);
        if (index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
        return true;
    };
	syscnds.CompareVar = function (v, cmp, val)
    {
        return cr.do_cmp(v.data, cmp, val);
    };
    syscnds.IsGroupActive = function (group)
    {
        return this.runtime.activeGroups[(/*this.runtime.getCurrentCondition().sheet.name + "|" + */group).toLowerCase()];
    };
	syscnds.IsPreview = function ()
	{
		return typeof cr_is_preview !== "undefined";
	};
	syscnds.PickAll = function (obj)
    {
        if (!obj)
            return false;
		if (!obj.instances.length)
			return false;
        var sol = obj.getCurrentSol();
        sol.select_all = true;
        return true;
    };
	syscnds.IsMobile = function ()
	{
		return this.runtime.isMobile;
	};
	syscnds.CompareBetween = function (x, a, b)
	{
		return x >= a && x <= b;
	};
	syscnds.Else = function ()
	{
		var current_frame = this.runtime.getCurrentEventStack();
		if (current_frame.else_branch_ran)
			return false;		// another event in this else-if chain has run
		else
			return !current_frame.last_event_true;
		/*
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var prev_event = current_event.prev_block;
		if (!prev_event)
			return false;
		if (prev_event.is_logical)
			return !this.runtime.last_event_true;
		var i, len, j, lenj, s, sol, temp, inst, any_picked = false;
		for (i = 0, len = prev_event.cndReferences.length; i < len; i++)
		{
			s = prev_event.cndReferences[i];
			sol = s.getCurrentSol();
			if (sol.select_all || sol.instances.length === s.instances.length)
			{
				sol.select_all = false;
				sol.instances.length = 0;
			}
			else
			{
				if (sol.instances.length === 1 && sol.else_instances.length === 0 && s.instances.length >= 2)
				{
					inst = sol.instances[0];
					sol.instances.length = 0;
					for (j = 0, lenj = s.instances.length; j < lenj; j++)
					{
						if (s.instances[j] != inst)
							sol.instances.push(s.instances[j]);
					}
					any_picked = true;
				}
				else
				{
					temp = sol.instances;
					sol.instances = sol.else_instances;
					sol.else_instances = temp;
					any_picked = true;
				}
			}
		}
		return any_picked;
		*/
	};
	syscnds.OnLoadFinished = function ()
	{
		return true;
	};
	syscnds.OnCanvasSnapshot = function ()
	{
		return true;
	};
    var sysacts = sysProto.acts;
    sysacts.GoToLayout = function(to)
    {
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
;
        this.runtime.changelayout = to;
    };
    sysacts.CreateObject = function (obj, layer, x, y)
    {
        if (!layer || !obj)
            return;
        var inst = this.runtime.createInstance(obj, layer, x, y);
		if (!inst)
			return;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
        var sol = obj.getCurrentSol();
        sol.select_all = false;
		sol.instances.length = 1;
		sol.instances[0] = inst;
    };
    sysacts.SetLayerVisible = function (layer, visible_)
    {
        if (!layer)
            return;
		if (layer.visible !== visible_)
		{
			layer.visible = visible_;
			this.runtime.redraw = true;
		}
    };
	sysacts.SetLayerOpacity = function (layer, opacity_)
	{
		if (!layer)
			return;
		opacity_ = cr.clamp(opacity_ / 100, 0, 1);
		if (layer.opacity !== opacity_)
		{
			layer.opacity = opacity_;
			this.runtime.redraw = true;
		}
	};
	sysacts.SetLayerScaleRate = function (layer, sr)
	{
		if (!layer)
			return;
		if (layer.zoomRate !== sr)
		{
			layer.zoomRate = sr;
			this.runtime.redraw = true;
		}
	};
	sysacts.SetLayoutScale = function (s)
	{
		if (!this.runtime.running_layout)
			return;
		if (this.runtime.running_layout.scale !== s)
		{
			this.runtime.running_layout.scale = s;
			this.runtime.redraw = true;
		}
	};
    sysacts.ScrollX = function(x)
    {
        this.runtime.running_layout.scrollToX(x);
    };
    sysacts.ScrollY = function(y)
    {
        this.runtime.running_layout.scrollToY(y);
    };
    sysacts.Scroll = function(x, y)
    {
        this.runtime.running_layout.scrollToX(x);
        this.runtime.running_layout.scrollToY(y);
    };
    sysacts.ScrollToObject = function(obj)
    {
        var inst = obj.getFirstPicked();
        if (inst)
        {
            this.runtime.running_layout.scrollToX(inst.x);
            this.runtime.running_layout.scrollToY(inst.y);
        }
    };
	sysacts.SetVar = function(v, x)
	{
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.data = x;
			else
				v.data = parseFloat(x);
		}
		else if (v.vartype === 1)
			v.data = x.toString();
	};
	sysacts.AddVar = function(v, x)
	{
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.data += x;
			else
				v.data += parseFloat(x);
		}
		else if (v.vartype === 1)
			v.data += x.toString();
	};
	sysacts.SubVar = function(v, x)
	{
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.data -= x;
			else
				v.data -= parseFloat(x);
		}
	};
    sysacts.SetGroupActive = function (group, active)
    {
		var activeGroups = this.runtime.activeGroups;
		var groupkey = (/*this.runtime.getCurrentAction().sheet.name + "|" + */group).toLowerCase();
		switch (active) {
		case 0:
			activeGroups[groupkey] = false;
			break;
		case 1:
			activeGroups[groupkey] = true;
			break;
		case 2:
			activeGroups[groupkey] = !activeGroups[groupkey];
			break;
		}
    };
    sysacts.SetTimescale = function (ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        this.runtime.timescale = ts;
    };
    sysacts.SetObjectTimescale = function (obj, ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        if (!obj)
            return;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = ts;
        }
    };
    sysacts.RestoreObjectTimescale = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = -1.0;
        }
    };
	sysacts.Wait = function (seconds)
	{
		if (seconds < 0)
			return;
		var i, len, s, t;
		var evinfo = this.runtime.getCurrentEventStack();
		var waitobj = {};
		waitobj.time = this.runtime.kahanTime.sum + seconds;
		waitobj.ev = evinfo.current_event;
		waitobj.actindex = evinfo.actindex + 1;	// pointing at next action
		waitobj.deleteme = false;
		waitobj.sols = {};
		waitobj.solModifiers = [];
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			t = this.runtime.types_by_index[i];
			s = t.getCurrentSol();
			if (s.select_all)
				continue;
			waitobj.solModifiers.push(t);
			waitobj.sols[i.toString()] = s.instances.slice(0);
		}
		this.waits.push(waitobj);
		return true;
	};
	sysacts.SetLayerScale = function (layer, scale)
    {
        if (!layer)
            return;
		if (layer.scale === scale)
			return;
        layer.scale = scale;
        this.runtime.redraw = true;
    };
	sysacts.ResetGlobals = function ()
	{
		var i, len, g;
		for (i = 0, len = this.runtime.all_global_vars.length; i < len; i++)
		{
			g = this.runtime.all_global_vars[i];
			g.data = g.initial;
		}
	};
	sysacts.SetLayoutAngle = function (a)
	{
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (this.runtime.running_layout)
		{
			if (this.runtime.running_layout.angle !== a)
			{
				this.runtime.running_layout.angle = a;
				this.runtime.redraw = true;
			}
		}
	};
	sysacts.SetLayerAngle = function (layer, a)
    {
        if (!layer)
            return;
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (layer.angle === a)
			return;
        layer.angle = a;
        this.runtime.redraw = true;
    };
	sysacts.StopLoop = function ()
	{
		if (this.runtime.loop_stack_index < 0)
			return;		// no loop currently running
		this.runtime.getCurrentLoop().stopped = true;
	};
	sysacts.GoToLayoutByName = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
;
		var l;
		for (l in this.runtime.layouts)
		{
			if (this.runtime.layouts.hasOwnProperty(l) && l.toLowerCase() === layoutname.toLowerCase())
			{
				this.runtime.changelayout = this.runtime.layouts[l];
				return;
			}
		}
	};
	sysacts.RestartLayout = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot restart loader layouts
;
		if (!this.runtime.running_layout)
			return;
		this.runtime.changelayout = this.runtime.running_layout;
		var i, len, g;
		for (i = 0, len = this.runtime.allGroups.length; i < len; i++)
		{
			g = this.runtime.allGroups[i];
			this.runtime.activeGroups[g.group_name.toLowerCase()] = g.initially_activated;
		}
	};
	sysacts.SnapshotCanvas = function (format_, quality_)
	{
		this.runtime.snapshotCanvas = [format_ === 0 ? "image/png" : "image/jpeg", quality_ / 100];
	};
    var sysexps = sysProto.exps;
    sysexps["int"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_int(parseInt(x, 10));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_int(x);
    };
    sysexps["float"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_float(parseFloat(x));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_float(x);
    };
    sysexps.str = function(ret, x)
    {
        if (cr.is_string(x))
            ret.set_string(x);
        else
            ret.set_string(x.toString());
    };
    sysexps.len = function(ret, x)
    {
        ret.set_int(x.length || 0);
    };
    sysexps.random = function (ret, a, b)
    {
        if (b === undefined)
        {
            ret.set_float(Math.random() * a);
        }
        else
        {
            ret.set_float(Math.random() * (b - a) + a);
        }
    };
    sysexps.sqrt = function(ret, x)
    {
        ret.set_float(Math.sqrt(x));
    };
    sysexps.abs = function(ret, x)
    {
        ret.set_float(Math.abs(x));
    };
    sysexps.round = function(ret, x)
    {
        ret.set_int(Math.round(x));
    };
    sysexps.floor = function(ret, x)
    {
        ret.set_int(Math.floor(x));
    };
    sysexps.ceil = function(ret, x)
    {
        ret.set_int(Math.ceil(x));
    };
    sysexps.sin = function(ret, x)
    {
        ret.set_float(Math.sin(cr.to_radians(x)));
    };
    sysexps.cos = function(ret, x)
    {
        ret.set_float(Math.cos(cr.to_radians(x)));
    };
    sysexps.tan = function(ret, x)
    {
        ret.set_float(Math.tan(cr.to_radians(x)));
    };
    sysexps.asin = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.asin(x)));
    };
    sysexps.acos = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.acos(x)));
    };
    sysexps.atan = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.atan(x)));
    };
    sysexps.exp = function(ret, x)
    {
        ret.set_float(Math.exp(x));
    };
    sysexps.ln = function(ret, x)
    {
        ret.set_float(Math.log(x));
    };
    sysexps.log10 = function(ret, x)
    {
        ret.set_float(Math.log(x) / Math.LN10);
    };
    sysexps.max = function(ret)
    {
		var max_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (max_ < arguments[i])
				max_ = arguments[i];
		}
		ret.set_float(max_);
    };
    sysexps.min = function(ret)
    {
        var min_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (min_ > arguments[i])
				min_ = arguments[i];
		}
		ret.set_float(min_);
    };
    sysexps.dt = function(ret)
    {
        ret.set_float(this.runtime.dt);
    };
    sysexps.timescale = function(ret)
    {
        ret.set_float(this.runtime.timescale);
    };
    sysexps.wallclocktime = function(ret)
    {
        ret.set_float((Date.now() - this.runtime.start_time) / 1000.0);
    };
    sysexps.time = function(ret)
    {
        ret.set_float(this.runtime.kahanTime.sum);
    };
    sysexps.tickcount = function(ret)
    {
        ret.set_int(this.runtime.tickcount);
    };
    sysexps.objectcount = function(ret)
    {
        ret.set_int(this.runtime.objectcount);
    };
    sysexps.fps = function(ret)
    {
        ret.set_int(this.runtime.fps);
    };
    sysexps.loopindex = function(ret, name_)
    {
        if (!this.runtime.loop_stack.length)
        {
            ret.set_int(0);
            return;
        }
        if (name_)
        {
            var i, len;
            for (i = 0, len = this.runtime.loop_stack.length; i < len; i++)
            {
                var loop = this.runtime.loop_stack[i];
                if (loop.name === name_)
                {
                    ret.set_int(loop.index);
                    return;
                }
            }
            ret.set_int(0);
        }
        else
        {
            ret.set_int(this.runtime.getCurrentLoop().index);
        }
    };
    sysexps.distance = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.distanceTo(x1, y1, x2, y2));
    };
    sysexps.angle = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.to_degrees(cr.angleTo(x1, y1, x2, y2)));
    };
    sysexps.scrollx = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollX);
    };
    sysexps.scrolly = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollY);
    };
    sysexps.newline = function(ret)
    {
        ret.set_string("\n");
    };
    sysexps.lerp = function(ret, a, b, x)
    {
        ret.set_float(cr.lerp(a, b, x));
    };
    sysexps.windowwidth = function(ret)
    {
        ret.set_int(this.runtime.width);
    };
    sysexps.windowheight = function(ret)
    {
        ret.set_int(this.runtime.height);
    };
	sysexps.uppercase = function(ret, str)
	{
		ret.set_string(str.toUpperCase());
	};
	sysexps.lowercase = function(ret, str)
	{
		ret.set_string(str.toLowerCase());
	};
	sysexps.clamp = function(ret, x, l, u)
	{
		if (x < l)
			ret.set_float(l);
		else if (x > u)
			ret.set_float(u);
		else
			ret.set_float(x);
	};
	sysexps.layerscale = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.scale);
	};
	sysexps.layeropacity = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.opacity * 100);
	};
	sysexps.layerscalerate = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.zoomRate);
	};
	sysexps.layoutscale = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_float(this.runtime.running_layout.scale);
		else
			ret.set_float(0);
	};
	sysexps.layoutangle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.runtime.running_layout.angle));
	};
	sysexps.layerangle = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(cr.to_degrees(layer.angle));
	};
	sysexps.layoutwidth = function (ret)
	{
		ret.set_int(this.runtime.running_layout.width);
	};
	sysexps.layoutheight = function (ret)
	{
		ret.set_int(this.runtime.running_layout.height);
	};
	sysexps.find = function (ret, text, searchstr)
	{
		ret.set_int(text.search(new RegExp(cr.regexp_escape(searchstr), "i")));
	};
	sysexps.left = function (ret, text, n)
	{
		ret.set_string(text.substr(0, n));
	};
	sysexps.right = function (ret, text, n)
	{
		ret.set_string(text.substr(text.length - n));
	};
	sysexps.mid = function (ret, text, index_, length_)
	{
		ret.set_string(text.substr(index_, length_));
	};
	sysexps.tokenat = function (ret, text, index_, sep)
	{
		var arr = text.split(sep);
		var i = cr.floor(index_);
		if (i < 0 || i >= arr.length)
			ret.set_string("");
		else
			ret.set_string(arr[i]);
	};
	sysexps.tokencount = function (ret, text, sep)
	{
		if (!text.length)
			return 0;		// empty string has no tokens (otherwise reports 1)
		ret.set_int(text.split(sep).length);
	};
	sysexps.replace = function (ret, text, find_, replace_)
	{
		ret.set_string(text.replace(new RegExp(cr.regexp_escape(find_), "gi"), replace_));
	};
	sysexps.trim = function (ret, text)
	{
		ret.set_string(text.trim());
	};
	sysexps.pi = function (ret)
	{
		ret.set_float(cr.PI);
	};
	sysexps.layoutname = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_string(this.runtime.running_layout.name);
		else
			ret.set_string("");
	};
	sysexps.renderer = function (ret)
	{
		ret.set_string(this.runtime.gl ? "webgl" : "canvas2d");
	};
	sysexps.anglediff = function (ret, a, b)
	{
		ret.set_float(cr.to_degrees(cr.angleDiff(cr.to_radians(a), cr.to_radians(b))));
	};
	sysexps.choose = function (ret)
	{
		var index = cr.floor(Math.random() * (arguments.length - 1));
		ret.set_any(arguments[index + 1]);
	};
	sysexps.rgb = function (ret, r, g, b)
	{
		ret.set_int(cr.RGB(r, g, b));
	};
	sysexps.projectversion = function (ret)
	{
		ret.set_string(this.runtime.versionstr);
	};
	sysexps.anglelerp = function (ret, a, b, x)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		var diff = cr.angleDiff(a, b);
		if (cr.angleClockwise(b, a))
		{
			ret.set_float(cr.to_clamped_degrees(a + diff * x));
		}
		else
		{
			ret.set_float(cr.to_clamped_degrees(a - diff * x));
		}
	};
	sysexps.anglerotate = function (ret, a, b, c)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		c = cr.to_radians(c);
		ret.set_float(cr.to_clamped_degrees(cr.angleRotate(a, b, c)));
	};
	sysexps.zeropad = function (ret, n, d)
	{
		var s = (n < 0 ? "-" : "");
		if (n < 0) n = -n;
		var zeroes = d - n.toString().length;
		for (var i = 0; i < zeroes; i++)
			s += "0";
		ret.set_string(s + n.toString());
	};
	sysexps.cpuutilisation = function (ret)
	{
		ret.set_float(this.runtime.cpuutilisation / 1000);
	};
	sysexps.viewportleft = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewLeft : 0);
	};
	sysexps.viewporttop = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewTop : 0);
	};
	sysexps.viewportright = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewRight : 0);
	};
	sysexps.viewportbottom = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewBottom : 0);
	};
	sysexps.loadingprogress = function (ret)
	{
		ret.set_float(this.runtime.loadingprogress);
	};
	sysexps.unlerp = function(ret, a, b, y)
    {
        ret.set_float((y - a) / (b - a));
    };
	sysexps.canvassnapshot = function (ret)
	{
		ret.set_string(this.runtime.snapshotData);
	};
	sysProto.runWaits = function ()
	{
		var i, j, len, w, k, s;
		var evinfo = this.runtime.getCurrentEventStack();
		for (i = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			if (w.time > this.runtime.kahanTime.sum)
				continue;
			evinfo.current_event = w.ev;
			evinfo.actindex = w.actindex;
			evinfo.cndindex = 0;
			for (k in w.sols)
			{
				if (w.sols.hasOwnProperty(k))
				{
					s = this.runtime.types_by_index[parseInt(k, 10)].getCurrentSol();
					s.select_all = false;
					s.instances = w.sols[k];
				}
			}
			w.ev.resume_actions_and_subevents();
			this.runtime.clearSol(w.solModifiers);
			w.deleteme = true;
		}
		for (i = 0, j = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			this.waits[j] = w;
			if (!w.deleteme)
				j++;
		}
		this.waits.length = j;
	};
}());
;
cr.add_common_aces = function (m)
{
	var pluginProto = m[0].prototype;
	var singleglobal_ = m[1];
	var position_aces = m[3];
	var size_aces = m[4];
	var angle_aces = m[5];
	var appearance_aces = m[6];
	var zorder_aces = m[7];
    if (!pluginProto.cnds)
        pluginProto.cnds = {};
    if (!pluginProto.acts)
        pluginProto.acts = {};
    if (!pluginProto.exps)
        pluginProto.exps = {};
    var cnds = pluginProto.cnds;
    var acts = pluginProto.acts;
    var exps = pluginProto.exps;
    if (position_aces)
    {
        cnds.CompareX = function (cmp, x)
        {
            return cr.do_cmp(this.x, cmp, x);
        };
        cnds.CompareY = function (cmp, y)
        {
            return cr.do_cmp(this.y, cmp, y);
        };
        cnds.IsOnScreen = function ()
        {
			var layer = this.layer;
            this.update_bbox();
            var bbox = this.bbox;
            return !(bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom);
        };
        cnds.IsOutsideLayout = function ()
        {
            this.update_bbox();
            var bbox = this.bbox;
            var layout = this.runtime.running_layout;
            return (bbox.right < 0 || bbox.bottom < 0 || bbox.left > layout.width || bbox.top > layout.height);
        };
		cnds.PickDistance = function (which, x, y)
		{
			var sol = this.getCurrentSol();
			var instances = sol.getObjects();
			if (!instances.length)
				return false;
			var inst = instances[0];
			var pickme = inst;
			var dist = cr.distanceTo(inst.x, inst.y, x, y);
			var i, len, d;
			for (i = 1, len = instances.length; i < len; i++)
			{
				inst = instances[i];
				d = cr.distanceTo(inst.x, inst.y, x, y);
				if ((which === 0 && d < dist) || (which === 1 && d > dist))
				{
					dist = d;
					pickme = inst;
				}
			}
			sol.pick_one(pickme);
			return true;
		};
        acts.SetX = function (x)
        {
            if (this.x !== x)
            {
                this.x = x;
                this.set_bbox_changed();
            }
        };
        acts.SetY = function (y)
        {
            if (this.y !== y)
            {
                this.y = y;
                this.set_bbox_changed();
            }
        };
        acts.SetPos = function (x, y)
        {
            if (this.x !== x || this.y !== y)
            {
                this.x = x;
                this.y = y;
                this.set_bbox_changed();
            }
        };
        acts.SetPosToObject = function (obj, imgpt)
        {
            var inst = obj.getPairedInstance(this);
            if (!inst)
				return;
			var newx, newy;
			if (inst.getImagePoint)
			{
				newx = inst.getImagePoint(imgpt, true);
				newy = inst.getImagePoint(imgpt, false);
			}
			else
			{
				newx = inst.x;
				newy = inst.y;
			}
			if (this.x !== newx || this.y !== newy)
            {
				this.x = newx;
				this.y = newy;
				this.set_bbox_changed();
            }
        };
        acts.MoveForward = function (dist)
        {
            if (dist !== 0)
            {
                this.x += Math.cos(this.angle) * dist;
                this.y += Math.sin(this.angle) * dist;
                this.set_bbox_changed();
            }
        };
        acts.MoveAtAngle = function (a, dist)
        {
            if (dist !== 0)
            {
                this.x += Math.cos(cr.to_radians(a)) * dist;
                this.y += Math.sin(cr.to_radians(a)) * dist;
                this.set_bbox_changed();
            }
        };
        exps.X = function (ret)
        {
            ret.set_float(this.x);
        };
        exps.Y = function (ret)
        {
            ret.set_float(this.y);
        };
        exps.dt = function (ret)
        {
            ret.set_float(this.runtime.getDt(this));
        };
    }
    if (size_aces)
    {
        cnds.CompareWidth = function (cmp, w)
        {
            return cr.do_cmp(this.width, cmp, w);
        };
        cnds.CompareHeight = function (cmp, h)
        {
            return cr.do_cmp(this.height, cmp, h);
        };
        acts.SetWidth = function (w)
        {
            var newwidth = w;
            if (newwidth < 0)
                newwidth = -newwidth;
            if (this.width !== newwidth)
            {
                this.width = newwidth;
                this.set_bbox_changed();
            }
        };
        acts.SetHeight = function (h)
        {
            var newheight = h;
            if (newheight < 0)
                newheight = -newheight;
            if (this.height !== newheight)
            {
                this.height = newheight;
                this.set_bbox_changed();
            }
        };
        acts.SetSize = function (w, h)
        {
            var newwidth = w;
            var newheight = h;
            if (newwidth < 0)
                newwidth = -newwidth;
            if (newheight < 0)
                newheight = -newheight;
            if (this.width !== newwidth || this.height !== newheight)
            {
                this.width = newwidth;
                this.height = newheight;
                this.set_bbox_changed();
            }
        };
        exps.Width = function (ret)
        {
            ret.set_float(this.width);
        };
        exps.Height = function (ret)
        {
            ret.set_float(this.height);
        };
    }
    if (angle_aces)
    {
        cnds.AngleWithin = function (within, a)
        {
            return cr.angleDiff(this.angle, cr.to_radians(a)) <= cr.to_radians(within);
        };
        cnds.IsClockwiseFrom = function (a)
        {
            return cr.angleClockwise(this.angle, cr.to_radians(a));
        };
		cnds.IsBetweenAngles = function (a, b)
		{
			var lower = cr.to_clamped_radians(a);
			var upper = cr.to_clamped_radians(b);
			var angle = cr.clamp_angle(this.angle);
			var obtuse = (!cr.angleClockwise(upper, lower));
			if (obtuse)
				return !(!cr.angleClockwise(angle, lower) && cr.angleClockwise(angle, upper));
			else
				return cr.angleClockwise(angle, lower) && !cr.angleClockwise(angle, upper);
		};
        acts.SetAngle = function (a)
        {
            var newangle = cr.to_radians(cr.clamp_angle_degrees(a));
            if (isNaN(newangle))
                return;
            if (this.angle !== newangle)
            {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        acts.RotateClockwise = function (a)
        {
            if (a !== 0 && !isNaN(a))
            {
                this.angle += cr.to_radians(a);
                this.angle = cr.clamp_angle(this.angle);
                this.set_bbox_changed();
            }
        };
        acts.RotateCounterclockwise = function (a)
        {
            if (a !== 0 && !isNaN(a))
            {
                this.angle -= cr.to_radians(a);
                this.angle = cr.clamp_angle(this.angle);
                this.set_bbox_changed();
            }
        };
        acts.RotateTowardAngle = function (amt, target)
        {
            var newangle = cr.angleRotate(this.angle, cr.to_radians(target), cr.to_radians(amt));
            if (isNaN(newangle))
                return;
            if (this.angle !== newangle)
            {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        acts.RotateTowardPosition = function (amt, x, y)
        {
            var dx = x - this.x;
            var dy = y - this.y;
            var target = Math.atan2(dy, dx);
            var newangle = cr.angleRotate(this.angle, target, cr.to_radians(amt));
            if (isNaN(newangle))
                return;
            if (this.angle !== newangle)
            {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        acts.SetTowardPosition = function (x, y)
        {
            var dx = x - this.x;
            var dy = y - this.y;
            var newangle = Math.atan2(dy, dx);
            if (isNaN(newangle))
                return;
            if (this.angle !== newangle)
            {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        exps.Angle = function (ret)
        {
            ret.set_float(cr.to_clamped_degrees(this.angle));
        };
    }
    if (!singleglobal_)
    {
        cnds.CompareInstanceVar = function (iv, cmp, val)
        {
            return cr.do_cmp(this.instance_vars[iv], cmp, val);
        };
        cnds.IsBoolInstanceVarSet = function (iv)
        {
            return this.instance_vars[iv];
        };
		cnds.PickByUID = function (u)
		{
			return this.uid === u;
		};
		cnds.OnCreated = function ()
		{
			return true;
		};
		cnds.OnDestroyed = function ()
		{
			return true;
		};
        acts.SetInstanceVar = function (iv, val)
        {
			var myinstvars = this.instance_vars;
            if (cr.is_number(myinstvars[iv]))
            {
                if (cr.is_number(val))
                    myinstvars[iv] = val;
                else
                    myinstvars[iv] = parseFloat(val);
            }
            else if (cr.is_string(myinstvars[iv]))
            {
                if (cr.is_string(val))
                    myinstvars[iv] = val;
                else
                    myinstvars[iv] = val.toString();
            }
            else
;
        };
        acts.AddInstanceVar = function (iv, val)
        {
			var myinstvars = this.instance_vars;
            if (cr.is_number(myinstvars[iv]))
            {
                if (cr.is_number(val))
                    myinstvars[iv] += val;
                else
                    myinstvars[iv] += parseFloat(val);
            }
            else if (cr.is_string(myinstvars[iv]))
            {
                if (cr.is_string(val))
                    myinstvars[iv] += val;
                else
                    myinstvars[iv] += val.toString();
            }
            else
;
        };
        acts.SubInstanceVar = function (iv, val)
        {
			var myinstvars = this.instance_vars;
            if (cr.is_number(myinstvars[iv]))
            {
                if (cr.is_number(val))
                    myinstvars[iv] -= val;
                else
                    myinstvars[iv] -= parseFloat(val);
            }
            else
;
        };
        acts.SetBoolInstanceVar = function (iv, val)
        {
            this.instance_vars[iv] = val ? 1 : 0;
        };
        acts.ToggleBoolInstanceVar = function (iv)
        {
            this.instance_vars[iv] = 1 - this.instance_vars[iv];
        };
        acts.Destroy = function ()
        {
            this.runtime.DestroyInstance(this);
        };
        exps.Count = function (ret)
        {
            ret.set_int(ret.object_class.instances.length);
        };
		exps.PickedCount = function (ret)
        {
            ret.set_int(ret.object_class.getCurrentSol().getObjects().length);
        };
		exps.UID = function (ret)
		{
			ret.set_int(this.uid);
		};
		exps.IID = function (ret)
		{
			ret.set_int(this.get_iid());
		};
    }
    if (appearance_aces)
    {
        cnds.IsVisible = function ()
        {
            return this.visible;
        };
        acts.SetVisible = function (v)
        {
			if (!v !== !this.visible)
			{
				this.visible = v;
				this.runtime.redraw = true;
			}
        };
        cnds.CompareOpacity = function (cmp, x)
        {
            return cr.do_cmp(this.opacity * 100, cmp, x);
        };
        acts.SetOpacity = function (x)
        {
            var new_opacity = x / 100.0;
            if (new_opacity < 0)
                new_opacity = 0;
            else if (new_opacity > 1)
                new_opacity = 1;
            if (new_opacity !== this.opacity)
            {
                this.opacity = new_opacity;
                this.runtime.redraw = true;
            }
        };
        exps.Opacity = function (ret)
        {
            ret.set_float(this.opacity * 100.0);
        };
    }
	if (zorder_aces)
	{
		cnds.IsOnLayer = function (layer_)
		{
			if (!layer_)
				return false;
			return this.layer === layer_;
		};
		cnds.PickTopBottom = function (which_)
		{
			var sol = this.getCurrentSol();
			var instances = sol.getObjects();
			if (!instances.length)
				return false;
			var inst = instances[0];
			var pickme = inst;
			var i, len;
			for (i = 1, len = instances.length; i < len; i++)
			{
				inst = instances[i];
				if (which_ === 0)
				{
					if (inst.layer.index > pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() > pickme.get_zindex()))
					{
						pickme = inst;
					}
				}
				else
				{
					if (inst.layer.index < pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() < pickme.get_zindex()))
					{
						pickme = inst;
					}
				}
			}
			sol.pick_one(pickme);
			return true;
		};
		acts.MoveToTop = function ()
		{
			var zindex = this.get_zindex();
			if (zindex === this.layer.instances.length - 1)
				return;
			cr.arrayRemove(this.layer.instances, zindex);
			this.layer.instances.push(this);
			this.runtime.redraw = true;
			this.layer.zindices_stale = true;
		};
		acts.MoveToBottom = function ()
		{
			var zindex = this.get_zindex();
			if (zindex === 0)
				return;
			cr.arrayRemove(this.layer.instances, zindex);
			this.layer.instances.unshift(this);
			this.runtime.redraw = true;
			this.layer.zindices_stale = true;
		};
		acts.MoveToLayer = function (layerMove)
		{
			if (!layerMove || layerMove == this.layer)
				return;
			cr.arrayRemove(this.layer.instances, this.get_zindex());
			this.layer.zindices_stale = true;
			this.layer = layerMove;
			this.zindex = layerMove.instances.length;
			layerMove.instances.push(this);
			this.runtime.redraw = true;
		};
		exps.LayerNumber = function (ret)
		{
			ret.set_int(this.layer.number);
		};
		exps.LayerName = function (ret)
		{
			ret.set_string(this.layer.name);
		};
		exps.ZIndex = function (ret)
		{
			ret.set_int(this.get_zindex());
		};
	}
};
cr.set_bbox_changed = function ()
{
    this.bbox_changed = true;       // will recreate next time box requested
    this.runtime.redraw = true;     // assume runtime needs to redraw
	var i, len;
	for (i = 0, len = this.bbox_changed_callbacks.length; i < len; i++)
	{
		this.bbox_changed_callbacks[i](this);
	}
};
cr.add_bbox_changed_callback = function (f)
{
	if (f)
		this.bbox_changed_callbacks.push(f);
};
cr.update_bbox = function ()
{
    if (!this.bbox_changed)
        return;                 // bounding box not changed
    this.bbox.set(this.x, this.y, this.x + this.width, this.y + this.height);
    this.bbox.offset(-this.hotspotX * this.width, -this.hotspotY * this.height);
    if (!this.angle)
    {
        this.bquad.set_from_rect(this.bbox);    // make bounding quad from box
    }
    else
    {
        this.bbox.offset(-this.x, -this.y);       					// translate to origin
        this.bquad.set_from_rotated_rect(this.bbox, this.angle);	// rotate around origin
        this.bquad.offset(this.x, this.y);      					// translate back to original position
        this.bquad.bounding_box(this.bbox);
    }
	var temp = 0;
	if (this.bbox.left > this.bbox.right)
	{
		temp = this.bbox.left;
		this.bbox.left = this.bbox.right;
		this.bbox.right = temp;
	}
	if (this.bbox.top > this.bbox.bottom)
	{
		temp = this.bbox.top;
		this.bbox.top = this.bbox.bottom;
		this.bbox.bottom = temp;
	}
    this.bbox_changed = false;  // bounding box up to date
};
cr.inst_contains_pt = function (x, y)
{
	if (!this.bbox.contains_pt(x, y))
		return false;
	if (!this.bquad.contains_pt(x, y))
		return false;
	if (this.collision_poly && !this.collision_poly.is_empty())
	{
		this.collision_poly.cache_poly(this.width, this.height, this.angle);
		return this.collision_poly.contains_pt(x - this.x, y - this.y);
	}
	else
		return true;
};
cr.inst_get_iid = function ()
{
	this.type.updateIIDs();
	return this.iid;
};
cr.inst_get_zindex = function ()
{
	this.layer.updateZIndices();
	return this.zindex;
};
cr.inst_toString = function ()
{
	return "inst:" + this.type.name + "#" + this.uid;
};
cr.type_getFirstPicked = function ()
{
    var instances = this.getCurrentSol().getObjects();
    if (instances.length)
        return instances[0];
    else
        return null;
};
cr.type_getPairedInstance = function (inst)
{
	var instances = this.getCurrentSol().getObjects();
	if (instances.length)
		return instances[inst.get_iid() % instances.length];
	else
		return null;
};
cr.type_updateIIDs = function ()
{
	if (!this.stale_iids || this.is_family)
		return;		// up to date or is family - don't want family to overwrite IIDs
	var i, len;
	for (i = 0, len = this.instances.length; i < len; i++)
		this.instances[i].iid = i;
	this.stale_iids = false;
};
cr.type_getCurrentSol = function ()
{
    return this.solstack[this.cur_sol];
};
cr.type_pushCleanSol = function ()
{
    this.cur_sol++;
    if (this.cur_sol === this.solstack.length)
        this.solstack.push(new cr.selection(this));
    else
        this.solstack[this.cur_sol].select_all = true;  // else clear next SOL
};
cr.type_pushCopySol = function ()
{
    this.cur_sol++;
    if (this.cur_sol === this.solstack.length)
        this.solstack.push(new cr.selection(this));
    var clonesol = this.solstack[this.cur_sol];
    var prevsol = this.solstack[this.cur_sol - 1];
    if (prevsol.select_all)
        clonesol.select_all = true;
    else
    {
        clonesol.select_all = false;
        clonesol.instances = prevsol.instances.slice(0);    // copy elements
    }
};
cr.type_popSol = function ()
{
;
    this.cur_sol--;
};
cr.type_getBehaviorByName = function (behname)
{
    var i, len, j, lenj, f, index = 0;
	if (!this.is_family)
	{
		for (i = 0, len = this.families.length; i < len; i++)
		{
			f = this.families[i];
			for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
			{
				if (behname === f.behaviors[j].name)
				{
					this.extra.lastBehIndex = index;
					return f.behaviors[j];
				}
				index++;
			}
		}
	}
    for (i = 0, len = this.behaviors.length; i < len; i++) {
        if (behname === this.behaviors[i].name)
		{
			this.extra.lastBehIndex = index;
            return this.behaviors[i];
		}
		index++;
    }
	return null;
};
cr.type_getBehaviorIndexByName = function (behname)
{
    var b = this.getBehaviorByName(behname);
	if (b)
		return this.extra.lastBehIndex;
	else
		return -1;
};
cr.do_cmp = function (x, cmp, y)
{
	if (typeof x === "undefined" || typeof y === "undefined")
		return false;
    switch (cmp)
    {
        case 0:     // equal
            return x === y;
        case 1:     // not equal
            return x !== y;
        case 2:     // less
            return x < y;
        case 3:     // less/equal
            return x <= y;
        case 4:     // greater
            return x > y;
        case 5:     // greater/equal
            return x >= y;
        default:
;
            return false;
    }
};
;
;
cr.plugins_.Arr = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Arr.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.cx = this.properties[0];
		this.cy = this.properties[1];
		this.cz = this.properties[2];
		if (!this.arr)
			this.arr = [];
		var a = this.arr;
		a.length = this.cx;
		var x, y, z;
		for (x = 0; x < this.cx; x++)
		{
			if (!a[x])
				a[x] = [];
			a[x].length = this.cy;
			for (y = 0; y < this.cy; y++)
			{
				if (!a[x][y])
					a[x][y] = [];
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = 0;
			}
		}
		this.forX = 0;
		this.forY = 0;
		this.forZ = 0;
	};
	instanceProto.at = function (x, y, z)
	{
		x = Math.floor(x);
		y = Math.floor(y);
		z = Math.floor(z);
		if (x < 0)
			return 0;
		if (x > this.cx - 1)
			return 0;
		if (y < 0)
			return 0;
		if (y > this.cy - 1)
			return 0;
		if (z < 0)
			return 0;
		if (z > this.cz - 1)
			return 0;
		return this.arr[x][y][z];
	};
	instanceProto.set = function (x, y, z, val)
	{
		x = Math.floor(x);
		y = Math.floor(y);
		z = Math.floor(z);
		if (x < 0)
			return;
		if (x > this.cx - 1)
			return;
		if (y < 0)
			return;
		if (y > this.cy - 1)
			return;
		if (z < 0)
			return;
		if (z > this.cz - 1)
			return;
		this.arr[x][y][z] = val;
	};
	instanceProto.getAsJSON = function ()
	{
		return JSON.stringify({
			"c2array": true,
			"size": [this.cx, this.cy, this.cz],
			"data": this.arr
		});
	};
	pluginProto.cnds = {};
	var cnds = pluginProto.cnds;
	cnds.CompareX = function (x, cmp, val)
	{
		return cr.do_cmp(this.at(x, 0, 0), cmp, val);
	};
	cnds.CompareXY = function (x, y, cmp, val)
	{
		return cr.do_cmp(this.at(x, y, 0), cmp, val);
	};
	cnds.CompareXYZ = function (x, y, z, cmp, val)
	{
		return cr.do_cmp(this.at(x, y, z), cmp, val);
	};
	instanceProto.doForEachTrigger = function (current_event)
	{
		this.runtime.pushCopySol(current_event.solModifiers);
		current_event.retrigger();
		this.runtime.popSol(current_event.solModifiers);
	};
	cnds.ArrForEach = function (dims)
	{
        var current_event = this.runtime.getCurrentEventStack().current_event;
		this.forX = 0;
		this.forY = 0;
		this.forZ = 0;
		switch (dims) {
		case 0:
			for (this.forX = 0; this.forX < this.cx; this.forX++)
			{
				for (this.forY = 0; this.forY < this.cy; this.forY++)
				{
					for (this.forZ = 0; this.forZ < this.cz; this.forZ++)
					{
						this.doForEachTrigger(current_event);
					}
				}
			}
			break;
		case 1:
			for (this.forX = 0; this.forX < this.cx; this.forX++)
			{
				for (this.forY = 0; this.forY < this.cy; this.forY++)
				{
					this.doForEachTrigger(current_event);
				}
			}
			break;
		case 2:
			for (this.forX = 0; this.forX < this.cx; this.forX++)
			{
				this.doForEachTrigger(current_event);
			}
			break;
		}
		this.forX = 0;
		this.forY = 0;
		this.forZ = 0;
		return false;
	};
	cnds.CompareCurrent = function (cmp, val)
	{
		return cr.do_cmp(this.at(this.forX, this.forY, this.forZ), cmp, val);
	};
	cnds.Contains = function(val)
	{
		var x, y, z;
		for (x = 0; x < this.cx; x++)
		{
			for (y = 0; y < this.cy; y++)
			{
				for (z = 0; z < this.cz; z++)
				{
					if (this.arr[x][y][z] === val)
						return true;
				}
			}
		}
		return false;
	};
	cnds.IsEmpty = function ()
	{
		return this.cx === 0 || this.cy === 0 || this.cz === 0;
	};
	pluginProto.acts = {};
	var acts = pluginProto.acts;
	acts.Clear = function ()
	{
		var x, y, z;
		for (x = 0; x < this.cx; x++)
			for (y = 0; y < this.cy; y++)
				for (z = 0; z < this.cz; z++)
					this.arr[x][y][z] = 0;
	};
	acts.SetSize = function (w, h, d)
	{
		if (w < 0) w = 0;
		if (h < 0) h = 0;
		if (d < 0) d = 0;
		if (this.cx === w && this.cy === h && this.cz === d)
			return;		// no change
		this.cx = w;
		this.cy = h;
		this.cz = d;
		var x, y, z;
		var a = this.arr;
		a.length = w;
		for (x = 0; x < this.cx; x++)
		{
			if (cr.is_undefined(a[x]))
				a[x] = [];
			a[x].length = h;
			for (y = 0; y < this.cy; y++)
			{
				if (cr.is_undefined(a[x][y]))
					a[x][y] = [];
				a[x][y].length = d;
				for (z = 0; z < this.cz; z++)
				{
					if (cr.is_undefined(a[x][y][z]))
						a[x][y][z] = 0;
				}
			}
		}
	};
	acts.SetX = function (x, val)
	{
		this.set(x, 0, 0, val);
	};
	acts.SetXY = function (x, y, val)
	{
		this.set(x, y, 0, val);
	};
	acts.SetXYZ = function (x, y, z, val)
	{
		this.set(x, y, z, val);
	};
	acts.Push = function (where, value, axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		switch (axis) {
		case 0:	// X axis
			if (where === 0)	// back
			{
				x = a.length;
				a.push([]);
			}
			else				// front
			{
				x = 0;
				a.unshift([]);
			}
			a[x].length = this.cy;
			for ( ; y < this.cy; y++)
			{
				a[x][y] = [];
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cx++;
			break;
		case 1: // Y axis
			for ( ; x < this.cx; x++)
			{
				if (where === 0)	// back
				{
					y = a[x].length;
					a[x].push([]);
				}
				else				// front
				{
					y = 0;
					a[x].unshift([]);
				}
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cy++;
			break;
		case 2:	// Z axis
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					if (where === 0)	// back
					{
						a[x][y].push(value);
					}
					else				// front
					{
						a[x][y].unshift(value);
					}
				}
			}
			this.cz++;
			break;
		}
	};
	acts.Pop = function (where, axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		switch (axis) {
		case 0:	// X axis
			if (this.cx === 0)
				break;
			if (where === 0)	// back
			{
				a.pop();
			}
			else				// front
			{
				a.shift();
			}
			this.cx--;
			break;
		case 1: // Y axis
			if (this.cy === 0)
				break;
			for ( ; x < this.cx; x++)
			{
				if (where === 0)	// back
				{
					a[x].pop();
				}
				else				// front
				{
					a[x].shift();
				}
			}
			this.cy--;
			break;
		case 2:	// Z axis
			if (this.cz === 0)
				break;
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					if (where === 0)	// back
					{
						a[x][y].pop();
					}
					else				// front
					{
						a[x][y].shift();
					}
				}
			}
			this.cz--;
			break;
		}
	};
	acts.Reverse = function (axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		if (this.cx === 0 || this.cy === 0 || this.cz === 0)
			return;		// no point reversing empty array
		switch (axis) {
		case 0:	// X axis
			a.reverse();
			break;
		case 1: // Y axis
			for ( ; x < this.cx; x++)
				a[x].reverse();
			break;
		case 2:	// Z axis
			for ( ; x < this.cx; x++)
				for (y = 0; y < this.cy; y++)
					a[x][y].reverse();
			this.cz--;
			break;
		}
	};
	function compareValues(va, vb)
	{
		if (cr.is_number(va) && cr.is_number(vb))
			return va - vb;
		else
		{
			var sa = "" + va;
			var sb = "" + vb;
			if (sa < sb)
				return -1;
			else if (sa > sb)
				return 1;
			else
				return 0;
		}
	}
	acts.Sort = function (axis)
	{
		var x = 0, y = 0, z = 0;
		var a = this.arr;
		if (this.cx === 0 || this.cy === 0 || this.cz === 0)
			return;		// no point sorting empty array
		switch (axis) {
		case 0:	// X axis
			a.sort(function (a, b) {
				return compareValues(a[0][0], b[0][0]);
			});
			break;
		case 1: // Y axis
			for ( ; x < this.cx; x++)
			{
				a[x].sort(function (a, b) {
					return compareValues(a[0], b[0]);
				});
			}
			break;
		case 2:	// Z axis
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					a[x][y].sort(compareValues);
				}
			}
			break;
		}
	};
	acts.Delete = function (index, axis)
	{
		var x = 0, y = 0, z = 0;
		index = Math.floor(index);
		var a = this.arr;
		if (index < 0)
			return;
		switch (axis) {
		case 0:	// X axis
			if (index >= this.cx)
				break;
			a.splice(index, 1);
			this.cx--;
			break;
		case 1: // Y axis
			if (index >= this.cy)
				break;
			for ( ; x < this.cx; x++)
			{
				a[x].splice(index, 1);
			}
			this.cy--;
			break;
		case 2:	// Z axis
			if (index >= this.cz)
				break;
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					a[x][y].splice(index, 1);
				}
			}
			this.cz--;
			break;
		}
	};
	acts.Insert = function (value, index, axis)
	{
		var x = 0, y = 0, z = 0;
		index = Math.floor(index);
		var a = this.arr;
		if (index < 0)
			return;
		switch (axis) {
		case 0:	// X axis
			if (index > this.cx)
				return;
			x = index;
			a.splice(x, 0, []);
			a[x].length = this.cy;
			for ( ; y < this.cy; y++)
			{
				a[x][y] = [];
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cx++;
			break;
		case 1: // Y axis
			if (index > this.cy)
				return;
			for ( ; x < this.cx; x++)
			{
				y = index;
				a[x].splice(y, 0, []);
				a[x][y].length = this.cz;
				for (z = 0; z < this.cz; z++)
					a[x][y][z] = value;
			}
			this.cy++;
			break;
		case 2:	// Z axis
			if (index > this.cz)
				return;
			for ( ; x < this.cx; x++)
			{
				for (y = 0; y < this.cy; y++)
				{
					a[x][y].splice(index, 0, value);
				}
			}
			this.cz++;
			break;
		}
	};
	acts.JSONLoad = function (json_)
	{
		var o;
		try {
			o = JSON.parse(json_);
		}
		catch(e) { return; }
		if (!o["c2array"])		// presumably not a c2array object
			return;
		var sz = o["size"];
		this.cx = sz[0];
		this.cy = sz[1];
		this.cz = sz[2];
		this.arr = o["data"];
	};
	acts.JSONDownload = function (axes)
	{
		var str = 'data:text/html,' + encodeURIComponent("<p><a download='data.json' href='data:application/json,"
				+ this.getAsJSON()
				+ "'>Download link</a></p><p>Left click the link in Chrome, or in other browsers right-click and select 'Save link'</p>");
		window.open(str);
	};
	pluginProto.exps = {};
	var exps = pluginProto.exps;
	exps.At = function (ret, x, y_, z_)
	{
		var y = y_ || 0;
		var z = z_ || 0;
		ret.set_any(this.at(x, y, z));
	};
	exps.Width = function (ret)
	{
		ret.set_int(this.cx);
	};
	exps.Height = function (ret)
	{
		ret.set_int(this.cy);
	};
	exps.Depth = function (ret)
	{
		ret.set_int(this.cz);
	};
	exps.CurX = function (ret)
	{
		ret.set_int(this.forX);
	};
	exps.CurY = function (ret)
	{
		ret.set_int(this.forY);
	};
	exps.CurZ = function (ret)
	{
		ret.set_int(this.forZ);
	};
	exps.CurValue = function (ret)
	{
		ret.set_any(this.at(this.forX, this.forY, this.forZ));
	};
	exps.Front = function (ret)
	{
		ret.set_any(this.at(0, 0, 0));
	};
	exps.Back = function (ret)
	{
		ret.set_any(this.at(this.cx - 1, 0, 0));
	};
	exps.IndexOf = function (ret, v)
	{
		for (var i = 0; i < this.cx; i++)
		{
			if (this.arr[i][0][0] === v)
			{
				ret.set_int(i);
				return;
			}
		}
		ret.set_int(-1);
	};
	exps.LastIndexOf = function (ret, v)
	{
		for (var i = this.cx - 1; i >= 0; i--)
		{
			if (this.arr[i][0][0] === v)
			{
				ret.set_int(i);
				return;
			}
		}
		ret.set_int(-1);
	};
	exps.AsJSON = function (ret)
	{
		ret.set_string(this.getAsJSON());
	};
}());
;
;
cr.plugins_.Audio = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Audio.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	var audRuntime = null;
	var audInst = null;
	var audTag = "";
	var appPath = "";			// for PhoneGap only
	var API_HTML5 = 0;
	var API_WEBAUDIO = 1;
	var API_PHONEGAP = 2;
	var API_APPMOBI = 3;
	var api = API_HTML5;
	var context = null;
	var audioBuffers = [];		// cache of buffers
	var audioInstances = [];	// cache of instances
	var lastAudio = null;
	var useOgg = false;			// determined at create time
	var timescale_mode = 0;
	var silent = false;
	var C2AudioBuffer = function (src_, is_music)
	{
		this.src = src_;
		this.myapi = api;
		this.is_music = is_music;
		this.added_end_listener = false;
		if (api === API_WEBAUDIO && is_music)
			this.myapi = API_HTML5;
		this.bufferObject = null;
		var request;
		switch (this.myapi) {
		case API_HTML5:
			if (is_music && audRuntime.isCocoonJs)
				ext["IDTK_APP"]["makeCall"]("addForceMusic", src_);
			this.bufferObject = new Audio();
			this.bufferObject.autoplay = false;	// this is only a source buffer, not an instance
			this.bufferObject.preload = "auto";
			this.bufferObject.src = src_;
			break;
		case API_WEBAUDIO:
			request = new XMLHttpRequest();
			request.open("GET", src_, true);
			request.responseType = "arraybuffer";
			request.onload = (function (self) { return function () {
				context["decodeAudioData"](request.response, function (buffer) {
						self.bufferObject = buffer;
						if (!cr.is_undefined(self.playTagWhenReady))
						{
							var a = new C2AudioInstance(self, self.playTagWhenReady);
							a.play(self.loopWhenReady);
							audioInstances.push(a);
						}
					});
			}; })(this);
			request.send();
			break;
		case API_PHONEGAP:
			this.bufferObject = true;
			break;
		case API_APPMOBI:
			this.bufferObject = true;
			break;
		}
	};
	C2AudioBuffer.prototype.isLoaded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.bufferObject["readyState"] === 4;	// HAVE_ENOUGH_DATA
		case API_WEBAUDIO:
			return !!this.bufferObject;			// null until AJAX request completes
		case API_PHONEGAP:
			return true;
		case API_APPMOBI:
			return true;
		}
		return false;
	};
	var C2AudioInstance = function (buffer_, tag_)
	{
		this.tag = tag_;
		this.fresh = true;
		this.stopped = true;
		this.src = buffer_.src;
		this.buffer = buffer_;
		this.myapi = buffer_.myapi;
		this.is_music = buffer_.is_music;
		this.playbackRate = 1;
		this.pgended = true;			// for PhoneGap only: ended flag
		this.resume_me = false;			// make sure resumes when leaving suspend
		this.looping = false;
		this.volume = 1;
		this.mutevol = 1;
		this.startTime = audRuntime.kahanTime.sum;
		this.instanceObject = null;
		var add_end_listener = false;
		switch (this.myapi) {
		case API_HTML5:
			if (this.is_music)
			{
				this.instanceObject = buffer_.bufferObject;
				add_end_listener = !buffer_.added_end_listener;
				buffer_.added_end_listener = true;
			}
			else
			{
				this.instanceObject = new Audio();
				this.instanceObject.autoplay = false;
				this.instanceObject.src = buffer_.bufferObject.src;
				add_end_listener = true;
			}
			if (add_end_listener)
			{
				this.instanceObject.addEventListener('ended', (function (self) {
					return function () {
						audTag = self.tag;
						self.stopped = true;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
					};
				})(this));
			}
			break;
		case API_WEBAUDIO:
			if (buffer_.bufferObject)
			{
				this.instanceObject = context["createBufferSource"]();
				this.instanceObject["buffer"] = buffer_.bufferObject;
				this.instanceObject["connect"](context["destination"]);
			}
			break;
		case API_PHONEGAP:
			this.instanceObject = new window["Media"](appPath + this.src, null, null, (function (self) {
				return function (status) {
					if (status === window["Media"]["MEDIA_STOPPED"])
					{
						self.pgended = true;
						self.stopped = true;
						audTag = self.tag;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
					}
				};
			})(this));
			break;
		case API_APPMOBI:
			this.instanceObject = true;
			break;
		}
	};
	C2AudioInstance.prototype.hasEnded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.instanceObject.ended;
		case API_WEBAUDIO:
			if (!this.fresh && !this.stopped && this.instanceObject["loop"])
				return false;
			return (audRuntime.kahanTime.sum - this.startTime) > this.buffer.bufferObject["duration"];
		case API_PHONEGAP:
			return this.pgended;
		case API_APPMOBI:
			true;	// recycling an AppMobi sound does not matter because it will just do another throwaway playSound
		}
		return true;
	};
	C2AudioInstance.prototype.canBeRecycled = function ()
	{
		if (this.fresh || this.stopped)
			return true;		// not yet used or is not playing
		return this.hasEnded();
	};
	C2AudioInstance.prototype.play = function (looping)
	{
		var instobj = this.instanceObject;
		this.looping = looping;
		switch (this.myapi) {
		case API_HTML5:
			if (instobj.playbackRate !== 1.0)
				instobj.playbackRate = 1.0;
			if (instobj.volume !== 1.0)
				instobj.volume = 1.0;
			if (instobj.loop !== looping)
				instobj.loop = looping;
			if (instobj.muted)
				instobj.muted = false;
			if (!this.fresh && this.stopped && instobj.currentTime !== 0)
			{
				try {
					instobj.currentTime = 0;
				}
				catch (err)
				{
;
				}
			}
			this.instanceObject.play();
			break;
		case API_WEBAUDIO:
			this.muted = false;
			this.volume = 1;
			this.mutevol = 1;
			if (!this.fresh)
			{
				this.instanceObject = context["createBufferSource"]();
				this.instanceObject["buffer"] = this.buffer.bufferObject;
				this.instanceObject["connect"](context["destination"]);
			}
			this.instanceObject.loop = looping;
			this.instanceObject["noteOn"](0);
			break;
		case API_PHONEGAP:
			if (!this.fresh && this.stopped)
				instobj["seekTo"](0);
			instobj["play"]();
			this.pgended = false;
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["playSound"](this.src);
			else
				AppMobi["player"]["playSound"](this.src);
			break;
		}
		this.playbackRate = 1;
		this.startTime = audRuntime.kahanTime.sum;
		this.fresh = false;
		this.stopped = false;
	};
	C2AudioInstance.prototype.stop = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			this.instanceObject["noteOff"](0);
			break;
		case API_PHONEGAP:
			this.instanceObject["stop"]();
			break;
		case API_APPMOBI:
			break;
		}
		this.stopped = true;
	};
	C2AudioInstance.prototype.setVolume = function (v)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.volume && this.instanceObject.volume !== v)
				this.instanceObject.volume = v;
			break;
		case API_WEBAUDIO:
			this.volume = v;
			this.instanceObject["gain"]["value"] = v * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setMuted = function (m)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.muted !== !!m)
				this.instanceObject.muted = !!m;
			break;
		case API_WEBAUDIO:
			this.mutevol = (m ? 0 : 1);
			this.instanceObject["gain"]["value"] = this.volume * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setLooping = function (l)
	{
		this.looping = l;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_WEBAUDIO:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setPlaybackRate = function (r)
	{
		this.playbackRate = r;
		this.updatePlaybackRate();
	};
	C2AudioInstance.prototype.updatePlaybackRate = function ()
	{
		var r = this.playbackRate;
		if ((timescale_mode === 1 && !this.is_music) || timescale_mode === 2)
			r *= audRuntime.timescale;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.playbackRate !== r)
				this.instanceObject.playbackRate = r;
			break;
		case API_WEBAUDIO:
			if (this.instanceObject["playbackRate"]["value"] !== r)
				this.instanceObject["playbackRate"]["value"] = r;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setSuspended = function (s)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (s)
			{
				if (!this.fresh && !this.stopped)
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_WEBAUDIO:
			if (s)
			{
				if (!this.fresh && !this.stopped)
				{
					this.instanceObject["noteOff"](0);
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = this.buffer.bufferObject;
					this.instanceObject["connect"](context["destination"]);
					this.instanceObject.loop = this.looping;
					this.instanceObject["noteOn"](0);
				}
			}
			break;
		case API_PHONEGAP:
			if (s)
			{
				if (!this.fresh && !this.stopped)
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_APPMOBI:
			break;
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		audRuntime = this.runtime;
		audInst = this;
		context = null;
		if (typeof AudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new AudioContext();
		}
		else if (typeof webkitAudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new webkitAudioContext();
		}
		if (api !== API_WEBAUDIO)
		{
			if (this.runtime.isPhoneGap)
				api = API_PHONEGAP;
			else if (this.runtime.isAppMobi)
				api = API_APPMOBI;
		}
		if (api === API_PHONEGAP)
		{
			appPath = location.href;
			var i = appPath.lastIndexOf("/");
			if (i > -1)
				appPath = appPath.substr(0, i + 1);
			appPath = appPath.replace("file://", "");
		}
		if (this.runtime.isDirectCanvas)
			useOgg = this.runtime.isAndroid;		// AAC on iOS, OGG on Android
		else
			useOgg = !!(new Audio().canPlayType('audio/ogg; codecs="vorbis"'));
		switch (api) {
		case API_HTML5:
;
			break;
		case API_WEBAUDIO:
;
			break;
		case API_PHONEGAP:
;
			break;
		case API_APPMOBI:
;
			break;
		default:
;
		}
		this.runtime.tickMe(this);
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function ()
	{
		timescale_mode = this.properties[0];	// 0 = off, 1 = sounds only, 2 = all
		this.runtime.addSuspendCallback(function(s)
		{
			audInst.onSuspend(s);
		});
	};
	instanceProto.onSuspend = function (s)
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].setSuspended(s);
	};
	instanceProto.tick = function ()
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.myapi !== API_HTML5 && a.myapi !== API_APPMOBI)
			{
				if (!a.fresh && !a.stopped && a.hasEnded())
				{
					a.stopped = true;
					audTag = a.tag;
					audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				}
			}
			if (timescale_mode !== 0)
				a.updatePlaybackRate();
		}
	};
	instanceProto.getAudioBuffer = function (src_, is_music)
	{
		var i, len, a;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			a = audioBuffers[i];
			if (a.src === src_)
				return a;
		}
		a = new C2AudioBuffer(src_, is_music);
		audioBuffers.push(a);
		return a;
	};
	instanceProto.getAudioInstance = function (src_, tag, is_music, looping)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.src === src_ && a.canBeRecycled())
			{
				a.tag = tag;
				return a;
			}
		}
		var b = this.getAudioBuffer(src_, is_music);
		if (!b.bufferObject)
		{
			if (tag !== "<preload>")
			{
				b.playTagWhenReady = tag;
				b.loopWhenReady = looping;
			}
			return null;
		}
		a = new C2AudioInstance(b, tag);
		audioInstances.push(a);
		return a;
	};
	var taggedAudio = [];
	instanceProto.getAudioByTag = function (tag)
	{
		taggedAudio.length = 0;
		if (!tag.length)
		{
			if (!lastAudio || lastAudio.hasEnded())
				return;
			else
			{
				taggedAudio.length = 1;
				taggedAudio[0] = lastAudio;
				return;
			}
		}
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (tag.toLowerCase() === a.tag.toLowerCase())
				taggedAudio.push(a);
		}
	};
	pluginProto.cnds = {};
	var cnds = pluginProto.cnds;
	cnds.OnEnded = function (t)
	{
		return audTag.toLowerCase() === t.toLowerCase();
	};
	cnds.PreloadsComplete = function ()
	{
		var i, len;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			if (!audioBuffers[i].isLoaded())
				return false;
		}
		return true;
	};
	pluginProto.acts = {};
	var acts = pluginProto.acts;
	acts.Play = function (file, looping, tag)
	{
		if (silent)
			return;
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0);
		if (!lastAudio)
			return;
		lastAudio.play(looping!==0);
	};
	acts.PlayByName = function (folder, filename, looping, tag)
	{
		if (silent)
			return;
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0);
		if (!lastAudio)
			return;
		lastAudio.play(looping!==0);
	};
	acts.SetLooping = function (tag, looping)
	{
		this.getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setLooping(looping === 0);
	};
	acts.SetMuted = function (tag, muted)
	{
		this.getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setMuted(muted === 0);
	};
	acts.SetVolume = function (tag, vol)
	{
		this.getAudioByTag(tag);
		var v = Math.pow(10, vol / 20);
		if (v < 0)
			v = 0;
		if (v > 1)
			v = 1;
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setVolume(v);
	};
	acts.Preload = function (file)
	{
		if (silent)
			return;
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	acts.PreloadByName = function (folder, filename)
	{
		if (silent)
			return;
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	acts.SetPlaybackRate = function (tag, rate)
	{
		this.getAudioByTag(tag);
		if (rate < 0.0)
			rate = 0;
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setPlaybackRate(rate);
	};
	acts.Stop = function (tag)
	{
		this.getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].stop();
	};
	acts.SetSilent = function (s)
	{
		var i, len;
		if (s === 2)					// toggling
			s = (silent ? 1 : 0);		// choose opposite state
		if (s === 0 && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setMuted(true);
			silent = true;
		}
		else if (s === 1 && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setMuted(false);
			silent = false;
		}
	};
	pluginProto.exps = {};
	var exps = pluginProto.exps;
}());
;
;
cr.plugins_.Keyboard = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Keyboard.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.keyMap = new Array(256);	// stores key up/down state
		this.usedKeys = new Array(256);
		this.triggerKey = 0;
		this.eventRan = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		if (!this.runtime.isDomFree)
		{
			jQuery(document).keydown(
				(function (self) {
					return function(info) {
						self.onKeyDown(info);
					};
				})(this)
			);
			jQuery(document).keyup(
				(function (self) {
					return function(info) {
						self.onKeyUp(info);
					};
				})(this)
			);
		}
	};
	instanceProto.onKeyDown = function (info)
	{
		if (this.keyMap[info.which])
		{
			if (this.usedKeys[info.which])
				info.preventDefault();
			return;
		}
		this.keyMap[info.which] = true;
		this.eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKey, this);
		this.triggerKey = info.which;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKey, this);
		if (this.eventRan)
		{
			this.usedKeys[info.which] = true;
			info.preventDefault();
		}
	};
	instanceProto.onKeyUp = function (info)
	{
		this.keyMap[info.which] = false;
		this.triggerKey = info.which;
		this.eventRan = false;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased, this);
		if (this.eventRan || this.usedKeys[info.which])
		{
			this.usedKeys[info.which] = true;
			info.preventDefault();
		}
	};
	pluginProto.cnds = {};
	var cnds = pluginProto.cnds;
	cnds.IsKeyDown = function(key)
	{
		return this.keyMap[key];
	};
	cnds.OnKey = function(key)
	{
		var ret = (key === this.triggerKey);
		this.eventRan = this.eventRan || ret;
		return ret;
	};
	cnds.OnAnyKey = function(key)
	{
		return true;
	};
	cnds.OnKeyReleased = function(key)
	{
		var ret = (key === this.triggerKey);
		this.eventRan = this.eventRan || ret;
		return ret;
	};
}());
;
;
cr.plugins_.Mouse = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Mouse.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.buttonMap = new Array(4);		// mouse down states
		this.mouseXcanvas = 0;				// mouse position relative to canvas
		this.mouseYcanvas = 0;
		this.triggerButton = 0;
		this.triggerType = 0;
		this.triggerDir = 0;
		this.handled = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		if (!this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				(function (self) {
					return function(info) {
						self.onMouseMove(info);
					};
				})(this)
			);
			jQuery(document).mousedown(
				(function (self) {
					return function(info) {
						self.onMouseDown(info);
					};
				})(this)
			);
			jQuery(document).mouseup(
				(function (self) {
					return function(info) {
						self.onMouseUp(info);
					};
				})(this)
			);
			jQuery(document).dblclick(
				(function (self) {
					return function(info) {
						self.onDoubleClick(info);
					};
				})(this)
			);
			var wheelevent = (function (self) {
								return function(info) {
									self.onWheel(info);
								};
							})(this);
			document.addEventListener("mousewheel", wheelevent, false);
			document.addEventListener("DOMMouseScroll", wheelevent, false);
		}
	};
	var dummyoffset = {left: 0, top: 0};
	instanceProto.onMouseMove = function(info)
	{
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		this.mouseXcanvas = info.pageX - offset.left;
		this.mouseYcanvas = info.pageY - offset.top;
	};
	instanceProto.mouseInGame = function ()
	{
		if (this.runtime.fullscreen_mode > 0)
			return true;
		return this.mouseXcanvas >= 0 && this.mouseYcanvas >= 0
		    && this.mouseXcanvas < this.runtime.width && this.mouseYcanvas < this.runtime.height;
	};
	instanceProto.onMouseDown = function(info)
	{
		if (!this.mouseInGame())
			return;
		if (window == window.top)
			info.preventDefault();
		this.buttonMap[info.which] = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnAnyClick, this);
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 0;					// single click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
	};
	instanceProto.onMouseUp = function(info)
	{
		if (!this.buttonMap[info.which])
			return;
		if (window == window.top)
			info.preventDefault();
		this.buttonMap[info.which] = false;
		this.triggerButton = info.which - 1;	// 1-based
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnRelease, this);
	};
	instanceProto.onDoubleClick = function(info)
	{
		if (!this.mouseInGame())
			return;
		info.preventDefault();
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 1;					// double click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
	};
	instanceProto.onWheel = function (info)
	{
		var delta = info.wheelDelta ? info.wheelDelta : info.detail ? -info.detail : 0;
		this.triggerDir = (delta < 0 ? 0 : 1);
		this.handled = false;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnWheel, this);
		if (this.handled)
			info.preventDefault();
	};
	pluginProto.cnds = {};
	var cnds = pluginProto.cnds;
	cnds.OnClick = function (button, type)
	{
		return button === this.triggerButton && type === this.triggerType;
	};
	cnds.OnAnyClick = function ()
	{
		return true;
	};
	cnds.IsButtonDown = function (button)
	{
		return this.buttonMap[button + 1];	// jQuery uses 1-based buttons for some reason
	};
	cnds.OnRelease = function (button)
	{
		return button === this.triggerButton;
	};
	cnds.IsOverObject = function (obj)
	{
		var cnd = this.runtime.getCurrentCondition();
		if (cr.is_undefined(cnd.extra.mouseOverInverted))
		{
			cnd.extra.mouseOverInverted = cnd.inverted;
			cnd.inverted = false;
		}
		var mx = this.mouseXcanvas;
		var my = this.mouseYcanvas;
		return this.runtime.testAndSelectCanvasPointOverlap(obj, mx, my, cnd.extra.mouseOverInverted);
	};
	cnds.OnObjectClicked = function (button, type, obj)
	{
		if (button !== this.triggerButton || type !== this.triggerType)
			return false;	// wrong click type
		return this.runtime.testAndSelectCanvasPointOverlap(obj, this.mouseXcanvas, this.mouseYcanvas, false);
	};
	cnds.OnWheel = function (dir)
	{
		this.handled = true;
		return dir === this.triggerDir;
	};
	pluginProto.acts = {};
	var acts = pluginProto.acts;
	acts.SetCursor = function (c)
	{
		var cursor_style = ["auto", "pointer", "text", "crosshair", "move", "help", "wait", "none"][c];
		this.runtime.canvas.style.cursor = cursor_style;
		if (this.runtime.overlay_canvas)
			this.runtime.overlay_canvas.style.cursor = cursor_style;
	};
	pluginProto.exps = {};
	var exps = pluginProto.exps;
	exps.X = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			else
				ret.set_float(0);
		}
	};
	exps.Y = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			else
				ret.set_float(0);
		}
	};
	exps.AbsoluteX = function (ret)
	{
		ret.set_float(this.mouseXcanvas);
	};
	exps.AbsoluteY = function (ret)
	{
		ret.set_float(this.mouseYcanvas);
	};
}());
;
;
cr.plugins_.Sprite = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Sprite.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		var i, leni, j, lenj;
		var anim, frame, animobj, frameobj, wt, uv;
		for (i = 0, leni = this.animations.length; i < leni; i++)
		{
			anim = this.animations[i];
			animobj = {};
			animobj.name = anim[0];
			animobj.speed = anim[1];
			animobj.loop = anim[2];
			animobj.repeatcount = anim[3];
			animobj.repeatto = anim[4];
			animobj.pingpong = anim[5];
			animobj.frames = [];
			for (j = 0, lenj = anim[6].length; j < lenj; j++)
			{
				frame = anim[6][j];
				frameobj = {};
				frameobj.texture_file = frame[0];
				frameobj.texture_filesize = frame[1];
				frameobj.offx = frame[2];
				frameobj.offy = frame[3];
				frameobj.width = frame[4];
				frameobj.height = frame[5];
				frameobj.duration = frame[6];
				frameobj.hotspotX = frame[7];
				frameobj.hotspotY = frame[8];
				frameobj.image_points = frame[9];
				frameobj.poly_pts = frame[10];
				frameobj.spritesheeted = (frameobj.width !== 0);
				uv = {};
				uv.left = 0;
				uv.top = 0;
				uv.right = 1;
				uv.bottom = 1;
				frameobj.sheetTex = uv;
				frameobj.webGL_texture = null;
				wt = this.runtime.findWaitingTexture(frame[0]);
				if (wt)
				{
					frameobj.texture_img = wt;
				}
				else
				{
					frameobj.texture_img = new Image();
					frameobj.texture_img.src = frame[0];
					frameobj.texture_img.cr_filesize = frame[1];
					frameobj.texture_img.c2webGL_texture = null;
					this.runtime.wait_for_textures.push(frameobj.texture_img);
				}
				cr.seal(frameobj);
				animobj.frames.push(frameobj);
			}
			cr.seal(animobj);
			this.animations[i] = animobj;		// swap array data for object
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.collision_poly = new cr.CollisionPoly(this.type.animations[0].frames[0].poly_pts);
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);	// 0=visible, 1=invisible
		this.compositeOp = cr.effectToCompositeOp(this.properties[2]);
		cr.setGLBlend(this, this.properties[2], this.runtime.gl);
		this.isTicking = false;
		this.inAnimTrigger = false;
		if (!(this.type.animations.length === 1 && this.type.animations[0].frames.length === 1) && this.type.animations[0].speed !== 0)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		this.cur_animation = this.type.animations[0];
		this.cur_frame = this.properties[1];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (this.cur_frame !== 0)
		{
			var curanimframe = this.cur_animation.frames[this.cur_frame];
			this.collision_poly.set_pts(curanimframe.poly_pts);
			this.hotspotX = curanimframe.hotspotX;
			this.hotspotY = curanimframe.hotspotY;
		}
		this.cur_anim_speed = this.type.animations[0].speed;
		this.frameStart = this.getNowTime();
		this.animPlaying = true;
		this.animRepeats = 0;
		this.animForwards = true;
		this.animTriggerName = "";
		this.changeAnimName = "";
		this.changeAnimFrom = 0;
		this.changeAnimFrame = -1;
		var i, leni, j, lenj;
		var anim, frame, uv, maintex;
		for (i = 0, leni = this.type.animations.length; i < leni; i++)
		{
			anim = this.type.animations[i];
			for (j = 0, lenj = anim.frames.length; j < lenj; j++)
			{
				frame = anim.frames[j];
				if (frame.width === 0)
				{
					frame.width = frame.texture_img.width;
					frame.height = frame.texture_img.height;
				}
				if (frame.spritesheeted)
				{
					maintex = frame.texture_img;
					uv = frame.sheetTex;
					uv.left = frame.offx / maintex.width;
					uv.top = frame.offy / maintex.height;
					uv.right = (frame.offx + frame.width) / maintex.width;
					uv.bottom = (frame.offy + frame.height) / maintex.height;
					if (frame.offx === 0 && frame.offy === 0 && frame.width === maintex.width && frame.height === maintex.height)
					{
						frame.spritesheeted = false;
					}
				}
				if (this.runtime.glwrap)
				{
					if (!frame.texture_img.c2webGL_texture)
					{
						frame.texture_img.c2webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling);
					}
					frame.webGL_texture = frame.texture_img.c2webGL_texture;
				}
			}
		}
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
	};
	instanceProto.animationFinish = function (reverse)
	{
		this.cur_frame = reverse ? 0 : this.cur_animation.frames.length - 1;
		this.animTriggerName = this.cur_animation.name;
		this.inAnimTrigger = true;
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished, this);
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnimFinished, this);
		this.inAnimTrigger = false;
		if (!this.changeAnimName.length && this.changeAnimFrame === -1)
			this.animPlaying = false;
		this.animRepeats = 0;
	};
	instanceProto.getNowTime = function()
	{
		return (Date.now() - this.runtime.start_time) / 1000.0;
	};
	instanceProto.tick = function()
	{
		if (this.changeAnimName.length)
			this.doChangeAnim();
		if (this.changeAnimFrame >= 0)
			this.doChangeAnimFrame();
		var now = this.getNowTime();
		var cur_animation = this.cur_animation;
		var prev_frame = cur_animation.frames[this.cur_frame];
		var next_frame;
		var cur_frame_time = prev_frame.duration / this.cur_anim_speed;
		var cur_timescale = this.runtime.timescale;
		if (this.my_timescale !== -1.0)
			cur_timescale = this.my_timescale;
		cur_frame_time /= (cur_timescale === 0 ? 0.000000001 : cur_timescale);
		if (this.animPlaying && now >= this.frameStart + cur_frame_time)
		{
			if (this.animForwards)
			{
				this.cur_frame++;
			}
			else
			{
				this.cur_frame--;
			}
			this.frameStart += cur_frame_time;
			if (this.cur_frame >= cur_animation.frames.length)
			{
				if (cur_animation.pingpong)
				{
					this.animForwards = false;
					this.cur_frame = cur_animation.frames.length - 2;
				}
				else if (cur_animation.loop)
				{
					this.cur_frame = cur_animation.repeatto;
				}
				else
				{
					this.animRepeats++;
					if (this.animRepeats >= cur_animation.repeatcount)
					{
						this.animationFinish(false);
					}
					else
					{
						this.cur_frame = cur_animation.repeatto;
					}
				}
			}
			if (this.cur_frame < 0)
			{
				if (cur_animation.pingpong)
				{
					this.cur_frame = 1;
					this.animForwards = true;
					if (!cur_animation.loop)
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
					}
				}
				else
				{
					if (cur_animation.loop)
					{
						this.cur_frame = cur_animation.repeatto;
					}
					else
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
						else
						{
							this.cur_frame = cur_animation.repeatto;
						}
					}
				}
			}
			if (this.cur_frame < 0)
				this.cur_frame = 0;
			else if (this.cur_frame >= cur_animation.frames.length)
				this.cur_frame = cur_animation.frames.length - 1;
			if (now > this.frameStart + ((cur_animation.frames[this.cur_frame].duration / this.cur_anim_speed) / (cur_timescale === 0 ? 0.000000001 : cur_timescale)))
			{
				this.frameStart = now;
			}
			next_frame = cur_animation.frames[this.cur_frame];
			this.OnFrameChanged(prev_frame, next_frame);
			this.runtime.redraw = true;
		}
	};
	instanceProto.doChangeAnim = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var i, len, a, anim = null;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (a.name.toLowerCase() === this.changeAnimName.toLowerCase())
			{
				anim = a;
				break;
			}
		}
		this.changeAnimName = "";
		if (!anim)
			return;
		if (anim.name.toLowerCase() === this.cur_animation.name.toLowerCase())
			return;
		this.cur_animation = anim;
		this.cur_anim_speed = anim.speed;
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (this.changeAnimFrom === 1)
			this.cur_frame = 0;
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		this.animForwards = true;
		this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
		this.runtime.redraw = true;
	};
	instanceProto.doChangeAnimFrame = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var prev_frame_number = this.cur_frame;
		this.cur_frame = cr.floor(this.changeAnimFrame);
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (prev_frame_number !== this.cur_frame)
		{
			this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
			this.frameStart = this.getNowTime();
			this.runtime.redraw = true;
		}
		this.changeAnimFrame = -1;
	};
	instanceProto.OnFrameChanged = function (prev_frame, next_frame)
	{
		var oldw = prev_frame.width;
		var oldh = prev_frame.height;
		var neww = next_frame.width;
		var newh = next_frame.height;
		if (oldw != neww)
			this.width *= (neww / oldw);
		if (oldh != newh)
			this.height *= (newh / oldh);
		this.hotspotX = next_frame.hotspotX;
		this.hotspotY = next_frame.hotspotY;
		this.collision_poly.set_pts(next_frame.poly_pts);
		this.set_bbox_changed();
		this.curFrame = next_frame;
		this.curWebGLTexture = next_frame.webGL_texture;
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnFrameChanged, this);
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		ctx.globalCompositeOperation = this.compositeOp;
		var cur_frame = this.curFrame;
		var spritesheeted = cur_frame.spritesheeted;
		var cur_image = cur_frame.texture_img;
		var myx = this.x;
		var myy = this.y;
		var w = this.width;
		var h = this.height;
		if (this.angle === 0 && w >= 0 && h >= 0)
		{
			myx -= this.hotspotX * w;
			myy -= this.hotspotY * h;
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 myx, myy, w, h);
			}
			else
			{
				ctx.drawImage(cur_image, myx, myy, w, h);
			}
		}
		else
		{
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			ctx.save();
			var widthfactor = w > 0 ? 1 : -1;
			var heightfactor = h > 0 ? 1 : -1;
			ctx.translate(myx, myy);
			if (widthfactor !== 1 || heightfactor !== 1)
				ctx.scale(widthfactor, heightfactor);
			ctx.rotate(this.angle * widthfactor * heightfactor);
			var drawx = 0 - (this.hotspotX * cr.abs(w))
			var drawy = 0 - (this.hotspotY * cr.abs(h));
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 drawx, drawy, cr.abs(w), cr.abs(h));
			}
			else
			{
				ctx.drawImage(cur_image, drawx, drawy, cr.abs(w), cr.abs(h));
			}
			ctx.restore();
		}
		/*
		ctx.strokeStyle = "#f00";
		ctx.lineWidth = 3;
		ctx.beginPath();
		this.collision_poly.cache_poly(this.width, this.height, this.angle);
		var i, len, ax, ay, bx, by;
		for (i = 0, len = this.collision_poly.pts_count; i < len; i++)
		{
			ax = this.collision_poly.pts_cache[i*2] + this.x;
			ay = this.collision_poly.pts_cache[i*2+1] + this.y;
			bx = this.collision_poly.pts_cache[((i+1)%len)*2] + this.x;
			by = this.collision_poly.pts_cache[((i+1)%len)*2+1] + this.y;
			ctx.moveTo(ax, ay);
			ctx.lineTo(bx, by);
		}
		ctx.stroke();
		ctx.closePath();
		*/
		/*
		if (this.behavior_insts.length >= 1 && this.behavior_insts[0].draw)
		{
			this.behavior_insts[0].draw(ctx);
		}
		*/
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setBlend(this.srcBlend, this.destBlend);
		glw.setTexture(this.curWebGLTexture);
		glw.setOpacity(this.opacity);
		var cur_frame = this.curFrame;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = ((this.x + 0.5) | 0) - this.x;
			var oy = ((this.y + 0.5) | 0) - this.y;
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, cur_frame.sheetTex);
			else
				glw.quad(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy);
		}
		else
		{
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, cur_frame.sheetTex);
			else
				glw.quad(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly);
		}
	};
	instanceProto.getImagePointIndexByName = function(name_)
	{
		var cur_frame = this.curFrame;
		var i, len;
		for (i = 0, len = cur_frame.image_points.length; i < len; i++)
		{
			if (name_.toLowerCase() === cur_frame.image_points[i][0].toLowerCase())
				return i;
		}
		return -1;
	};
	instanceProto.getImagePoint = function(imgpt, getX)
	{
		var cur_frame = this.curFrame;
		var image_points = cur_frame.image_points;
		var index;
		if (cr.is_string(imgpt))
			index = this.getImagePointIndexByName(imgpt);
		else
			index = imgpt - 1;	// 0 is origin
		index = cr.floor(index);
		if (index < 0 || index >= image_points.length)
			return getX ? this.x : this.y;	// return origin
		var x = (image_points[index][1] - cur_frame.hotspotX) * this.width;
		var y = image_points[index][2];
		y = (y - cur_frame.hotspotY) * this.height;
		var cosa = Math.cos(this.angle);
		var sina = Math.sin(this.angle);
		var x_temp = (x * cosa) - (y * sina);
		y = (y * cosa) + (x * sina);
		x = x_temp;
		x += this.x;
		y += this.y;
		return getX ? x : y;
	};
	pluginProto.cnds = {};
	var cnds = pluginProto.cnds;
	function collmemory_add(collmemory, a, b)
	{
		collmemory.push([a, b]);
	};
	function collmemory_remove(collmemory, a, b)
	{
		var i, j = 0, len, entry;
		for (i = 0, len = collmemory.length; i < len; i++)
		{
			entry = collmemory[i];
			if (!((entry[0] === a && entry[1] === b) || (entry[0] === b && entry[1] === a)))
			{
				collmemory[j] = collmemory[i];
				j++;
			}
		}
		collmemory.length = j;
	};
	function collmemory_removeInstance(collmemory, inst)
	{
		var i, j = 0, len, entry;
		for (i = 0, len = collmemory.length; i < len; i++)
		{
			entry = collmemory[i];
			if (entry[0] !== inst && entry[1] !== inst)
			{
				collmemory[j] = collmemory[i];
				j++;
			}
		}
		collmemory.length = j;
	};
	function collmemory_has(collmemory, a, b)
	{
		var i, len, entry;
		for (i = 0, len = collmemory.length; i < len; i++)
		{
			entry = collmemory[i];
			if ((entry[0] === a && entry[1] === b) || (entry[0] === b && entry[1] === a))
				return true;
		}
		return false;
	};
	cnds.OnCollision = function (rtype)
	{
		if (!rtype)
			return false;
		var runtime = this.runtime;
		var cnd = runtime.getCurrentCondition();
		var ltype = cnd.type;
		if (!cnd.extra.collmemory)
		{
			cnd.extra.collmemory = [];
			runtime.addDestroyCallback((function (collmemory) {
				return function(inst) {
					collmemory_removeInstance(collmemory, inst);
				};
			})(cnd.extra.collmemory));
		}
		var lsol = ltype.getCurrentSol();
		var rsol = rtype.getCurrentSol();
		var linstances = lsol.getObjects();
		var rinstances = rsol.getObjects();
		var l, lenl, linst, r, lenr, rinst;
		var curlsol, currsol;
		var current_event = runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		for (l = 0, lenl = linstances.length; l < lenl; l++)
		{
			linst = linstances[l];
			for (r = 0, lenr = rinstances.length; r < lenr; r++)
			{
				rinst = rinstances[r];
				if (runtime.testOverlap(linst, rinst) || runtime.checkRegisteredCollision(linst, rinst))
				{
					if (!collmemory_has(cnd.extra.collmemory, linst, rinst))
					{
						collmemory_add(cnd.extra.collmemory, linst, rinst);
						runtime.pushCopySol(current_event.solModifiers);
						curlsol = ltype.getCurrentSol();
						currsol = rtype.getCurrentSol();
						curlsol.select_all = false;
						currsol.select_all = false;
						if (ltype === rtype)
						{
							curlsol.instances.length = 2;	// just use lsol, is same reference as rsol
							curlsol.instances[0] = linst;
							curlsol.instances[1] = rinst;
						}
						else
						{
							curlsol.instances.length = 1;
							currsol.instances.length = 1;
							curlsol.instances[0] = linst;
							currsol.instances[0] = rinst;
						}
						current_event.retrigger();
						runtime.popSol(current_event.solModifiers);
					}
				}
				else
				{
					collmemory_remove(cnd.extra.collmemory, linst, rinst);
				}
			}
		}
		return false;
	};
	var rpicktype = null;
	var rtopick = new cr.ObjectSet();
	var needscollisionfinish = false;
	function DoOverlapCondition(rtype, offx, offy)
	{
		if (!rtype)
			return false;
		var do_offset = (offx !== 0 || offy !== 0);
		var oldx, oldy, ret = false, r, lenr, rinst;
		var cnd = this.runtime.getCurrentCondition();
		var ltype = cnd.type;
		var inverted = cnd.inverted;
		var rsol = rtype.getCurrentSol();
		var rinstances = rsol.getObjects();
		rpicktype = rtype;
		needscollisionfinish = (ltype !== rtype && !inverted);
		if (do_offset)
		{
			oldx = this.x;
			oldy = this.y;
			this.x += offx;
			this.y += offy;
			this.set_bbox_changed();
		}
		for (r = 0, lenr = rinstances.length; r < lenr; r++)
		{
			rinst = rinstances[r];
			if (this.runtime.testOverlap(this, rinst))
			{
				ret = true;
				if (inverted)
					break;
				if (ltype !== rtype)
					rtopick.add(rinst);
			}
		}
		if (do_offset)
		{
			this.x = oldx;
			this.y = oldy;
			this.set_bbox_changed();
		}
		return ret;
	};
	typeProto.finish = function ()
	{
		if (!needscollisionfinish)
			return;
		var sol = rpicktype.getCurrentSol();
		sol.select_all = false;
		var topick = rtopick.valuesRef();
		sol.instances.length = topick.length;
		for (var i = 0, len = topick.length; i < len; i++)
		{
			sol.instances[i] = topick[i];
		}
		rtopick.clear();
		needscollisionfinish = false;
	};
	cnds.IsOverlapping = function (rtype)
	{
		return DoOverlapCondition.call(this, rtype, 0, 0);
	};
	cnds.IsOverlappingOffset = function (rtype, offx, offy)
	{
		return DoOverlapCondition.call(this, rtype, offx, offy);
	};
	cnds.IsAnimPlaying = function (animname)
	{
		return this.cur_animation.name.toLowerCase() === animname.toLowerCase();
	};
	cnds.CompareFrame = function (cmp, framenum)
	{
		return cr.do_cmp(this.cur_frame, cmp, framenum);
	};
	cnds.OnAnimFinished = function (animname)
	{
		return this.animTriggerName.toLowerCase() === animname.toLowerCase();
	};
	cnds.OnAnyAnimFinished = function ()
	{
		return true;
	};
	cnds.OnFrameChanged = function ()
	{
		return true;
	};
	cnds.IsMirrored = function ()
	{
		return this.width < 0;
	};
	cnds.IsFlipped = function ()
	{
		return this.height < 0;
	};
	cnds.OnURLLoaded = function ()
	{
		return true;
	};
	pluginProto.acts = {};
	var acts = pluginProto.acts;
	acts.Spawn = function (obj, layer, imgpt)
	{
		if (!obj || !layer)
			return;
		var inst = this.runtime.createInstance(obj, layer, this.getImagePoint(imgpt, true), this.getImagePoint(imgpt, false));
		if (!inst)
			return;
		inst.angle = this.angle;
		inst.set_bbox_changed();
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		var cur_act = this.runtime.getCurrentAction();
		var reset_sol = false;
		if (cr.is_undefined(cur_act.extra.Spawn_LastExec) || cur_act.extra.Spawn_LastExec < this.runtime.execcount)
		{
			reset_sol = true;
			cur_act.extra.Spawn_LastExec = this.runtime.execcount;
		}
		var sol = obj.getCurrentSol();
		sol.select_all = false;
		if (reset_sol)
		{
			sol.instances.length = 1;
			sol.instances[0] = inst;
		}
		else
			sol.instances.push(inst);
	};
	acts.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	acts.StopAnim = function ()
	{
		this.animPlaying = false;
	};
	acts.StartAnim = function (from)
	{
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		if (from === 1 && this.cur_frame !== 0)
		{
			var prev_frame = this.cur_animation.frames[this.cur_frame];
			this.cur_frame = 0;
			this.OnFrameChanged(prev_frame, this.cur_animation.frames[0]);
			this.runtime.redraw = true;
		}
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	acts.SetAnim = function (animname, from)
	{
		this.changeAnimName = animname;
		this.changeAnimFrom = from;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnim();
	};
	acts.SetAnimFrame = function (framenumber)
	{
		this.changeAnimFrame = framenumber;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnimFrame();
	};
	acts.SetAnimSpeed = function (s)
	{
		this.cur_anim_speed = cr.abs(s);
		this.animForwards = (s >= 0);
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	acts.SetMirrored = function (m)
	{
		var neww = cr.abs(this.width) * (m === 0 ? -1 : 1);
		if (this.width === neww)
			return;
		this.width = neww;
		this.set_bbox_changed();
	};
	acts.SetFlipped = function (f)
	{
		var newh = cr.abs(this.height) * (f === 0 ? -1 : 1);
		if (this.height === newh)
			return;
		this.height = newh;
		this.set_bbox_changed();
	};
	acts.SetScale = function (s)
	{
		var cur_frame = this.curFrame;
		var new_width = cur_frame.width * s;
		var new_height = cur_frame.height * s;
		if (new_width < 0)
			new_width = -new_width;
		if (new_height < 0)
			new_height = -new_height;
		if (this.width !== new_width || this.height !== new_height)
		{
			this.width = new_width;
			this.height = new_height;
			this.set_bbox_changed();
		}
	};
	acts.LoadURL = function (url_, resize_)
	{
		var img = new Image();
		var this_ = this;
		var curFrame_ = this.curFrame;
		img.onload = function ()
		{
			curFrame_.texture_img = img;
			curFrame_.offx = 0;
			curFrame_.offy = 0;
			curFrame_.width = img.width;
			curFrame_.height = img.height;
			curFrame_.spritesheeted = false;
			if (this_.runtime.glwrap)
			{
				curFrame_.webGL_texture = this_.runtime.glwrap.loadTexture(img, true, this_.runtime.linearSampling);
				if (this_.curFrame === curFrame_)
					this_.curWebGLTexture = curFrame_.webGL_texture;
			}
			if (resize_ === 0)		// resize to image size
			{
				this_.width = img.width;
				this_.height = img.height;
				this_.set_bbox_changed();
			}
			this_.runtime.redraw = true;
			this_.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, this_);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		img.src = url_;
	};
	pluginProto.exps = {};
	var exps = pluginProto.exps;
	exps.AnimationFrame = function (ret)
	{
		ret.set_int(this.cur_frame);
	};
	exps.AnimationFrameCount = function (ret)
	{
		ret.set_int(this.cur_animation.frames.length);
	};
	exps.AnimationName = function (ret)
	{
		ret.set_string(this.cur_animation.name);
	};
	exps.AnimationSpeed = function (ret)
	{
		ret.set_float(this.cur_anim_speed);
	};
	exps.ImagePointX = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, true));
	};
	exps.ImagePointY = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, false));
	};
	exps.ImageWidth = function (ret)
	{
		ret.set_float(this.curFrame.width);
	};
	exps.ImageHeight = function (ret)
	{
		ret.set_float(this.curFrame.height);
	};
}());
;
;
cr.plugins_.TextBox = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.TextBox.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var elemTypes = ["text", "password", "email", "number", "tel", "url"];
	if (navigator.userAgent.indexOf("MSIE 9") > -1)
	{
		elemTypes[2] = "text";
		elemTypes[3] = "text";
		elemTypes[4] = "text";
		elemTypes[5] = "text";
	}
	instanceProto.onCreate = function()
	{
		if (this.runtime.isDomFree)
			return;
		if (this.properties[7] === 6)	// textarea
		{
			this.elem = document.createElement("textarea");
			jQuery(this.elem).css("resize", "none");
		}
		else
		{
			this.elem = document.createElement("input");
			this.elem.type = elemTypes[this.properties[7]];
		}
		this.elem.id = this.properties[8];
		jQuery(this.elem).appendTo(this.runtime.canvasdiv ? this.runtime.canvasdiv : "body");
		this.elem["autocomplete"] = "off";
		this.elem.value = this.properties[0];
		this.elem["placeholder"] = this.properties[1];
		this.elem.title = this.properties[2];
		this.elem.disabled = (this.properties[4] === 0);
		this.elem["readOnly"] = (this.properties[5] === 1);
		this.elem["spellcheck"] = (this.properties[6] === 1);
		if (this.properties[3] === 0)
		{
			jQuery(this.elem).hide();
			this.visible = false;
		}
		var onchangetrigger = (function (self) {
			return function() {
				self.runtime.trigger(cr.plugins_.TextBox.prototype.cnds.OnTextChanged, self);
			};
		})(this);
		this.elem["oninput"] = onchangetrigger;
		if (navigator.userAgent.indexOf("MSIE") !== -1)
			this.elem["oncut"] = onchangetrigger;
		this.elem.onclick = (function (self) {
			return function(e) {
				e.stopPropagation();
				self.runtime.trigger(cr.plugins_.TextBox.prototype.cnds.OnClicked, self);
			};
		})(this);
		this.elem.ondblclick = (function (self) {
			return function(e) {
				e.stopPropagation();
				self.runtime.trigger(cr.plugins_.TextBox.prototype.cnds.OnDoubleClicked, self);
			};
		})(this);
		this.elem.addEventListener("touchstart", function (e) {
			e.stopPropagation();
		}, false);
		this.elem.addEventListener("touchmove", function (e) {
			e.stopPropagation();
		}, false);
		this.elem.addEventListener("touchend", function (e) {
			e.stopPropagation();
		}, false);
		jQuery(this.elem).mousedown(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).mouseup(function (e) {
			e.stopPropagation();
		});
		jQuery(this.elem).keydown(function (e) {
			if (e.which !== 13 && e.which != 27)	// allow enter and escape
				e.stopPropagation();
		});
		jQuery(this.elem).keyup(function (e) {
			if (e.which !== 13 && e.which != 27)	// allow enter and escape
				e.stopPropagation();
		});
		this.updatePosition();
		this.runtime.tickMe(this);
	};
	instanceProto.onDestroy = function ()
	{
		if (this.runtime.isDomFree)
				return;
		jQuery(this.elem).remove();
		this.elem = null;
	};
	instanceProto.tick = function ()
	{
		this.updatePosition();
	};
	instanceProto.updatePosition = function ()
	{
		if (this.runtime.isDomFree)
			return;
		var left = this.layer.layerToCanvas(this.x, this.y, true);
		var top = this.layer.layerToCanvas(this.x, this.y, false);
		var right = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, true);
		var bottom = this.layer.layerToCanvas(this.x + this.width, this.y + this.height, false);
		if (!this.visible || !this.layer.visible || right <= 0 || bottom <= 0 || left >= this.runtime.width || top >= this.runtime.height)
		{
			jQuery(this.elem).hide();
			return;
		}
		if (left < 1)
			left = 1;
		if (top < 1)
			top = 1;
		if (right >= this.runtime.width)
			right = this.runtime.width - 1;
		if (bottom >= this.runtime.height)
			bottom = this.runtime.height - 1;
		jQuery(this.elem).show();
		var offx = left + jQuery(this.runtime.canvas).offset().left;
		var offy = top + jQuery(this.runtime.canvas).offset().top;
		jQuery(this.elem).offset({left: offx, top: offy});
		jQuery(this.elem).width(right - left);
		jQuery(this.elem).height(bottom - top);
		jQuery(this.elem).css("font-size", (this.layer.getScale() - 0.2) + "em");
	};
	instanceProto.draw = function(ctx)
	{
	};
	instanceProto.drawGL = function(glw)
	{
	};
	pluginProto.cnds = {};
	var cnds = pluginProto.cnds;
	cnds.CompareText = function (text, case_)
	{
		if (this.runtime.isDomFree)
			return false;
		if (case_ === 0)	// insensitive
			return this.elem.value.toLowerCase() === text.toLowerCase();
		else
			return this.elem.value === text;
	};
	cnds.OnTextChanged = function ()
	{
		return true;
	};
	cnds.OnClicked = function ()
	{
		return true;
	};
	cnds.OnDoubleClicked = function ()
	{
		return true;
	};
	pluginProto.acts = {};
	var acts = pluginProto.acts;
	acts.SetText = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.value = text;
	};
	acts.SetPlaceholder = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.placeholder = text;
	};
	acts.SetTooltip = function (text)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.title = text;
	};
	acts.SetVisible = function (vis)
	{
		if (this.runtime.isDomFree)
			return;
		this.visible = (vis !== 0);
	};
	acts.SetEnabled = function (en)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.disabled = (en === 0);
	};
	acts.SetReadOnly = function (ro)
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.readOnly = (ro === 0);
	};
	acts.SetFocus = function ()
	{
		if (this.runtime.isDomFree)
			return;
		this.elem.focus();
	};
	acts.SetCSSStyle = function (p, v)
	{
		if (this.runtime.isDomFree)
			return;
		jQuery(this.elem).css(p, v);
	};
	pluginProto.exps = {};
	var exps = pluginProto.exps;
	exps.Text = function (ret)
	{
		if (this.runtime.isDomFree)
			ret.set_string("");
		ret.set_string(this.elem.value);
	};
}());
cr.getProjectModel = function() { return [
	null,
	null,
	[
	[
		cr.plugins_.Arr,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Audio,
		true,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.TextBox,
		false,
		true,
		true,
		true,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Keyboard,
		true,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Mouse,
		true,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Sprite,
		false,
		true,
		true,
		true,
		true,
		true,
		true
	]
	],
	[
	[
		"t0",
		cr.plugins_.Sprite,
		false,
		2,
		0,
		null,
		[
			[
			"Parado",
			2,
			true,
			1,
			0,
			false,
			[
				["images/mago-sheet1.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.2925,-0.304706,0,-0.276471,0.02625,-0.054118,0.0275,0,0,0.029412,0,0.352941,-0.21125,0.228235,-0.27875,0]],
				["images/mago-sheet2.png", 161668776, 0, 0, 800, 850, 1, 0.50375, 0.475294,[],[-0.32,-0.302353,-0.00375003,-0.261176,0.0175,-0.0247061,0.00624996,0.0247059,-0.015,0.0435299,-0.00375003,0.36,-0.22,0.257647,-0.2925,0.0247059]]
			]
			]
,			[
			"Ataque",
			6,
			false,
			1,
			0,
			true,
			[
				["images/mago-sheet3.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.2925,-0.304706,0,-0.276471,0.02625,-0.054118,0.0275,0,0,0.029412,0,0.352941,-0.21125,0.228235,-0.27875,0]],
				["images/mago-sheet4.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.3,-0.311765,0,-0.269412,0.00625002,-0.035294,0.005,0,0.14625,0.167059,0,0.354118,-0.21375,0.230588,-0.3,0]],
				["images/mago-sheet5.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.30625,-0.317647,0,-0.282353,-0.00999999,-0.02,-0.01625,0,0.18625,0.204706,0,0.354118,-0.2225,0.238824,-0.3225,0]],
				["images/mago-sheet6.png", 161668776, 0, 0, 800, 850, 3, 0.5, 0.5,[],[-0.3225,-0.332941,0,-0.207059,-0.0175,-0.012941,0.04625,0,-0.005,0.024706,0,0.364706,-0.2275,0.243529,-0.33,0]]
			]
			]
,			[
			"Hit",
			5,
			false,
			1,
			0,
			false,
			[
				["images/mago-sheet7.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.2925,-0.304706,0,-0.276471,0.02625,-0.054118,0.0275,0,0,0.029412,0,0.352941,-0.21125,0.228235,-0.27875,0]],
				["images/mago-sheet8.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.345,-0.354118,0,-0.211765,0.07875,-0.103529,0.1825,0,0.08,0.104706,0,0.315294,-0.2025,0.22,-0.21875,0]]
			]
			]
,			[
			"Corrida",
			5,
			false,
			1,
			0,
			false,
			[
				["images/mago-sheet0.png", 161668776, 0, 0, 62, 86, 1, 0.548387, 0.55814,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t1",
		cr.plugins_.Sprite,
		false,
		2,
		0,
		null,
		[
			[
			"Parado",
			2,
			true,
			1,
			0,
			false,
			[
				["images/ranger-sheet1.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.11,-0.132941,0,-0.036471,0.00125003,-0.030588,0.125,0,0.0175,0.045882,0,0.287059,-0.23375,0.249412,-0.25875,0]],
				["images/ranger-sheet2.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.11,-0.132941,0,-0.035294,0,-0.029412,0.1075,0,0.0175,0.045882,0,0.275294,-0.23375,0.249412,-0.25875,0]]
			]
			]
,			[
			"Ataque",
			5,
			false,
			1,
			0,
			true,
			[
				["images/ranger-sheet3.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.11,-0.132941,0,-0.036471,0.00125003,-0.030588,0.125,0,0.0175,0.045882,0,0.287059,-0.23375,0.249412,-0.25875,0]],
				["images/ranger-sheet4.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.11125,-0.134118,0,-0.037647,0.1025,0,0.165,0.184706,0,0.276471,-0.22625,0.242353,-0.25125,0]],
				["images/ranger-sheet5.png", 161668776, 0, 0, 800, 850, 2, 0.5, 0.5,[],[-0.11875,-0.141176,0,0.032941,-0.02625,-0.004706,-0.02,0,0.17375,0.192941,0,0.236471,-0.1925,0.210588,-0.2225,0]],
				["images/ranger-sheet6.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.11875,-0.141176,0,-0.035294,0.00375003,-0.032941,-0.04375,0,0.145,0.165882,0,0.236471,-0.19375,0.211765,-0.22375,0]]
			]
			]
,			[
			"Corrida",
			5,
			false,
			1,
			0,
			false,
			[
				["images/ranger-sheet0.png", 161668776, 0, 0, 62, 86, 1, 0.548387, 0.55814,[],[]]
			]
			]
,			[
			"Hit",
			3,
			false,
			1,
			0,
			false,
			[
				["images/ranger-sheet7.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.11,-0.132941,0,-0.036471,0.00125003,-0.030588,0.125,0,0.0175,0.045882,0,0.287059,-0.23375,0.249412,-0.25875,0]],
				["images/ranger-sheet8.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.0575,-0.083529,0,0.061176,-0.01125,-0.018824,-0.00999999,0,0.18625,0.204706,0,0.308235,-0.2,0.217647,-0.2275,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t2",
		cr.plugins_.Sprite,
		false,
		2,
		0,
		null,
		[
			[
			"Parado",
			2,
			true,
			1,
			0,
			false,
			[
				["images/clerigo-sheet1.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.23,-0.245882,0,-0.276471,0.035,-0.062353,-0.005,0,0.1275,0.149412,0,0.283529,-0.26125,0.275294,-0.1775,0]],
				["images/clerigo-sheet2.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.2325,-0.248235,0,-0.263529,-0.00749999,-0.022353,-0.00624999,0,0.08875,0.112941,0,0.068235,-0.24625,0.261176,-0.17375,0]]
			]
			]
,			[
			"Ataque",
			5,
			false,
			1,
			0,
			true,
			[
				["images/clerigo-sheet3.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.23,-0.245882,0,-0.276471,0.035,-0.062353,-0.005,0,0.1275,0.149412,0,0.283529,-0.26125,0.275294,-0.1775,0]],
				["images/clerigo-sheet4.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.23,-0.245882,0,-0.276471,0.04875,-0.075294,0.1075,0,-0.01625,0.014118,0,0.297647,-0.2675,0.281176,-0.1775,0]],
				["images/clerigo-sheet5.png", 161668776, 0, 0, 800, 850, 4, 0.5, 0.5,[],[-0.23,-0.245882,0,-0.276471,0.07375,-0.098824,0.2275,0,0.06375,0.089412,0,0.287059,-0.2325,0.248235,-0.1875,0]]
			]
			]
,			[
			"Hit",
			8,
			false,
			1,
			0,
			false,
			[
				["images/clerigo-sheet6.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.23,-0.245882,0,-0.276471,0.035,-0.062353,-0.005,0,0.1275,0.149412,0,0.283529,-0.26125,0.275294,-0.1775,0]],
				["images/clerigo-sheet7.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.21125,-0.228235,0,-0.257647,0.0575,-0.083529,0.025,0,0.03875,0.065882,0,0.261176,-0.23,0.245882,-0.19,0]]
			]
			]
,			[
			"Corrida",
			5,
			false,
			1,
			0,
			false,
			[
				["images/clerigo-sheet0.png", 161668776, 0, 0, 62, 86, 1, 0.548387, 0.55814,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t3",
		cr.plugins_.Sprite,
		false,
		2,
		0,
		null,
		[
			[
			"Parado",
			2,
			true,
			1,
			0,
			false,
			[
				["images/guerreiro-sheet1.png", 161668776, 0, 0, 800, 850, 1, 0.1475, 0.814118,[],[0.16125,-0.52353,0.3525,-0.529412,0.4125,-0.4,0.35875,-0.314118,0.43375,-0.208236,0.3525,-0.0611767,0.10375,-0.0505887,0.115,-0.314118]],
				["images/guerreiro-sheet2.png", 161668776, 0, 0, 800, 850, 1, 0.14375, 0.811765,[],[0.15375,-0.531765,0.35625,-0.532941,0.38125,-0.364706,0.33875,-0.311765,0.43125,-0.211765,0.35625,-0.0647057,0.10875,-0.0494117,0.1225,-0.311765]]
			]
			]
,			[
			"Corrida",
			5,
			false,
			1,
			0,
			false,
			[
				["images/guerreiro-sheet0.png", 161668776, 0, 0, 62, 86, 1, 0.467742, 0.523256,[],[]]
			]
			]
,			[
			"Ataque",
			10,
			false,
			1,
			0,
			false,
			[
				["images/guerreiro-sheet3.png", 161668776, 0, 0, 800, 850, 1, 0.14875, 0.812941,[],[0.16,-0.522353,0.35125,-0.528235,0.41125,-0.398823,0.3575,-0.312941,0.4325,-0.207059,0.35125,-0.0600002,0.1025,-0.0494122,0.11375,-0.312941]],
				["images/guerreiro-sheet4.png", 161668776, 0, 0, 800, 850, 1, 0.175, 0.811765,[],[0.155,-0.501177,0.325,-0.521177,0.43,-0.44,0.3725,-0.311765,0.4625,-0.152941,0.325,-0.00588274,0.0225,0.00235331,0.1425,-0.311765]],
				["images/guerreiro-sheet5.png", 161668776, 0, 0, 800, 850, 1, 0.1825, 0.815294,[],[0.14875,-0.503529,0.3175,-0.535294,0.4325,-0.452941,0.3725,-0.315294,0.49,-0.123529,0.3175,0.0447059,0.00999999,0.00352985,0.13875,-0.315294]],
				["images/guerreiro-sheet6.png", 161668776, 0, 0, 800, 850, 3, 0.20375, 0.828235,[],[0.0925,-0.549411,0.29625,-0.564706,0.31625,-0.37647,0.40125,-0.328235,0.42625,-0.17647,0.29625,0.0141177,0.06375,-0.0800003,0.08875,-0.328235]],
				["images/guerreiro-sheet7.png", 161668776, 0, 0, 800, 850, 1, 0.14875, 0.812941,[],[0.16,-0.522353,0.35125,-0.528235,0.41125,-0.398823,0.3575,-0.312941,0.4325,-0.207059,0.35125,-0.0600002,0.1025,-0.0494122,0.11375,-0.312941]]
			]
			]
,			[
			"Hit",
			10,
			false,
			1,
			0,
			false,
			[
				["images/guerreiro-sheet8.png", 161668776, 0, 0, 800, 850, 1, 0.14875, 0.812941,[],[0.16,-0.522353,0.35125,-0.528235,0.41125,-0.398823,0.3575,-0.312941,0.4325,-0.207059,0.35125,-0.0600002,0.1025,-0.0494122,0.11375,-0.312941]],
				["images/guerreiro-sheet9.png", 161668776, 0, 0, 800, 850, 1, 0.175, 0.811765,[],[0.135,-0.52,0.325,-0.537647,0.3875,-0.4,0.33625,-0.311765,0.41,-0.202353,0.325,-0.116471,0.065,-0.0376467]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t4",
		cr.plugins_.Keyboard,
		false,
		0,
		0,
		null,
		null,
		[
		],
		false,
		false
		,[]
	]
,	[
		"t5",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			10,
			false,
			1,
			0,
			false,
			[
				["images/espada-sheet0.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[]],
				["images/espada-sheet1.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[0,0.18,-0.23875,0.195294,0,0.285882,-0.22375,0.24]],
				["images/espada-sheet2.png", 161668776, 0, 0, 800, 850, 1, 0.505, 0.5,[],[0.11375,0.082353,-0.005,0.18,0.145,-0.170588,0.21875,0,0.16,0.184706,-0.005,0.285882,-0.2275,0.238824,0.1575,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t6",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			8,
			false,
			1,
			0,
			false,
			[
				["images/fogo-sheet0.png", 161668776, 0, 0, 406, 536, 1, 0.504926, 0.5,[],[-0.162561,-0.240672,-0.00492609,-0.283582,0.0221679,-0.141791,0.182266,0,-0.0566501,0.08209,-0.00492609,0.01306,0.123153,0.024254,-0.0985221,0]],
				["images/fogo-sheet1.png", 161668776, 0, 0, 406, 536, 1, 0.5, 0.5,[],[-0.453202,-0.464552,0,-0.404851,0.169951,-0.25,0.391626,0,0.389163,0.416045,0,0.276119,-0.093596,0]],
				["images/fogo-sheet2.png", 161668776, 0, 0, 406, 536, 1, 0.5, 0.5,[],[-0.064039,-0.169776,0,-0.164179,0.05665,-0.164179,0.394089,0,0.32266,0.365672,0,0.244403,0.066502,0.070895,0.071429,0]],
				["images/fogo-sheet3.png", 161668776, 0, 0, 406, 536, 1, 0.5, 0.5,[],[0,0.294776,0.275862,0.330224,0,0.477612]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t7",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			8,
			false,
			1,
			0,
			false,
			[
				["images/flecha-sheet0.png", 161668776, 1, 1, 300, 89, 1, 0.503333, 0.505618,[],[-0.4,-0.157303,-0.00333333,-0.033708,0.133334,-0.011236,-0.00333333,0.078652,-0.423333,0.224719,-0.403333,-0.011236]],
				["images/flecha-sheet0.png", 161668776, 1, 91, 300, 89, 1, 0.5, 0.505618,[],[-0.303333,0.157303,0,-0.033708,0.303333,-0.011236,0,0.078652,-0.233333,-0.011236]],
				["images/flecha-sheet0.png", 161668776, 1, 181, 300, 89, 1, 0.5, 0.505618,[],[0,-0.157303,0.36,-0.033708,0.393333,-0.011236,0.39,0.123596,0,0.213483,-0.033333,-0.011236]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t8",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/escudo-sheet0.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.0025,-0.031765,0,-0.057647,0.315,-0.325882,0.37875,0,0.29875,0.310588,0,0.082353]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t9",
		cr.plugins_.Sprite,
		false,
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/playerbar-sheet0.png", 161668776, 0, 0, 212, 10, 1, -0.00471698, 0.5,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t10",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/playersubbar-sheet0.png", 161668776, 0, 0, 212, 10, 1, -0.00471698, 0.4,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t11",
		cr.plugins_.Sprite,
		false,
		3,
		0,
		null,
		[
			[
			"Default",
			2,
			true,
			1,
			0,
			false,
			[
				["images/slime-sheet0.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.155,-0.0462041,0,-0.0231022,0.09,0.0396038,0.0425,-0.00330016,0.385,0.346535,0,0.481848,-0.4175,0.389439,-0.2925,-0.00330016]],
				["images/slime-sheet1.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.095,0.0330029,0,0.0528048,0.0575,0.0825078,0.3925,0.356436,0,0.485149,-0.425,0.39934]]
			]
			]
,			[
			"HopCue",
			8,
			true,
			1,
			0,
			true,
			[
				["images/slime-sheet2.png", 161668776, 0, 0, 400, 303, 1, 0.5025, 0.50165,[],[-0.0975,0.0330029,-0.0025,0.0528048,0.055,0.0825078,0.39,0.356436,-0.0025,0.485149,-0.4275,0.39934]],
				["images/slime-sheet3.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.045,0.0990099,0,0.108911,0.03,0.118812,0.3975,0.363036,0,0.485149,-0.43,0.405941]],
				["images/slime-sheet4.png", 161668776, 0, 0, 400, 303, 1, 0.5025, 0.50165,[],[-0.0975,0.0330029,-0.0025,0.0528048,0.055,0.0825078,0.39,0.356436,-0.0025,0.485149,-0.4275,0.39934]],
				["images/slime-sheet5.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.22,-0.132013,0,-0.323432,0.165,-0.0594062,0.1975,0.0990099,0,0.478548,-0.38,0.339934,-0.275,-0.00330016]]
			]
			]
,			[
			"HopAttack",
			8,
			false,
			1,
			0,
			false,
			[
				["images/slime-sheet6.png", 161668776, 0, 0, 400, 303, 1, 0.5025, 0.50165,[],[-0.0975,0.0330029,-0.0025,0.0528048,0.055,0.0825078,0.39,0.356436,-0.0025,0.485149,-0.4275,0.39934]],
				["images/slime-sheet7.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.045,0.0990099,0,0.108911,0.03,0.118812,0.3975,0.363036,0,0.485149,-0.43,0.405941]],
				["images/slime-sheet8.png", 161668776, 0, 0, 400, 303, 1, 0.5025, 0.50165,[],[-0.0975,0.0330029,-0.0025,0.0528048,0.055,0.0825078,0.39,0.356436,-0.0025,0.485149,-0.4275,0.39934]],
				["images/slime-sheet9.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.22,-0.132013,0,-0.323432,0.165,-0.0594062,0.1975,0.0990099,0,0.478548,-0.38,0.339934,-0.275,-0.00330016]],
				["images/slime-sheet10.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.2875,-0.221122,0,-0.49505,0.1975,-0.10231,0.2,-0.00330016,0.1925,0.0924088,0,0.39934,-0.2675,0.191419,-0.31,-0.00330016]],
				["images/slime-sheet11.png", 161668776, 0, 0, 400, 303, 2, 0.5025, 0.567657,[],[-0.29,-0.287129,-0.0025,-0.561056,0.195,-0.168317,0.1975,-0.0693068,0.19,0.0264022,-0.0025,0.333333,-0.27,0.125412,-0.3125,-0.0693068]],
				["images/slime-sheet12.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.2875,-0.221122,0,-0.49505,0.1975,-0.10231,0.2,-0.00330016,0.1925,0.0924088,0,0.39934,-0.2675,0.191419,-0.31,-0.00330016]],
				["images/slime-sheet13.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.22,-0.132013,0,-0.323432,0.165,-0.0594062,0.1975,0.0990099,0,0.478548,-0.38,0.339934,-0.275,-0.00330016]],
				["images/slime-sheet14.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.045,0.0990099,0,0.108911,0.03,0.118812,0.3975,0.363036,0,0.485149,-0.43,0.405941]]
			]
			]
,			[
			"SquirtAttack",
			6,
			false,
			2,
			0,
			false,
			[
				["images/slime-sheet15.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.1775,-0.0759071,0,-0.10561,0.1525,-0.0429042,0.195,-0.00330016,0.4025,0.369637,0,0.478548,-0.41,0.379538,-0.26,-0.00330016]],
				["images/slime-sheet16.png", 161668776, 0, 0, 400, 303, 1, 0.5025, 0.50165,[],[-0.18,-0.0759071,-0.0025,-0.10561,0.15,-0.0429042,0.1925,-0.00330016,0.4025,0.372937,-0.0025,0.478548,-0.4125,0.379538,-0.26,-0.00330016]],
				["images/slime-sheet17.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.1775,-0.0759071,0,-0.10561,0.1525,-0.0429042,0.195,-0.00330016,0.405,0.372937,0,0.478548,-0.41,0.379538,-0.2575,-0.00330016]],
				["images/slime-sheet18.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.1775,-0.0759071,0,-0.10561,0.1525,-0.0429042,0.195,-0.00330016,0.405,0.372937,0,0.478548,-0.42,0.392739,-0.2575,-0.00330016]],
				["images/slime-sheet19.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.1775,-0.0759071,0,-0.10561,0.1525,-0.0429042,0.195,-0.00330016,0.405,0.372937,0,0.478548,-0.4375,0.415842,-0.2575,-0.00330016]],
				["images/slime-sheet20.png", 161668776, 0, 0, 400, 303, 1, 0.5025, 0.50165,[],[-0.18,-0.0759071,-0.0025,-0.10561,0.15,-0.0429042,0.1925,-0.00330016,0.4025,0.372937,-0.0025,0.478548,-0.4125,0.379538,-0.26,-0.00330016]]
			]
			]
,			[
			"SquirtCue",
			6,
			true,
			1,
			0,
			false,
			[
				["images/slime-sheet21.png", 161668776, 0, 0, 400, 303, 1, 0.5025, 0.50165,[],[-0.1575,-0.0462041,-0.0025,-0.0231022,0.0875,0.0396038,0.04,-0.00330016,0.3825,0.346535,-0.0025,0.481848,-0.42,0.389439,-0.295,-0.00330016]],
				["images/slime-sheet22.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.1775,-0.0759071,0,-0.10561,0.1525,-0.0429042,0.1925,-0.00330016,0.405,0.372937,0,0.478548,-0.41,0.379538,-0.26,-0.00330016]]
			]
			]
,			[
			"SplitCue",
			7,
			true,
			1,
			0,
			true,
			[
				["images/slime-sheet23.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.155,-0.0462041,0,-0.0231022,0.09,0.0396038,0.0425,-0.00330016,0.385,0.346535,0,0.481848,-0.4175,0.389439,-0.2925,-0.00330016]],
				["images/slime-sheet24.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.0925,0.0363038,0,0.0198019,0.085,0.0462049,-0.255,-0.00330016,0.39,0.353136,0,0.491749,-0.4175,0.389439,-0.34,-0.00330016]],
				["images/slime-sheet25.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.08,0.0528048,0,0.0165018,0.085,0.0462049,0,0.485149,-0.42,0.392739]],
				["images/slime-sheet26.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.0925,0.0363038,0,0.0198019,0.085,0.0462049,-0.255,-0.00330016,0.39,0.353136,0,0.491749,-0.4175,0.389439,-0.34,-0.00330016]],
				["images/slime-sheet27.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.08,0.0528048,0,0.0165018,0.085,0.0462049,0,0.485149,-0.42,0.392739]]
			]
			]
,			[
			"Hit",
			1,
			false,
			1,
			0,
			false,
			[
				["images/slime-sheet28.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.1775,-0.0759071,0,-0.10561,0.1525,-0.0429042,0.1925,-0.00330016,0.405,0.372937,0,0.478548,-0.41,0.379538,-0.26,-0.00330016]]
			]
			]
,			[
			"SplitAttack",
			7,
			false,
			1,
			0,
			true,
			[
				["images/slime-sheet29.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.155,-0.0462041,0,-0.0231022,0.09,0.0396038,0.0425,-0.00330016,0.385,0.346535,0,0.481848,-0.4175,0.389439,-0.2925,-0.00330016]],
				["images/slime-sheet30.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.0925,0.0363038,0,0.0198019,0.085,0.0462049,-0.255,-0.00330016,0.39,0.353136,0,0.491749,-0.4175,0.389439,-0.34,-0.00330016]],
				["images/slime-sheet31.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.08,0.0528048,0,0.0165018,0.085,0.0462049,0,0.485149,-0.42,0.392739]],
				["images/slime-sheet32.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.0925,0.0363038,0,0.0198019,0.085,0.0462049,-0.255,-0.00330016,0.39,0.353136,0,0.491749,-0.4175,0.389439,-0.34,-0.00330016]],
				["images/slime-sheet33.png", 161668776, 0, 0, 400, 303, 1, 0.5, 0.50165,[],[-0.08,0.0528048,0,0.0165018,0.085,0.0462049,0,0.485149,-0.42,0.392739]],
				["images/slime-sheet34.png", 161668776, 0, 0, 400, 303, 5, 0.5, 0.50165,[],[-0.075,0.0594059,0,0.0594059,0.055,0.0858089,-0.32,-0.00330016,0.355,0.306931,0,0.445545,-0.4275,0.40264,-0.34,-0.00330016]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t12",
		cr.plugins_.TextBox,
		false,
		0,
		0,
		null,
		null,
		[
		],
		false,
		false
	]
,	[
		"t13",
		cr.plugins_.Sprite,
		false,
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/monsterbar-sheet0.png", 161668776, 0, 0, 212, 10, 1, -0.00471698, 0.5,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t14",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/monstersubbar-sheet0.png", 161668776, 0, 0, 212, 10, 1, -0.00471698, 0.4,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t15",
		cr.plugins_.Arr,
		false,
		2,
		0,
		null,
		null,
		[
		],
		true,
		false
	]
,	[
		"t16",
		cr.plugins_.Audio,
		false,
		0,
		0,
		null,
		null,
		[
		],
		false,
		false
		,[0]
	]
,	[
		"t17",
		cr.plugins_.Mouse,
		false,
		0,
		0,
		null,
		null,
		[
		],
		false,
		false
		,[]
	]
,	[
		"t18",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			8,
			false,
			1,
			0,
			false,
			[
				["images/espadadefogo-sheet0.png", 161668776, 0, 0, 306, 298, 1, 0.506536, 0.5,[],[-0.164171,-0.240672,-0.00653595,-0.283582,0.0205581,-0.141791,0.180656,0,-0.0582599,0.08209,-0.00653595,0.01306,0.121543,0.024254,-0.100132,0]],
				["images/espadadefogo-sheet1.png", 161668776, 0, 0, 306, 298, 1, 0.5, 0.5,[],[0.254902,0.275168,0,0.241611,-0.277778,0.298658,0,0.483221,-0.382353,0.379195]],
				["images/espadadefogo-sheet2.png", 161668776, 0, 0, 306, 298, 1, 0.5, 0.5,[],[0.140523,0.157718,0,0.241611,0.411765,-0.409396,0.441176,0,0.300654,0.295302,0,0.486577,-0.382353,0.379195,0.29085,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t19",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			8,
			true,
			1,
			0,
			false,
			[
				["images/estilhaço-sheet0.png", 161668776, 0, 0, 300, 300, 1, 0.503333, 0.5,[],[-0.213333,-0.21,-0.00333333,-0.403333,0.283334,-0.286667,0.223334,0,0.0933337,0.096667,-0.00333333,0.19,-0.33,0.326667,-0.00666633,0]],
				["images/estilhaço-sheet1.png", 161668776, 0, 0, 300, 300, 1, 0.5, 0.5,[],[0.03,0.03,0,-0.23,0.29,-0.29,0.416667,0,0.326667,0.326667,0,0.183333,-0.323333,0.323333,-0.343333,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t20",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			8,
			false,
			1,
			0,
			false,
			[
				["images/flechadeluz-sheet0.png", 161668776, 1, 1, 300, 80, 1, 0.503333, 0.5,[],[-0.456667,-0.325,-0.00333333,-0.0875,0.0133337,0,-0.00333333,0.0625,-0.453333,0.3125]],
				["images/flechadeluz-sheet0.png", 161668776, 1, 82, 300, 80, 1, 0.5, 0.5,[],[0,-0.0375,0.24,0,0,0.0375,-0.226667,0]],
				["images/flechadeluz-sheet0.png", 161668776, 1, 163, 300, 80, 1, 0.5, 0.5,[],[0.376667,-0.0375,0.5,0,0.376667,0.0375,0.133333,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t21",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			8,
			false,
			1,
			0,
			false,
			[
				["images/provocacao-sheet0.png", 161668776, 0, 0, 300, 300, 1, 0.503333, 0.5,[],[-0.33,-0.326667,-0.00333333,-0.16,0.17,0.173333,-0.00333333,-0.063333]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t22",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			4,
			true,
			1,
			0,
			false,
			[
				["images/statuscancel-sheet0.png", 161668776, 0, 0, 600, 600, 1, 0.505, 0.5,[],[-0.398333,-0.393333,0.398333,-0.403333,0.056667,0.061667,-0.423333,0.418333]],
				["images/statuscancel-sheet1.png", 161668776, 0, 0, 600, 600, 1, 0.5, 0.5,[],[-0.393333,-0.393333,0.403333,-0.403333,0.061667,0.061667,-0.418333,0.418333]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t23",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			14,
			true,
			1,
			0,
			false,
			[
				["images/invisibilidade-sheet0.png", 161668776, 0, 0, 600, 600, 1, 0.505, 0.5,[],[-0.433333,-0.428333,0.403333,-0.408333,-0.081667,-0.076667,0.075,-0.08]],
				["images/invisibilidade-sheet1.png", 161668776, 0, 0, 600, 600, 1, 0.5, 0.5,[],[-0.393333,-0.393333,0.403333,-0.403333,0.061667,0.061667,-0.418333,0.418333]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t24",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/fundo-sheet0.png", 161668776, 0, 0, 1200, 832, 1, 0.5, 0.501202,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t25",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/excleriga-sheet0.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.23,-0.245882,0,-0.276471,0.07375,-0.098824,0.2275,0,0.06375,0.089412,0,0.287059,-0.2325,0.248235,-0.1875,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t26",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/exguerreiro-sheet0.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.16875,-0.188235,0,-0.22,0.115,-0.137647,0.055,0,0.1725,0.191765,0,0.36,-0.3075,0.318824,-0.17875,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t27",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/exmaga-sheet0.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.3225,-0.332941,0,-0.207059,-0.0175,-0.012941,0.04625,0,-0.005,0.024706,0,0.364706,-0.2275,0.243529,-0.33,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t28",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/exranger-sheet0.png", 161668776, 0, 0, 800, 850, 1, 0.5, 0.5,[],[-0.11875,-0.141176,0,-0.035294,0.00375003,-0.032941,-0.04375,0,0.145,0.165882,0,0.236471,-0.19375,0.211765,-0.22375,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t29",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			2,
			true,
			1,
			0,
			false,
			[
				["images/buttona-sheet0.png", 161668776, 0, 0, 361, 343, 1, 0.501385, 0.501458,[],[-0.243767,-0.230321,0.229917,-0.218659,0.398892,-0.00291574,0.459834,0.457726,-0.00277004,0.478134,-0.462604,0.457726,-0.404432,-0.00291574]],
				["images/buttona-sheet1.png", 161668776, 0, 0, 361, 343, 1, 0.501385, 0.501458,[],[-0.141274,-0.122449,-0.00277004,-0.495627,0.132964,-0.116618,0.315789,-0.00291574,0.445983,0.443148,-0.00277004,0.483965,-0.445983,0.440233,-0.32964,-0.00291574]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t30",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			2,
			true,
			1,
			0,
			false,
			[
				["images/buttonb-sheet0.png", 161668776, 0, 0, 361, 343, 1, 0.501385, 0.501458,[],[-0.243767,-0.230321,0.229917,-0.218659,0.398892,-0.00291574,0.459834,0.457726,-0.00277004,0.478134,-0.462604,0.457726,-0.404432,-0.00291574]],
				["images/buttonb-sheet1.png", 161668776, 0, 0, 361, 343, 1, 0.501385, 0.501458,[],[-0.141274,-0.122449,-0.00277004,-0.495627,0.132964,-0.116618,0.31856,-0.00291574,0.445983,0.443148,-0.00277004,0.483965,-0.443213,0.437318,-0.32687,-0.00291574]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t31",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			2,
			true,
			1,
			0,
			false,
			[
				["images/buttonz-sheet0.png", 161668776, 0, 0, 361, 343, 1, 0.501385, 0.501458,[],[-0.243767,-0.230321,0.229917,-0.218659,0.398892,-0.00291574,0.459834,0.457726,-0.00277004,0.478134,-0.462604,0.457726,-0.404432,-0.00291574]],
				["images/buttonz-sheet1.png", 161668776, 0, 0, 361, 343, 1, 0.501385, 0.501458,[],[-0.141274,-0.122449,-0.00277004,-0.495627,0.132964,-0.116618,0.31856,-0.00291574,0.445983,0.443148,-0.00277004,0.483965,-0.443213,0.437318,-0.32687,-0.00291574]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t32",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			2,
			true,
			1,
			0,
			false,
			[
				["images/buttonx-sheet0.png", 161668776, 0, 0, 361, 343, 1, 0.501385, 0.501458,[],[-0.243767,-0.230321,0.229917,-0.218659,0.398892,-0.00291574,0.459834,0.457726,-0.00277004,0.478134,-0.462604,0.457726,-0.404432,-0.00291574]],
				["images/buttonx-sheet1.png", 161668776, 0, 0, 361, 343, 1, 0.501385, 0.501458,[],[-0.141274,-0.122449,-0.00277004,-0.495627,0.132964,-0.116618,0.31856,-0.00291574,0.445983,0.443148,-0.00277004,0.483965,-0.443213,0.437318,-0.32687,-0.00291574]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t33",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/jogar-sheet0.png", 161668776, 0, 0, 287, 93, 1, 0.501742, 0.505376,[],[-0.477352,-0.430108,-0.00348419,-0.44086,0.445993,-0.344086,0.439025,0.311828,-0.00348419,0.311828,-0.487805,0.451613,-0.463415,-0.0107524]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t34",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/creditos-sheet0.png", 161668776, 0, 0, 430, 92, 1, -1, -1,[],[1.04651,1.21739,1.5,1.20652,1.97442,1.11957,1.98605,1.5,1.97442,1.88043,1.03256,1.84783,1.00233,1.5]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t35",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/fundointro-sheet0.png", 161668776, 0, 0, 900, 700, 1, 0.5, 0.5,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t36",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/gameover-sheet0.png", 161668776, 0, 0, 900, 700, 1, 0.5, 0.5,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t37",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/dragao-sheet0.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.29125,-0.221667,0,-0.255,0.27375,-0.198333,0.28375,0,0.09625,-0.038333,0,0.331667,-0.21,0.113333,-0.22125,0]]
			]
			]
,			[
			"Stomp",
			5,
			false,
			1,
			0,
			false,
			[
				["images/dragao-sheet1.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.29125,-0.221667,0,-0.236667,0.24,-0.153333,0.2975,0,0.1175,-0.00999999,0,0.27,-0.21,0.113333,-0.22,0]],
				["images/dragao-sheet2.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.29125,-0.221667,0,-0.23,0.21375,-0.118333,0.27875,0,0.2375,0.15,0,0.37,-0.2125,0.116667,-0.22,0]],
				["images/dragao-sheet3.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.1925,-0.09,0,-0.366667,0.2,-0.1,0.30125,0,0.2575,0.176667,0,0.37,-0.2225,0.13,-0.3025,0]],
				["images/dragao-sheet4.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.34875,-0.298333,0,-0.241667,0.26125,-0.181667,0.225,0,0.08,-0.06,0,0.37,-0.28625,0.215,-0.2525,0]],
				["images/dragao-sheet5.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.34875,-0.298333,0,-0.255,0.26875,-0.191667,0.23,0,0.0725,-0.07,0,0.37,-0.28625,0.215,-0.2525,0]],
				["images/dragao-sheet6.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.34875,-0.298333,0,-0.241667,0.26125,-0.181667,0.225,0,0.08,-0.06,0,0.37,-0.28625,0.215,-0.2525,0]],
				["images/dragao-sheet7.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.34875,-0.298333,0,-0.241667,0.26125,-0.181667,0.225,0,0.08,-0.06,0,0.37,-0.22625,0.135]],
				["images/dragao-sheet8.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.34875,-0.298333,0,-0.241667,0.26125,-0.181667,0.225,0,0.08,-0.06,0,0.37,-0.28625,0.215,-0.2525,0]],
				["images/dragao-sheet9.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.34875,-0.298333,0,-0.255,0.26875,-0.191667,0.23,0,0.0725,-0.07,0,0.37,-0.28625,0.215,-0.2525,0]],
				["images/dragao-sheet10.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.34875,-0.298333,0,-0.241667,0.26125,-0.181667,0.225,0,0.08,-0.06,0,0.37,-0.28625,0.215,-0.2525,0]],
				["images/dragao-sheet11.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.29125,-0.221667,0,-0.236667,0.24,-0.153333,0.2975,0,0.1175,-0.00999999,0,0.27,-0.21,0.113333,-0.22,0]]
			]
			]
,			[
			"Fogo",
			5,
			false,
			1,
			0,
			false,
			[
				["images/dragao-sheet12.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.34,-0.286667,0,-0.303333,0.29625,-0.228333,0.03,0,0.06125,-0.085,0,0.14,-0.225,0.133333]],
				["images/dragao-sheet13.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.36,-0.313333,0,-0.355,0.3,-0.233333,0.03125,0,0.05875,-0.088333,0,0.14,-0.225,0.133333,-0.2575,0]],
				["images/dragao-sheet14.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.36,-0.313333,0,-0.416667,0.3,-0.233333,0.03125,0,0.05875,-0.088333,0,0.14,-0.22375,0.131667,-0.25625,0]],
				["images/dragao-sheet15.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.36,-0.313333,0,-0.416667,0.3,-0.233333,0.03125,0,0.05875,-0.088333,0,0.14,-0.24875,0.165,-0.2575,0]],
				["images/dragao-sheet16.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.3675,-0.323333,0,-0.323333,0.32125,-0.261667,0.09125,0,0.1,-0.033333,0,0.14,-0.27125,0.195,-0.255,0]],
				["images/dragao-sheet17.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.33,-0.273333,0,-0.32,0.32625,-0.268333,0.0325,0,0.325,0.266667,0,0.14,-0.34,0.286667,-0.2675,0]]
			]
			]
,			[
			"Scratch",
			5,
			false,
			1,
			0,
			false,
			[
				["images/dragao-sheet18.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.28875,-0.218333,0,-0.255,0.27375,-0.198333,0.28375,0,0.0975,-0.036667,0,0.333333,-0.21,0.113333,-0.2225,0]],
				["images/dragao-sheet19.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.28875,-0.218333,0,-0.255,0.27375,-0.198333,0.28375,0,0.0975,-0.036667,0,0.333333,-0.21,0.113333,-0.22125,0]],
				["images/dragao-sheet20.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.28875,-0.218333,0,-0.255,0.27375,-0.198333,0.28375,0,0.0975,-0.036667,0,0.333333,-0.31625,0.255,-0.22,0]],
				["images/dragao-sheet21.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.28875,-0.218333,0,-0.255,0.27375,-0.198333,0.28375,0,0.0975,-0.036667,0,0.333333,-0.235,0.146667,-0.24125,0]],
				["images/dragao-sheet22.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.28875,-0.218333,0,-0.255,0.27375,-0.198333,0.28375,0,0.0975,-0.036667,0,0.333333,-0.21875,0.125,-0.4325,0]],
				["images/dragao-sheet23.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.28875,-0.218333,0,-0.255,0.27375,-0.198333,0.28375,0,0.0975,-0.036667,0,0.333333,-0.21875,0.125,-0.255,0]],
				["images/dragao-sheet24.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.28875,-0.218333,0,-0.255,0.27375,-0.198333,0.28375,0,0.0975,-0.036667,0,0.333333,-0.31625,0.255,-0.22,0]],
				["images/dragao-sheet25.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.28875,-0.218333,0,-0.255,0.27375,-0.198333,0.28375,0,0.0975,-0.036667,0,0.333333,-0.21,0.113333,-0.22125,0]],
				["images/dragao-sheet26.png", 161668776, 0, 0, 800, 600, 1, 0.5, 0.5,[],[-0.28875,-0.218333,0,-0.255,0.27375,-0.198333,0.28375,0,0.0975,-0.036667,0,0.333333,-0.21,0.113333,-0.2225,0]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t38",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/fim-sheet0.png", 161668776, 0, 0, 2000, 2000, 1, 0.5, 0.5,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t39",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			[
				["images/sprite3-sheet0.png", 161668776, 0, 0, 900, 700, 1, 0.5, 0.5,[],[]]
			]
			]
		],
		[
		],
		false,
		false
	]
,	[
		"t40",
		cr.plugins_.Sprite,
		false,
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			true,
			1,
			0,
			true,
			[
				["images/exclamacao-sheet0.png", 161668776, 0, 0, 300, 300, 1, 0.5, 0.5,[],[-0.23,-0.23,0,-0.353333,0.06,-0.06,0,0.44,-0.143333,0.143333]],
				["images/exclamacao-sheet1.png", 161668776, 0, 0, 300, 300, 1, 0.5, 0.526667,[],[-0.23,-0.256667,0,-0.38,0.06,-0.0866666,0,0.413333,-0.143333,0.116666]],
				["images/exclamacao-sheet2.png", 161668776, 0, 0, 300, 300, 1, 0.506667, 0.6,[],[-0.236667,-0.33,-0.00666666,-0.453333,0.0533333,-0.16,-0.00666666,0.34,-0.15,0.043333]]
			]
			]
		],
		[
		],
		false,
		false
	]
	],
	[
	],
	[
	[
		"Intro",
		1280,
		1024,
		false,
		"Intro",
		[
		[
			"Layer 0",
			0,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			[
			[
				[329.297, 250.12, 0, 659, 503, 0, 0, 1, 0.5, 0.5],
				35,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[321, 55, 0, 123.944, 40.1632, 0, 0, 1, 0.501742, 0.505376],
				33,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[325, 109, 0, 409.326, 18.7374, 0, 0, 1, -1, -1],
				34,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[30, 37, 0, 194.297, 41.5704, 0, 0, 1, -1, -1],
				34,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
			]
		]
		],
		[
		]
	]
,	[
		"Layout 1",
		1280,
		1024,
		false,
		"Main",
		[
		[
			"Layer 0",
			0,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			[
			[
				[333.394, 215.359, 0, 768.7, 532.965, 0, 0, 1, 0.5, 0.501202],
				24,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
			]
		]
,		[
			"Layer 1",
			1,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			[
			[
				[56, 76, 0, 212, 10, 0, 0, 1, -0.00471698, 0.4],
				10,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[87, 200, 0, 200, 215, 0, 0, 1, 0.5, 0.5],
				0,
				[
					0,
					1
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[209, 187, 0, 200, 215, 0, 0, 1, 0.5, 0.5],
				1,
				[
					0,
					1
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[143, 302, 0, 200, 215, 0, 0, 1, 0.5, 0.5],
				2,
				[
					0,
					1
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[214, 364, 0, 200, 215, 0, 0, 1, 0.1475, 0.814118],
				3,
				[
					0,
					1
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[55, 80, 0, 212, 10, 0, 0, 1, -0.00471698, 0.5],
				9,
				[
					0
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[216, 424, 0, 229, 24, 0, 0, 1, 0, 0],
				12,
				[
				],
				[
				],
				[
					"Cuidado, um Slime selvagem!!!",
					"",
					"",
					1,
					0,
					1,
					0,
					0,
					""
				]
			]
,			[
				[397, 71, 0, 212, 10, 0, 0, 1, -0.00471698, 0.4],
				14,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[394, 75, 0, 212, 10, 0, 0, 1, -0.00471698, 0.5],
				13,
				[
					0
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[505, 218, 0, 400, 303, 0, 0, 1, 0.5, 0.50165],
				11,
				[
					4,
					70,
					10
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
			]
		]
,		[
			"Layer 2",
			2,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			[
			]
		]
		],
		[
			[
				null,
				15,
				[
					0,
					0
				],
				[
				],
				[
					11,
					5,
					3
				]
			]
		]
	]
,	[
		"Commands",
		1280,
		1024,
		false,
		"Commands",
		[
		[
			"Layer 0",
			0,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			[
			[
				[339.881, 240.24, 0, 701.53, 486.394, 0, 0, 1, 0.5, 0.501202],
				24,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[142, 270, 0, 335.985, 356.984, 0, 0, 1, 0.5, 0.5],
				27,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[286, 333, 0, 329.643, 350.246, 0, 0, 1, 0.5, 0.5],
				25,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[472, 203, 0, 387.462, 405.465, 0, 0, 1, 0.5, 0.5],
				28,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[99, 59, 0, 160.455, 152.454, 0, 0, 1, 0.501385, 0.501458],
				29,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[440, 64, 0, 165.167, 156.932, 0, 0, 1, 0.501385, 0.501458],
				30,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[601, 313, 0, 393.572, 418.17, 0, 0, 1, 0.5, 0.5],
				26,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[259, 140, 0, 174.826, 166.108, 0, 0, 1, 0.501385, 0.501458],
				31,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[580, 134, 0, 177.336, 168.494, 0, 0, 1, 0.501385, 0.501458],
				32,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
			]
		]
		],
		[
		]
	]
,	[
		"Commands2",
		1280,
		1024,
		false,
		"Commands2",
		[
		[
			"Layer 0",
			0,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			[
			[
				[347, 238, 0, 701.53, 486.394, 0, 0, 1, 0.5, 0.501202],
				24,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[111, 54, 0, 160.455, 152.454, 0, 0, 1, 0.501385, 0.501458],
				29,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[204, 85, 0, 177.336, 168.494, 0, 0, 1, 0.501385, 0.501458],
				32,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[154, 228, 0, 335.985, 356.984, 0, 0, 1, 0.5, 0.5],
				27,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[167, 299, 0, 393.572, 418.17, 0, 0, 1, 0.5, 0.5],
				26,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[419, 288, 0, 306, 298, 0, 0, 1, 0.506536, 0.5],
				18,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[350, 81, 0, 91.6515, 91.6515, 0, 0, 1, 0.5, 0.5],
				40,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
			]
		]
		],
		[
		]
	]
,	[
		"End",
		1280,
		1024,
		false,
		"End",
		[
		[
			"Layer 0",
			0,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			[
			[
				[319, 218, 0, 644.495, 644.495, 0, 0, 1, 0.5, 0.5],
				38,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
			]
		]
		],
		[
		]
	]
,	[
		"Game Over",
		1280,
		1024,
		false,
		"End",
		[
		[
			"Layer 0",
			0,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			[
			[
				[322, 239, 0, 645.125, 501.764, 0, 0, 1, 0.5, 0.5],
				36,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
			]
		]
		],
		[
		]
	]
,	[
		"Creditos",
		1280,
		1024,
		false,
		"End",
		[
		[
			"Layer 0",
			0,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			[
			[
				[324, 244, 0, 645.487, 502.046, 0, 0, 1, 0.5, 0.5],
				39,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
			]
		]
		],
		[
		]
	]
,	[
		"GamePlay",
		1280,
		1024,
		false,
		"Life Bar",
		[
		[
			"Layer 0",
			0,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			[
			[
				[495, 213, 0, 210, 222, 0, 0, 1, 0.5, 0.5],
				8,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[421, 241, 0, 109, 86, 0, 0, 1, 0.5, 0.5],
				5,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[365, 427, 0, 136, 31, 0, 0, 1, 0.503333, 0.505618],
				7,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[371, 336, 0, 107, 84, 0, 0, 1, 0.504926, 0.5],
				6,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[367, 461, 0, 136, 31, 0, 0, 1, 0.503333, 0.5],
				20,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[77.1666, 249.124, 0, 116.806, 113.752, 0, 0, 1, 0.506536, 0.5],
				18,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[602.426, 434.077, 0, 469.847, 469.847, 0, 0, 1, 0.505, 0.5],
				23,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[168.056, 610.816, 0, 374.367, 374.367, 0, 0, 1, 0.505, 0.5],
				22,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[258, 193, 0, 300, 300, 0, 0, 1, 0.503333, 0.5],
				19,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
,			[
				[723, 112, 0, 252.357, 252.357, 0, 0, 1, 0.503333, 0.5],
				21,
				[
				],
				[
				],
				[
					0,
					0,
					0
				]
			]
			]
		]
		],
		[
		]
	]
	],
	[
	[
		"Life Bar",
		[
		[
			2,
			"Skill Input"
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				9,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						20,
						9,
						cr.plugins_.Sprite.prototype.exps.Width,
						false,
						null
					]
				]
				]
			]
,			[
				9,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null
				,[
				[
					0,
					[
						20,
						10,
						cr.plugins_.Sprite.prototype.exps.X,
						false,
						null
					]
				]
,				[
					0,
					[
						20,
						10,
						cr.plugins_.Sprite.prototype.exps.Y,
						false,
						null
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				false,
				false,
				false,
				false
			]
			],
			[
			[
				9,
				cr.plugins_.Sprite.prototype.acts.SetWidth,
				null
				,[
				[
					0,
					[
						6,
						[
							21,
							9,
							false,
							null
							,0
						]
						,[
							7,
							[
								23,
								"PlayerHP"
							]
							,[
								23,
								"PlayerHPMax"
							]
						]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				13,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						20,
						13,
						cr.plugins_.Sprite.prototype.exps.Width,
						false,
						null
					]
				]
				]
			]
,			[
				13,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null
				,[
				[
					0,
					[
						20,
						14,
						cr.plugins_.Sprite.prototype.exps.X,
						false,
						null
					]
				]
,				[
					0,
					[
						20,
						14,
						cr.plugins_.Sprite.prototype.exps.Y,
						false,
						null
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				false,
				false,
				false,
				false
			]
			],
			[
			[
				13,
				cr.plugins_.Sprite.prototype.acts.SetWidth,
				null
				,[
				[
					0,
					[
						6,
						[
							21,
							13,
							false,
							null
							,0
						]
						,[
							7,
							[
								23,
								"MonsterHP"
							]
							,[
								23,
								"MonsterHPMax"
							]
						]
					]
				]
				]
			]
			]
		]
		]
	]
,	[
		"Skill Input",
		[
		[
			1,
			"Teste",
			0,
			0		]
,		[
			2,
			"Skill Effects"
		]
,		[
			0,
			null,
			false,
			[
			[
				4,
				cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased,
				null,
				true,
				false,
				false,
				false
				,[
				[
					9,
					65
				]
				]
			]
,			[
				0,
				cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
				null,
				false,
				false,
				true,
				false
				,[
				[
					10,
					1
				]
				]
			]
			],
			[
			[
				0,
				cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
				null
				,[
				[
					10,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				0,
				cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
				null
				,[
				[
					10,
					1
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetGroupActive,
				null
				,[
				[
					1,
					[
						2,
						"Ataque"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				4,
				cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased,
				null,
				true,
				false,
				false,
				false
				,[
				[
					9,
					83
				]
				]
			]
,			[
				1,
				cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
				null,
				false,
				false,
				true,
				false
				,[
				[
					10,
					1
				]
				]
			]
			],
			[
			[
				1,
				cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
				null
				,[
				[
					10,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				1,
				cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
				null
				,[
				[
					10,
					1
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetGroupActive,
				null
				,[
				[
					1,
					[
						2,
						"Ataque"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				4,
				cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased,
				null,
				true,
				false,
				false,
				false
				,[
				[
					9,
					90
				]
				]
			]
,			[
				2,
				cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
				null,
				false,
				false,
				true,
				false
				,[
				[
					10,
					1
				]
				]
			]
			],
			[
			[
				2,
				cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
				null
				,[
				[
					10,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				2,
				cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
				null
				,[
				[
					10,
					1
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetGroupActive,
				null
				,[
				[
					1,
					[
						2,
						"Ataque"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				4,
				cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased,
				null,
				true,
				false,
				false,
				false
				,[
				[
					9,
					88
				]
				]
			]
,			[
				3,
				cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
				null,
				false,
				false,
				true,
				false
				,[
				[
					10,
					1
				]
				]
			]
			],
			[
			[
				3,
				cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
				null
				,[
				[
					10,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				3,
				cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
				null
				,[
				[
					10,
					1
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetGroupActive,
				null
				,[
				[
					1,
					[
						2,
						"Ataque"
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			[false, "Ataque"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"Ataque"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					1,
					cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
					null,
					false,
					false,
					false,
					false
					,[
					[
						10,
						0
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					[
					[
						2,
						cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
						null,
						false,
						false,
						false,
						false
						,[
						[
							10,
							0
						]
						]
					]
					],
					[
					[
						1,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						2,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null
						,[
						[
							1,
							[
								2,
								"10 - Ataque Invisibilidade"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					[
					[
						3,
						cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
						null,
						false,
						false,
						false,
						false
						,[
						[
							10,
							0
						]
						]
					]
					],
					[
					[
						1,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						3,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null
						,[
						[
							1,
							[
								2,
								"6 - Ataque Estilhaço"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					[
					[
						0,
						cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
						null,
						false,
						false,
						false,
						false
						,[
						[
							10,
							0
						]
						]
					]
					],
					[
					[
						1,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						0,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null
						,[
						[
							1,
							[
								2,
								"7 - Ataque Flecha de Luz"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					0,
					cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
					null,
					false,
					false,
					false,
					false
					,[
					[
						10,
						0
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					[
					[
						2,
						cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
						null,
						false,
						false,
						false,
						false
						,[
						[
							10,
							0
						]
						]
					]
					],
					[
					[
						0,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						2,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null
						,[
						[
							1,
							[
								2,
								"9 - Ataque Status Cancel"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					[
					[
						3,
						cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
						null,
						false,
						false,
						false,
						false
						,[
						[
							10,
							0
						]
						]
					]
					],
					[
					[
						0,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						3,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null
						,[
						[
							1,
							[
								2,
								"5 - Ataque Espada de Fogo"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					2,
					cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
					null,
					false,
					false,
					false,
					false
					,[
					[
						10,
						0
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					[
					[
						3,
						cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
						null,
						false,
						false,
						false,
						false
						,[
						[
							10,
							0
						]
						]
					]
					],
					[
					[
						2,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						3,
						cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
						null
						,[
						[
							10,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null
						,[
						[
							1,
							[
								2,
								"8 - Ataque Provocação"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					3,
					cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
					null,
					false,
					false,
					false,
					false
					,[
					[
						10,
						0
					]
					]
				]
				],
				[
				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"1 - Ataque Espada"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					0,
					cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
					null,
					false,
					false,
					false,
					false
					,[
					[
						10,
						0
					]
					]
				]
				],
				[
				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"2 - Ataque Bola de Fogo"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					1,
					cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
					null,
					false,
					false,
					false,
					false
					,[
					[
						10,
						0
					]
					]
				]
				],
				[
				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"3 - Ataque Flecha"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					2,
					cr.plugins_.Sprite.prototype.cnds.IsBoolInstanceVarSet,
					null,
					false,
					false,
					false,
					false
					,[
					[
						10,
						0
					]
					]
				]
				],
				[
				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"4 - Ataque Escudo"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				],
				[
				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
		]
	]
,	[
		"MonsterIA Slime",
		[
		[
			2,
			"Skill effects Slime"
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null
				,[
				[
					11,
					"MonsterHPMax"
				]
,				[
					7,
					[
						21,
						11,
						false,
						null
						,1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null
				,[
				[
					11,
					"MonsterHP"
				]
,				[
					7,
					[
						21,
						11,
						false,
						null
						,1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.Every,
				null,
				false,
				false,
				false,
				false
				,[
				[
					0,
					[
						1,
						1
					]
				]
				]
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SubInstanceVar,
				null
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			[true, "DecideNextAtack"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"DecideNextAtack"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				[
					11,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					false,
					false,
					false,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						3
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							21,
							11,
							false,
							null
							,2
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						false,
						false,
						false,
						false
						,[
						[
							11,
							"MonsterHP"
						]
,						[
							8,
							4
						]
,						[
							7,
							[
								6,
								[
									1,
									0.2
								]
								,[
									21,
									11,
									false,
									null
									,1
								]
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null
						,[
						[
							1,
							[
								2,
								"Behaviour Normal"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					[
					[
						-1,
						cr.system_object.prototype.cnds.Else,
						null,
						false,
						false,
						false,
						false
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetGroupActive,
						null
						,[
						[
							1,
							[
								2,
								"Behaviour Final Moments"
							]
						]
,						[
							3,
							1
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[false, "Behaviour Normal"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"Behaviour Normal"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				1,
				"Dice",
				0,
				0			]
,			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Behaviour Normal"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null
					,[
					[
						11,
						"Dice"
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps.random
							,[
[
								0,
								0
							]
,[
								0,
								100
							]
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					false,
					false,
					false,
					false
					,[
					[
						11,
						"Dice"
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							40
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Hop"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Else,
					null,
					false,
					false,
					false,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Squirt"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[false, "Behaviour Final Moments"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"Behaviour Final Moments"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				1,
				"Dice",
				0,
				0			]
,			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Behaviour Final Moments"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Split"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						30
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Fomos atingidos!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Passou direto por ele!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						2
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						15
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						2
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						2
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Está fervendo!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Passou direto por ele!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						8
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Espirrou por todo o lado!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						5
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						8
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Queimou mas se reconstruiu!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						6
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						2
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						6
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						6
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Mal arranhou!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						7
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						7
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						8
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						7
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Como brilha!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						8
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						8
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						12
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						8
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Não pareceu se incomodar!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						9
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						9
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						9
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Não fez nada!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Errou!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						30
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Fomos atingidos!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						20
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Não consigo ver!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						2
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						2
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						30
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						2
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"ARGH! Está derretendo o meu rosto!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Passou direto por ele!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						2
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Defendemos!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						20
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Não consigo ver!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						6
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						5
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						6
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						20
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						6
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Que bagunça!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						7
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						7
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						15
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						7
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Um show de luzes roxas!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						8
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						8
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						25
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						8
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Argh veio um pouco na minha boca!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						9
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						9
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						20
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						9
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Não funcionou!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Errou!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						-10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Ele está se recuperando!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						-15
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Só esta fazendo mais cópias!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						2
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						2
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						2
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Está impedindo sua regeneração!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						-10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Não fez nada!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						-10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Não fez nada!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						5
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Está impedindo sua regeneração!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						6
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						12
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						6
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						6
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Está perdendo a forma, só mais um pouco!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						7
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						7
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						7
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Está impedindo  a sua regeneração!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						8
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						8
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						8
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Está impedindo  a sua regeneração!"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						9
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						-10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						9
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						9
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Não fez nada"
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						0
					]
				]
,				[
					7,
					[
						0,
						-10
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Arr.prototype.acts.SetXYZ,
				null
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						4
					]
				]
,				[
					0,
					[
						0,
						2
					]
				]
,				[
					7,
					[
						2,
						"Não fez nada"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			],
			[
			]
		]
		]
	]
,	[
		"Skill Effects",
		[
		[
			0,
			[false, "1 - Ataque Espada"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"1 - Ataque Espada"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"1 - Ataque Espada"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						5
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							480
						]
					]
,					[
						0,
						[
							0,
							220
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					5,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
,		[
			0,
			[false, "2 - Ataque Bola de Fogo"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"2 - Ataque Bola de Fogo"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"2 - Ataque Bola de Fogo"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						6
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							530
						]
					]
,					[
						0,
						[
							0,
							220
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					6,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
,		[
			0,
			[false, "3 - Ataque Flecha"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"3 - Ataque Flecha"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"3 - Ataque Flecha"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						7
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								1,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								0,
								120
							]
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								1,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								0,
								50
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					7,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
,		[
			0,
			[false, "4 - Ataque Escudo"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"4 - Ataque Escudo"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"4 - Ataque Escudo"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							4
						]
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						8
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							300
						]
					]
,					[
						0,
						[
							0,
							220
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					8,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
,		[
			0,
			[false, "5 - Ataque Espada de fogo"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"5 - Ataque Espada de fogo"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"5 - Ataque Espada de Fogo"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						18
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							480
						]
					]
,					[
						0,
						[
							0,
							230
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					18,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
,		[
			0,
			[false, "6 - Ataque Estilhaço"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"6 - Ataque Estilhaço"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"6 - Ataque Estilhaço"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							6
						]
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						19
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							480
						]
					]
,					[
						0,
						[
							0,
							230
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					19,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
,		[
			0,
			[false, "7 - Ataque Flecha de Luz"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"7 - Ataque Flecha de Luz"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"7 - Ataque Flecha de Luz"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							7
						]
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						20
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								1,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
							,[
								0,
								120
							]
						]
					]
,					[
						0,
						[
							4,
							[
								20,
								1,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
							,[
								0,
								50
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					20,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
,		[
			0,
			[false, "8 - Ataque Provocação"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"8 - Ataque Provocação"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"8 - Ataque Provocação"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							8
						]
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						21
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							350
						]
					]
,					[
						0,
						[
							0,
							250
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					21,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
,		[
			0,
			[false, "9 - Ataque Status Cancel"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"9 - Ataque Status Cancel"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"9 - Ataque Status Cancel"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							9
						]
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						22
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							220
						]
					]
,					[
						0,
						[
							0,
							230
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					22,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
,		[
			0,
			[false, "10 - Ataque Invisibilidade"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"10 - Ataque Invisibilidade"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"10 - Ataque Invisibilidade"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							10
						]
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Ataque"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						23
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							220
						]
					]
,					[
						0,
						[
							0,
							220
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					23,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
				]
			]
			]
		]
		]
	]
,	[
		"Main",
		[
		[
			1,
			"PlayerHP",
			0,
			100		]
,		[
			1,
			"PlayerHPMax",
			0,
			100		]
,		[
			1,
			"MonsterHP",
			0,
			100		]
,		[
			1,
			"MonsterHPMax",
			0,
			100		]
,		[
			2,
			"Resolver"
		]
,		[
			2,
			"MonsterIA Slime"
		]
,		[
			2,
			"Skill Input"
		]
,		[
			2,
			"Life Bar"
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				16,
				cr.plugins_.Audio.prototype.acts.Play,
				null
				,[
				[
					2,
					["rpuzzleg - real battle theme intro",true]
				]
,				[
					3,
					0
				]
,				[
					1,
					[
						2,
						"Intro"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				16,
				cr.plugins_.Audio.prototype.cnds.OnEnded,
				null,
				true,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"Intro"
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Audio.prototype.acts.Play,
				null
				,[
				[
					2,
					["rpuzzleg - real battle theme loop",true]
				]
,				[
					3,
					1
				]
,				[
					1,
					[
						2,
						""
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			],
			[
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutEnd,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				16,
				cr.plugins_.Audio.prototype.acts.Stop,
				null
				,[
				[
					1,
					[
						2,
						""
					]
				]
				]
			]
			]
		]
		]
	]
,	[
		"Skill effects Slime",
		[
		[
			0,
			[false, "Hop"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"Hop"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Hop"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"HopCue"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					12,
					cr.plugins_.TextBox.prototype.acts.SetText,
					null
					,[
					[
						1,
						[
							2,
							"Slime se prepara para pular!"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							300
						]
					]
,					[
						0,
						[
							0,
							100
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							4
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"HopAttack"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Resolve"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[false, "Squirt"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"Squirt"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Squirt"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"SquirtCue"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					12,
					cr.plugins_.TextBox.prototype.acts.SetText,
					null
					,[
					[
						1,
						[
							2,
							"Slime está espirrando!"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							300
						]
					]
,					[
						0,
						[
							0,
							100
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							4
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"SquirtAttack"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Resolve"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			[false, "Split"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"Split"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Split"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"SplitCue"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					12,
					cr.plugins_.TextBox.prototype.acts.SetText,
					null
					,[
					[
						1,
						[
							2,
							"Slime está se dividindo"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						0
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Parado"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							2
						]
					]
,					[
						0,
						[
							0,
							300
						]
					]
,					[
						0,
						[
							0,
							100
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							4
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"SplitAttack"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							4
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Resolve"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
		]
	]
,	[
		"Resolver",
		[
		[
			0,
			[false, "Resolve"],
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.IsGroupActive,
				null,
				false,
				false,
				false,
				false
				,[
				[
					1,
					[
						2,
						"Resolve"
					]
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Compare,
					null,
					false,
					false,
					false,
					false
					,[
					[
						7,
						[
							20,
							15,
							cr.plugins_.Arr.prototype.exps.At,
							false,
							null
							,[
[
								21,
								15,
								false,
								null
								,0
							]
,[
								21,
								15,
								false,
								null
								,1
							]
,[
								0,
								1
							]
							]
						]
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							20,
							15,
							cr.plugins_.Arr.prototype.exps.At,
							false,
							null
							,[
[
								21,
								15,
								false,
								null
								,0
							]
,[
								21,
								15,
								false,
								null
								,1
							]
,[
								0,
								0
							]
							]
						]
					]
					]
				]
				],
				[
				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Hit"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Hit"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Hit"
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Hit"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Else,
					null,
					false,
					false,
					false,
					false
				]
				],
				[
				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Hit"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				[
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetGroupActive,
					null
					,[
					[
						1,
						[
							2,
							"Resolve"
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					40,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.SetBoolInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SubVar,
					null
					,[
					[
						11,
						"MonsterHP"
					]
,					[
						7,
						[
							20,
							15,
							cr.plugins_.Arr.prototype.exps.At,
							false,
							null
							,[
[
								21,
								15,
								false,
								null
								,0
							]
,[
								21,
								15,
								false,
								null
								,1
							]
,[
								0,
								0
							]
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SubVar,
					null
					,[
					[
						11,
						"PlayerHP"
					]
,					[
						7,
						[
							20,
							15,
							cr.plugins_.Arr.prototype.exps.At,
							false,
							null
							,[
[
								21,
								15,
								false,
								null
								,0
							]
,[
								21,
								15,
								false,
								null
								,1
							]
,[
								0,
								1
							]
							]
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					15,
					cr.plugins_.Arr.prototype.acts.SetInstanceVar,
					null
					,[
					[
						10,
						1
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					11,
					cr.plugins_.Sprite.prototype.acts.SetAnim,
					null
					,[
					[
						1,
						[
							2,
							"Default"
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				false,
				false,
				false,
				false
				,[
				[
					11,
					"PlayerHP"
				]
,				[
					8,
					3
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				12,
				cr.plugins_.TextBox.prototype.acts.SetText,
				null
				,[
				[
					1,
					[
						2,
						"Fomos....vencidos..."
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null
				,[
				[
					0,
					[
						1,
						3
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null
				,[
				[
					6,
					"Game Over"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				false,
				false,
				false,
				false
				,[
				[
					11,
					"MonsterHP"
				]
,				[
					8,
					3
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.SetAnim,
				null
				,[
				[
					1,
					[
						2,
						"Hit"
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				12,
				cr.plugins_.TextBox.prototype.acts.SetText,
				null
				,[
				[
					1,
					[
						2,
						"O monstro está se desfazendo !!!"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null
				,[
				[
					0,
					[
						0,
						3
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null
				,[
				[
					6,
					"End"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			],
			[
			]
		]
		]
	]
,	[
		"End",
		[
		[
			0,
			null,
			false,
			[
			[
				4,
				cr.plugins_.Keyboard.prototype.cnds.OnAnyKey,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null
				,[
				[
					6,
					"Intro"
				]
				]
			]
			]
		]
		]
	]
,	[
		"Commands",
		[
		[
			0,
			null,
			false,
			[
			[
				4,
				cr.plugins_.Keyboard.prototype.cnds.OnAnyKey,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null
				,[
				[
					6,
					"Commands2"
				]
				]
			]
			]
		]
		]
	]
,	[
		"Intro",
		[
		[
			0,
			null,
			false,
			[
			[
				17,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				true,
				false,
				false,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					33
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null
				,[
				[
					6,
					"Commands"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				17,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				true,
				false,
				false,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					34
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null
				,[
				[
					6,
					"Creditos"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				4,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				true,
				false,
				false,
				false
				,[
				[
					9,
					49
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null
				,[
				[
					6,
					"Commands"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				16,
				cr.plugins_.Audio.prototype.acts.Play,
				null
				,[
				[
					2,
					["rpuzzleg - title screen",true]
				]
,				[
					3,
					1
				]
,				[
					1,
					[
						2,
						""
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.ResetGlobals,
				null
			]
			]
		]
		]
	]
,	[
		"Commands2",
		[
		[
			0,
			null,
			false,
			[
			[
				4,
				cr.plugins_.Keyboard.prototype.cnds.OnAnyKey,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null
				,[
				[
					6,
					"Layout 1"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutEnd,
				null,
				true,
				false,
				false,
				false
			]
			],
			[
			[
				16,
				cr.plugins_.Audio.prototype.acts.Stop,
				null
				,[
				[
					1,
					[
						2,
						""
					]
				]
				]
			]
			]
		]
		]
	]
	],
	"media/",
	false,
	640,
	480,
	0,
	true,
	true,
	false,
	"1.0",
	true,
	false,
	0
];};
